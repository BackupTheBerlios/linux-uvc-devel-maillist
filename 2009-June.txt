From why21c at hanmail.net  Mon Jun  1 07:01:27 2009
From: why21c at hanmail.net (fjklsd)
Date: Mon, 01 Jun 2009 14:01:27 +0900 (KST)
Subject: [Linux-uvc-devel] Possible to use 2 streaming interface with UVC
	driver?
Message-ID: <20090601140127.HM.00000000000001n@why21c.wwl489.hanmail.net>

An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090601/2710f4ea/attachment.html>

From laurent.pinchart at skynet.be  Mon Jun  1 23:07:28 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Mon, 1 Jun 2009 23:07:28 +0200
Subject: [Linux-uvc-devel] Possible to use 2 streaming interface with
	UVC driver?
In-Reply-To: <20090601140127.HM.00000000000001n@why21c.wwl489.hanmail.net>
References: <20090601140127.HM.00000000000001n@why21c.wwl489.hanmail.net>
Message-ID: <200906012307.29053.laurent.pinchart@skynet.be>

Hi,

On Monday 01 June 2009 07:01:27 fjklsd wrote:
>  Hi.
>  I'm developing a kind of webcam which transfer MJPEG and H.264
> simultaneously with UVC. I'm not sure that UVC driver supports  2 streaming
> Inteface. Actually, UVC spec supports multiple streaming interface.
> However, I can't figure out how to use uvc driver for using 2 streaming
> interface. 
>  Is it possible to use 2 streaming interface with UVC driver? If possible,
> can anyone help me to use UVC driver about using 2 streaming interface
> simply? 

The UVC video driver currently doesn't support multiple streaming interfaces. 
The main reason was that I lacked hardware with multiple streaming interfaces 
to test that feature. By the way, does the Windows UVC driver support multiple 
streaming interfaces ?

If you send me the USB descriptors of your devices I could have a look at the 
driver to see how I could add multiple streaming interfaces support.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Tue Jun  2 00:52:23 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Tue, 2 Jun 2009 00:52:23 +0200
Subject: [Linux-uvc-devel] [PATCH] VIDIOC_[GS]_JPEGCOMP support
In-Reply-To: <wfeiu7f120.fsf@calligramme.charmers>
References: <EFE3E62A-C489-45B7-A4B2-B0E53E953AB3@federated.com>
	<200905270150.18955.laurent.pinchart@skynet.be>
	<wfeiu7f120.fsf@calligramme.charmers>
Message-ID: <200906020052.23979.laurent.pinchart@skynet.be>

Hi Jon,

On Saturday 30 May 2009 10:27:19 Jon Fairbairn wrote:
> Laurent Pinchart <laurent.pinchart at skynet.be> writes:
> > I'll try to get a patch ready for the end of the week. If
> > I don't feel free to (nicely) remind me.
>
> Before i can decide to remind you, I need to know whether
> you regard the week as ending on Saturday or Sunday ;-)

On Monday of course ;-)

Here's a patch that implements VIDIOC_[GS]_JPEGCOMP. It seems to work with a 
Logitech QuickCam Pro for Notebooks. Could you please test it with your 
camera(s) and report the results ?

Best regards,

Laurent Pinchart

-------------- next part --------------
A non-text attachment was scrubbed...
Name: jpeg-quality.patch
Type: text/x-patch
Size: 2956 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090602/5b8b9a96/attachment.bin>

From why21c at hanmail.net  Tue Jun  2 03:42:53 2009
From: why21c at hanmail.net (Chris)
Date: Tue, 02 Jun 2009 10:42:53 +0900 (KST)
Subject: [Linux-uvc-devel] Possible to use 2 streaming interface withUVC
	driver?
Message-ID: <20090602104253.HM.00000000000001v@why21c.wwl489.hanmail.net>

An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090602/26515ef1/attachment.html>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090602/26515ef1/attachment.htm>

From jezz at sysmic.org  Tue Jun  2 12:38:52 2009
From: jezz at sysmic.org (=?iso-8859-15?q?J=E9r=F4me_Pouiller?=)
Date: Tue, 2 Jun 2009 12:38:52 +0200
Subject: [Linux-uvc-devel] BisonCam, NB Pro (5986:0241)
In-Reply-To: <200905312209.26101.laurent.pinchart@skynet.be>
References: <200905261749.15922.jezz@sysmic.org>
	<200905291230.37392.jezz@sysmic.org>
	<200905312209.26101.laurent.pinchart@skynet.be>
Message-ID: <200906021238.52551.jezz@sysmic.org>

On Sunday 31 May 2009 22:09:25 Laurent Pinchart wrote:
> On Friday 29 May 2009 12:30:36 J?r?me Pouiller wrote:
[...]
> > Else, this patch works very well. Thank you.
>
> You're welcome. I've reworked the patch a bit and I'll submit it
> soon.
>
> Could you please tell me in what monitor/laptop/whatever the
> 5986:0241 camera can be found ? I'll then update the supported
> devices list.
This camera is built in MSI Wind Top AE1900-WT also called MS-6638 
(http://us.msi.com/msiaio/). It is an all in one PC. lspci output is in 
attachment.

Best regards,

-- 
J?r?me Pouiller (jezz AT sysmic DOT org)
-------------- next part --------------
00:00.0 Host bridge [0600]: Intel Corporation 945G/GZ/P/PL Express Memory Controller Hub [8086:2770] (rev 02)
00:02.0 VGA compatible controller [0300]: Intel Corporation 945G/GZ Express Integrated Graphics Controller [8086:2772] (rev 02)
00:1b.0 Audio device [0403]: Intel Corporation 82801G (ICH7 Family) High Definition Audio Controller [8086:27d8] (rev 01)
00:1c.0 PCI bridge [0604]: Intel Corporation 82801G (ICH7 Family) PCI Express Port 1 [8086:27d0] (rev 01)
00:1c.1 PCI bridge [0604]: Intel Corporation 82801G (ICH7 Family) PCI Express Port 2 [8086:27d2] (rev 01)
00:1c.2 PCI bridge [0604]: Intel Corporation 82801G (ICH7 Family) PCI Express Port 3 [8086:27d4] (rev 01)
00:1c.3 PCI bridge [0604]: Intel Corporation 82801G (ICH7 Family) PCI Express Port 4 [8086:27d6] (rev 01)
00:1d.0 USB Controller [0c03]: Intel Corporation 82801G (ICH7 Family) USB UHCI #1 [8086:27c8] (rev 01)
00:1d.1 USB Controller [0c03]: Intel Corporation 82801G (ICH7 Family) USB UHCI #2 [8086:27c9] (rev 01)
00:1d.2 USB Controller [0c03]: Intel Corporation 82801G (ICH7 Family) USB UHCI #3 [8086:27ca] (rev 01)
00:1d.3 USB Controller [0c03]: Intel Corporation 82801G (ICH7 Family) USB UHCI #4 [8086:27cb] (rev 01)
00:1d.7 USB Controller [0c03]: Intel Corporation 82801G (ICH7 Family) USB2 EHCI Controller [8086:27cc] (rev 01)
00:1e.0 PCI bridge [0604]: Intel Corporation 82801 PCI Bridge [8086:244e] (rev e1)
00:1f.0 ISA bridge [0601]: Intel Corporation 82801GB/GR (ICH7 Family) LPC Interface Bridge [8086:27b8] (rev 01)
00:1f.1 IDE interface [0101]: Intel Corporation 82801G (ICH7 Family) IDE Controller [8086:27df] (rev 01)
00:1f.2 IDE interface [0101]: Intel Corporation 82801GB/GR/GH (ICH7 Family) Serial ATA Storage Controller IDE [8086:27c0] (rev 01)
00:1f.3 SMBus [0c05]: Intel Corporation 82801G (ICH7 Family) SMBus Controller [8086:27da] (rev 01)
01:00.0 Ethernet controller [0200]: Realtek Semiconductor Co., Ltd. RTL8111/8168B PCI Express Gigabit Ethernet controller [10ec:8168] (rev 02)
02:00.0 Network controller [0280]: RaLink Unknown device [1814:0781]

From laurent.pinchart at skynet.be  Tue Jun  2 14:37:07 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Tue, 2 Jun 2009 14:37:07 +0200
Subject: [Linux-uvc-devel] BisonCam, NB Pro (5986:0241)
In-Reply-To: <200906021238.52551.jezz@sysmic.org>
References: <200905261749.15922.jezz@sysmic.org>
	<200905312209.26101.laurent.pinchart@skynet.be>
	<200906021238.52551.jezz@sysmic.org>
Message-ID: <200906021437.07772.laurent.pinchart@skynet.be>

Hi J?r?me,

On Tuesday 02 June 2009 12:38:52 J?r?me Pouiller wrote:
> On Sunday 31 May 2009 22:09:25 Laurent Pinchart wrote:
> > On Friday 29 May 2009 12:30:36 J?r?me Pouiller wrote:
>
> [...]
>
> > > Else, this patch works very well. Thank you.
> >
> > You're welcome. I've reworked the patch a bit and I'll submit it
> > soon.
> >
> > Could you please tell me in what monitor/laptop/whatever the
> > 5986:0241 camera can be found ? I'll then update the supported
> > devices list.
>
> This camera is built in MSI Wind Top AE1900-WT also called MS-6638
> (http://us.msi.com/msiaio/). It is an all in one PC. lspci output is in
> attachment.

Thanks. Web site updated.

Regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Tue Jun  2 15:22:24 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Tue, 2 Jun 2009 15:22:24 +0200
Subject: [Linux-uvc-devel] Audio Problem / USB disconnects
In-Reply-To: <3337c250905311409u490001b2rb89b30a7b97c593e@mail.gmail.com>
References: <3337c250905310410u35fc3bfaje1dba45a80fe7d48@mail.gmail.com>
	<3337c250905311409u490001b2rb89b30a7b97c593e@mail.gmail.com>
Message-ID: <200906021522.24298.laurent.pinchart@skynet.be>

Hi Christopher,

On Sunday 31 May 2009 23:09:34 Christopher HORLER wrote:
> Hi,
>
> I'm experiencing some difficulty with the Logitech Sphere AF. (I can
> temporarily reset the camera by removing the uvcvideo and
> snd_usb_audio modules from the kernel).
> Details below:
>
> Chris
>
> I'm running openSuSE 11.1, SuSE kernel 2.6.27.21-0.1-default, if it
> would help I can update the module to the latest version from the
> project page.
>
> I have added the following line to modprobe.conf.local - which
> initially allows the video and audio to function:
> install uvcvideo /sbin/modprobe snd_usb_audio; /sbin/modprobe
> --ignore-install uvcvideo
>
> The system is showing spontaneous 'USB disconnects' at random
> intervals (e.g. the first disconnect below).  I also notice 'Failed to
> query ... control ...' from uvcvideo.

The "Failed to query" messages are unfortunately not surprising. Many "old" 
Logitech UVC webcams suffer from a firmware bug that has no known 100% 
reliable workaround.

The spontaneous disconnection troubles me. I've never noticed, or even heard 
of, such a problem with Logitech UVC webcams.

> dmesg:
> usb 4-4: new high speed USB device using ehci_hcd and address 2
> usb 4-4: configuration #1 chosen from 1 choice
> usb 4-4: New USB device found, idVendor=046d, idProduct=0994
> usb 4-4: New USB device strings: Mfr=0, Product=0, SerialNumber=2
> usb 4-4: SerialNumber: BB56BCEC
> Linux video capture interface: v2.00
> usbcore: registered new interface driver snd-usb-audio
> uvcvideo: Found UVC 1.00 device <unnamed> (046d:0994)
> input: UVC Camera (046d:0994) as
> /devices/pci0000:00/0000:00:1d.7/usb4/4-4/4-4:1.0/input/input8
> usbcore: registered new interface driver uvcvideo
> USB Video Class driver (v0.1.0)
> uvcvideo: Failed to query (135) UVC control 2 (unit 2) : -110 (exp. 2).
> uvcvideo: Failed to query (135) UVC control 7 (unit 2) : -110 (exp. 2).
> uvcvideo: Failed to query (135) UVC control 3 (unit 2) : -110 (exp. 2).
> usb 4-4: USB disconnect, address 2
> ALSA sound/usb/usbaudio.c:351: frame 0 active: -71
> ALSA sound/usb/usbaudio.c:696: cannot submit urb (err = -19)
> ALSA sound/usb/usbaudio.c:868: cannot submit datapipe for urb 0, error
> -19: no device
>
> <repeated many times...>
>
> ALSA sound/usb/usbaudio.c:868: cannot submit datapipe for urb 0, error
> -19: no device
>
>
> Subsequent physical replugging of the camera leads to events like these:
>
>
> usb 4-4: new high speed USB device using ehci_hcd and address 3
> usb 4-4: configuration #1 chosen from 1 choice
> uvcvideo: Found UVC 1.00 device <unnamed> (046d:0994)
> input: UVC Camera (046d:0994) as
> /devices/pci0000:00/0000:00:1d.7/usb4/4-4/4-4:1.0/input/input9
> usb 4-4: New USB device found, idVendor=046d, idProduct=0994
> usb 4-4: New USB device strings: Mfr=0, Product=0, SerialNumber=2
> usb 4-4: SerialNumber: BB56BCEC
> uvcvideo: Failed to query (130) UVC control 2 (unit 2) : -110 (exp. 2).
> uvcvideo: Failed to query (135) UVC control 7 (unit 2) : -110 (exp. 2).
> uvcvideo: Failed to query (135) UVC control 3 (unit 2) : -110 (exp. 2).
> ALSA sound/usb/usbmixer.c:803: cannot get current value for control 1
> master ch: err = -22

In what time frame does the problem occur (especially the spontaneous 
disconnection) ? Could you try the camera on another machine ?

Best regards,

Laurent Pinchart



From jezz at sysmic.org  Tue Jun  2 16:27:14 2009
From: jezz at sysmic.org (=?iso-8859-15?q?J=E9r=F4me_Pouiller?=)
Date: Tue, 2 Jun 2009 16:27:14 +0200
Subject: [Linux-uvc-devel] BisonCam, NB Pro (5986:0241)
In-Reply-To: <200906021437.07772.laurent.pinchart@skynet.be>
References: <200905261749.15922.jezz@sysmic.org>
	<200906021238.52551.jezz@sysmic.org>
	<200906021437.07772.laurent.pinchart@skynet.be>
Message-ID: <200906021627.14898.jezz@sysmic.org>

On Tuesday 02 June 2009 14:37:07 Laurent Pinchart wrote:
> Hi J?r?me,
[...]
> > This camera is built in MSI Wind Top AE1900-WT also called MS-6638
> > (http://us.msi.com/msiaio/). It is an all in one PC. lspci output
> > is in attachment.
>
> Thanks. Web site updated.
It seems you typed "5986:0204" instead of "5986:0241".


-- 
J?r?me Pouiller (jezz AT sysmic DOT org)


From laurent.pinchart at skynet.be  Tue Jun  2 16:34:21 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Tue, 2 Jun 2009 16:34:21 +0200
Subject: [Linux-uvc-devel] BisonCam, NB Pro (5986:0241)
In-Reply-To: <200906021627.14898.jezz@sysmic.org>
References: <200905261749.15922.jezz@sysmic.org>
	<200906021437.07772.laurent.pinchart@skynet.be>
	<200906021627.14898.jezz@sysmic.org>
Message-ID: <200906021634.21874.laurent.pinchart@skynet.be>

Hi J?r?me,

On Tuesday 02 June 2009 16:27:14 J?r?me Pouiller wrote:
> On Tuesday 02 June 2009 14:37:07 Laurent Pinchart wrote:
> > Hi J?r?me,
>
> [...]
>
> > > This camera is built in MSI Wind Top AE1900-WT also called MS-6638
> > > (http://us.msi.com/msiaio/). It is an all in one PC. lspci output
> > > is in attachment.
> >
> > Thanks. Web site updated.
>
> It seems you typed "5986:0204" instead of "5986:0241".

Oops, my bad. Fixed. Thanks a lot.

Best regards,

Laurent Pinchart



From jon.fairbairn at cl.cam.ac.uk  Tue Jun  2 17:17:36 2009
From: jon.fairbairn at cl.cam.ac.uk (Jon Fairbairn)
Date: Tue, 02 Jun 2009 16:17:36 +0100
Subject: [Linux-uvc-devel] [PATCH] VIDIOC_[GS]_JPEGCOMP support
References: <EFE3E62A-C489-45B7-A4B2-B0E53E953AB3@federated.com>
	<200905270150.18955.laurent.pinchart@skynet.be>
	<wfeiu7f120.fsf@calligramme.charmers>
	<200906020052.23979.laurent.pinchart@skynet.be>
Message-ID: <wftz2y7jhr.fsf@calligramme.charmers>

Hi Laurent,
Laurent Pinchart <laurent.pinchart at skynet.be> writes:
> Here's a patch that implements VIDIOC_[GS]_JPEGCOMP. It seems to work with a 
> Logitech QuickCam Pro for Notebooks. Could you please test it with your 
> camera(s) and report the results ?

Thanks. I downloaded the source for the kernel I'm running,
applied the patch (it applied cleanly), so I built it and
insmodded it, and ran motion -- this message

   motion: [1] VIDIOC_G_JPEGCOMP not supported but it should
   be (does your webcam driver support this ioctl?)

no longer appears, but I still get

   motion: [1] Video device fatal error - Closing video
   device

That might be bug in motion, but I'm not sure what else to
use to test it. mplayer with -tv mjpeg says (inter alia)

Selected driver: v4l2
 name: Video 4 Linux 2 input
 author: Martin Olschewski <olschewski at zpr.uni-koeln.de>
 comment: first try, more to come ;-)
v4l2: video fd: /dev/video0: 3
v4l2: your device driver does not support VIDIOC_G_STD ioctl, VIDIOC_G_PARM was used instead.
Selected device: Live! Cam Optia
 Capabilites:  video capture  streaming
 supported norms:
 inputs: 0 = Camera 1;
 Current input: 0
 Format MJPEG  ( 0 bits, MJPEG): Unknown 0x47504a4d
 Format YUYV   (16 bits, YUV 4:2:2 (YUYV)): Packed YUY2
 Current format: YUYV
v4l2: set format: YVU420
v4l2: ioctl set format failed: Invalid argument
v4l2: set format: YUV420
v4l2: ioctl set format failed: Invalid argument
v4l2: set format: UYVY
v4l2: ioctl set format failed: Invalid argument
v4l2: set format: YUYV
v4l2: set input: 0

which doesn't look right -- it doesn't say "set format:
MJPEG". xawtv just gives me a black window on my vncsession.
luvcview and mjpeg-streamer work in MJPEG mode, but they did
before the patch, so that's no test either.

What would be the right way to test this?

Kernel is 2.6.27.24-78.2.53.fc9.x86_64


-- 
J?n Fairbairn                                 Jon.Fairbairn at cl.cam.ac.uk
http://www.chaos.org.uk/~jf/Stuff-I-dont-want.html  (updated 2009-01-31)



From pj.assis at gmail.com  Tue Jun  2 17:35:17 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Tue, 2 Jun 2009 16:35:17 +0100
Subject: [Linux-uvc-devel] [PATCH] VIDIOC_[GS]_JPEGCOMP support
In-Reply-To: <wftz2y7jhr.fsf@calligramme.charmers>
References: <EFE3E62A-C489-45B7-A4B2-B0E53E953AB3@federated.com>
	<200905270150.18955.laurent.pinchart@skynet.be>
	<wfeiu7f120.fsf@calligramme.charmers>
	<200906020052.23979.laurent.pinchart@skynet.be>
	<wftz2y7jhr.fsf@calligramme.charmers>
Message-ID: <59cf47a80906020835u5c1b8f04v9a35f8baff97408f@mail.gmail.com>

Hi,
I think I can add this to guvcview and run some tests, but I would like some
info on the v4l2_jpegcompression struct, especially on the **jpeg_markers
flag, I believe for mjpeg I should set all flags, except
V4l2_JPEG_MARKER_DHT, since huffman tables are not included in the video
stream, is this correct, or it just doesn't make any difference?
Also is the correct aproach a call to VIDIOC_G_JPEGCOMP for filling the
struct and then just change the quality entry and call  VIDIOC_S_JPEGCOMP?

Best regards,
Paulo

2009/6/2 Jon Fairbairn <jon.fairbairn at cl.cam.ac.uk>

> Hi Laurent,
> Laurent Pinchart <laurent.pinchart at skynet.be> writes:
> > Here's a patch that implements VIDIOC_[GS]_JPEGCOMP. It seems to work
> with a
> > Logitech QuickCam Pro for Notebooks. Could you please test it with your
> > camera(s) and report the results ?
>
> Thanks. I downloaded the source for the kernel I'm running,
> applied the patch (it applied cleanly), so I built it and
> insmodded it, and ran motion -- this message
>
>   motion: [1] VIDIOC_G_JPEGCOMP not supported but it should
>   be (does your webcam driver support this ioctl?)
>
> no longer appears, but I still get
>
>   motion: [1] Video device fatal error - Closing video
>   device
>
> That might be bug in motion, but I'm not sure what else to
> use to test it. mplayer with -tv mjpeg says (inter alia)
>
> Selected driver: v4l2
>  name: Video 4 Linux 2 input
>  author: Martin Olschewski <olschewski at zpr.uni-koeln.de>
>  comment: first try, more to come ;-)
> v4l2: video fd: /dev/video0: 3
> v4l2: your device driver does not support VIDIOC_G_STD ioctl, VIDIOC_G_PARM
> was used instead.
> Selected device: Live! Cam Optia
>  Capabilites:  video capture  streaming
>  supported norms:
>  inputs: 0 = Camera 1;
>  Current input: 0
>  Format MJPEG  ( 0 bits, MJPEG): Unknown 0x47504a4d
>  Format YUYV   (16 bits, YUV 4:2:2 (YUYV)): Packed YUY2
>  Current format: YUYV
> v4l2: set format: YVU420
> v4l2: ioctl set format failed: Invalid argument
> v4l2: set format: YUV420
> v4l2: ioctl set format failed: Invalid argument
> v4l2: set format: UYVY
> v4l2: ioctl set format failed: Invalid argument
> v4l2: set format: YUYV
> v4l2: set input: 0
>
> which doesn't look right -- it doesn't say "set format:
> MJPEG". xawtv just gives me a black window on my vncsession.
> luvcview and mjpeg-streamer work in MJPEG mode, but they did
> before the patch, so that's no test either.
>
> What would be the right way to test this?
>
> Kernel is 2.6.27.24-78.2.53.fc9.x86_64
>
>
> --
> J?n Fairbairn                                 Jon.Fairbairn at cl.cam.ac.uk
> http://www.chaos.org.uk/~jf/Stuff-I-dont-want.html<http://www.chaos.org.uk/%7Ejf/Stuff-I-dont-want.html> (updated 2009-01-31)
>
> _______________________________________________
> Linux-uvc-devel mailing list
> Linux-uvc-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090602/e013563c/attachment.html>

From laurent.pinchart at skynet.be  Tue Jun  2 18:57:21 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Tue, 2 Jun 2009 18:57:21 +0200
Subject: [Linux-uvc-devel] [PATCH] VIDIOC_[GS]_JPEGCOMP support
In-Reply-To: <59cf47a80906020835u5c1b8f04v9a35f8baff97408f@mail.gmail.com>
References: <EFE3E62A-C489-45B7-A4B2-B0E53E953AB3@federated.com>
	<wftz2y7jhr.fsf@calligramme.charmers>
	<59cf47a80906020835u5c1b8f04v9a35f8baff97408f@mail.gmail.com>
Message-ID: <200906021857.22331.laurent.pinchart@skynet.be>

Hi Paulo,

On Tuesday 02 June 2009 17:35:17 Paulo Assis wrote:
> Hi,
> I think I can add this to guvcview and run some tests, but I would like
> some info on the v4l2_jpegcompression struct, especially on the
> **jpeg_markers flag, I believe for mjpeg I should set all flags, except
> V4l2_JPEG_MARKER_DHT, since huffman tables are not included in the video
> stream, is this correct, or it just doesn't make any difference?

It won't make any difference with the uvcvideo driver. The driver ignores the 
flags on VIDIOC_S_JPEGCOMP and returns V4L2_JPEG_MARKER_DQT only on 
VIDIOC_G_JPEGCOMP. The DHT, DRI and COM segments are not included in the MJPEG 
stream, and the APP0 segment is not user-configurable.

> Also is the correct aproach a call to VIDIOC_G_JPEGCOMP for filling the
> struct and then just change the quality entry and call VIDIOC_S_JPEGCOMP?

This is still unclear in the specification. I would assume that drivers will 
fix the flags if the requested value is unsupported. If you want to make sure 
you don't modify them, calling G_JPEGCOMP prior to S_JPEGCOMP sounds good.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Tue Jun  2 18:53:49 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Tue, 2 Jun 2009 18:53:49 +0200
Subject: [Linux-uvc-devel] [PATCH] VIDIOC_[GS]_JPEGCOMP support
In-Reply-To: <wftz2y7jhr.fsf@calligramme.charmers>
References: <EFE3E62A-C489-45B7-A4B2-B0E53E953AB3@federated.com>
	<200906020052.23979.laurent.pinchart@skynet.be>
	<wftz2y7jhr.fsf@calligramme.charmers>
Message-ID: <200906021853.49870.laurent.pinchart@skynet.be>

Hi Jon,

On Tuesday 02 June 2009 17:17:36 Jon Fairbairn wrote:
> Hi Laurent,
>
> Laurent Pinchart <laurent.pinchart at skynet.be> writes:
> > Here's a patch that implements VIDIOC_[GS]_JPEGCOMP. It seems to work
> > with a Logitech QuickCam Pro for Notebooks. Could you please test it with
> > your camera(s) and report the results ?
>
> Thanks. I downloaded the source for the kernel I'm running,
> applied the patch (it applied cleanly), so I built it and
> insmodded it, and ran motion -- this message
>
>    motion: [1] VIDIOC_G_JPEGCOMP not supported but it should
>    be (does your webcam driver support this ioctl?)
>
> no longer appears,

Good.

> but I still get
>
>    motion: [1] Video device fatal error - Closing video
>    device
>
> That might be bug in motion, but I'm not sure what else to
> use to test it.

Does the driver print anything in the kernel log when the problem happens ?

> mplayer with -tv mjpeg says (inter alia)
>
> Selected driver: v4l2
>  name: Video 4 Linux 2 input
>  author: Martin Olschewski <olschewski at zpr.uni-koeln.de>
>  comment: first try, more to come ;-)
> v4l2: video fd: /dev/video0: 3
> v4l2: your device driver does not support VIDIOC_G_STD ioctl, VIDIOC_G_PARM
> was used instead. Selected device: Live! Cam Optia
>  Capabilites:  video capture  streaming
>  supported norms:
>  inputs: 0 = Camera 1;
>  Current input: 0
>  Format MJPEG  ( 0 bits, MJPEG): Unknown 0x47504a4d
>  Format YUYV   (16 bits, YUV 4:2:2 (YUYV)): Packed YUY2
>  Current format: YUYV
> v4l2: set format: YVU420
> v4l2: ioctl set format failed: Invalid argument
> v4l2: set format: YUV420
> v4l2: ioctl set format failed: Invalid argument
> v4l2: set format: UYVY
> v4l2: ioctl set format failed: Invalid argument
> v4l2: set format: YUYV
> v4l2: set input: 0
>
> which doesn't look right -- it doesn't say "set format:
> MJPEG".

It might still be using MJPEG, although this sounds a bit weird. If you load 
the uvcvideo driver with trace=15 the driver will print various debug messages 
to the kernel log. You will be able to trace all format get/set calls made by 
mplayer.

> xawtv just gives me a black window on my vncsession.

xawtv is known to have bugs, don't use it for testing.

> luvcview and mjpeg-streamer work in MJPEG mode, but they did
> before the patch, so that's no test either.
>
> What would be the right way to test this?

From your report it seems you mostly experience userspace application issues. 
I would still be interested in messages printed by the uvcvideo driver in the 
kernel log when running motion.

Best regards,

Laurent Pinchart



From jon.fairbairn at cl.cam.ac.uk  Tue Jun  2 19:34:55 2009
From: jon.fairbairn at cl.cam.ac.uk (Jon Fairbairn)
Date: Tue, 02 Jun 2009 18:34:55 +0100
Subject: [Linux-uvc-devel] [PATCH] VIDIOC_[GS]_JPEGCOMP support
References: <EFE3E62A-C489-45B7-A4B2-B0E53E953AB3@federated.com>
	<200906020052.23979.laurent.pinchart@skynet.be>
	<wftz2y7jhr.fsf@calligramme.charmers>
	<200906021853.49870.laurent.pinchart@skynet.be>
Message-ID: <wfprdm7d4w.fsf@calligramme.charmers>


Hi Laurent,

Laurent Pinchart <laurent.pinchart at skynet.be> writes:
> On Tuesday 02 June 2009 17:17:36 Jon Fairbairn wrote:
>> Thanks. I downloaded the source for the kernel I'm running,
>> applied the patch (it applied cleanly), so I built it and
>> insmodded it, and ran motion -- this message
>>
>>    motion: [1] VIDIOC_G_JPEGCOMP not supported but it should
>>    be (does your webcam driver support this ioctl?)
>>
>> no longer appears,
>
> Good.
>
>> but I still get
>>
>>    motion: [1] Video device fatal error - Closing video
>>    device
>>
>> That might be bug in motion, but I'm not sure what else to
>> use to test it.
>
> Does the driver print anything in the kernel log when the problem happens ?

Not normally; there's the ignorable
uvcvideo: device Live! Cam Optia requested null bandwidth, defaulting to lowest.
but nothing else unless I set the trace parameter.

>> luvcview and mjpeg-streamer work in MJPEG mode, but they did
>> before the patch, so that's no test either.
>>
>> What would be the right way to test this?
>
> From your report it seems you mostly experience userspace
> application issues.

maybe, but only because I was looking around for an app that
would send the right ioctls and count as a decent test...

> I would still be interested in messages printed by the
> uvcvideo driver in the kernel log when running motion.

With trace=15, there's quite a lot. I've removed what I think
is boring, but let me know if I've trimmed too much:

uvcvideo: Adding mapping Brightness [... and various other controls]
uvcvideo: Probing generic UVC device 4
uvcvideo: Found format MJPEG.
uvcvideo: - 640x480 (30.0 fps)
uvcvideo: - 320x240 (30.0 fps)
uvcvideo: - 160x120 (30.0 fps)
uvcvideo: - 352x288 (30.0 fps)
uvcvideo: - 176x144 (30.0 fps)
uvcvideo: Found format YUV 4:2:2 (YUYV). [... same resolutions as above]

uvcvideo: Found a Status endpoint (addr 82).
uvcvideo: Found UVC 1.00 device Live! Cam Optia (041e:4057)
uvcvideo: Added control 00000000-0000-0000-0000-000000000101/2 to device 4 entity 5
[... more similar "Added control..." lines]
uvcvideo: Scanning UVC chain: OT 3 <- XU 6 <- PU 5 <- SU 4 <- IT 1
uvcvideo: Found a valid video chain (1 -> 3).
uvcvideo: UVC non compliance - GET_DEF(PROBE) not supported. Enabling workaround.
input: Live! Cam Optia as /devices/pci0000:00/0000:00:02.1/usb1/1-4/1-4:1.0/input/input10
uvcvideo: UVC device initialized.
usbcore: registered new interface driver uvcvideo
USB Video Class driver (v0.1.0)
uvcvideo: Trying format 0x47504a4d (MJPG): 10000x10000.
uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
uvcvideo: UVC non compliance - GET_MIN/MAX(PROBE) incorrectly supported. Enabling workaround.
[ the next section repeats continually while motion is running ]
uvcvideo: Trying format 0x47504a4d (MJPG): 352x288.
uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
uvcvideo: Trying format 0x47504a4d (MJPG): 352x288.
uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
uvcvideo: Setting jpeg quality to 100.
uvcvideo: Control 0x0098090e not found.
uvcvideo: Control 0x0098090f not found.
uvcvideo: Control 0x00980911 not found.
uvcvideo: Control 0x00980912 not found.
uvcvideo: Control 0x00980913 not found.
uvcvideo: Control 0x08000000 not found.
uvcvideo: Control 0x08000001 not found.
uvcvideo: device Live! Cam Optia requested null bandwidth, defaulting to lowest.


>> mplayer with -tv mjpeg

> It might still be using MJPEG, although this sounds a bit
> weird.

It doesn't look like it...

> If you load the uvcvideo driver with trace=15 the
> driver will print various debug messages to the kernel
> log. You will be able to trace all format get/set calls
> made by mplayer.

uvcvideo: Trying format 0x56595559 (YUYV): 640x480.
uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
uvcvideo: Trying format 0x32315659 (YV12): 640x480.
uvcvideo: Unsupported format 0x32315659.
uvcvideo: Trying format 0x32315559 (YU12): 640x480.
uvcvideo: Unsupported format 0x32315559.
uvcvideo: Trying format 0x59565955 (UYVY): 640x480.
uvcvideo: Unsupported format 0x59565955.
uvcvideo: Trying format 0x56595559 (YUYV): 640x480.
uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
uvcvideo: Trying format 0x56595559 (YUYV): 352x480.
uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
uvcvideo: Trying format 0x56595559 (YUYV): 352x288.
uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
uvcvideo: Control 0x00980909 not found.
uvcvideo: device Live! Cam Optia requested null bandwidth, defaulting to lowest.
uvcvideo: Control 0x00980909 not found.

I hope that helps!

Thanks,
  J?n

-- 
J?n Fairbairn                                 Jon.Fairbairn at cl.cam.ac.uk




From laurent.pinchart at skynet.be  Tue Jun  2 20:08:44 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Tue, 2 Jun 2009 20:08:44 +0200
Subject: [Linux-uvc-devel] [PATCH] VIDIOC_[GS]_JPEGCOMP support
In-Reply-To: <wfprdm7d4w.fsf@calligramme.charmers>
References: <EFE3E62A-C489-45B7-A4B2-B0E53E953AB3@federated.com>
	<200906021853.49870.laurent.pinchart@skynet.be>
	<wfprdm7d4w.fsf@calligramme.charmers>
Message-ID: <200906022008.45012.laurent.pinchart@skynet.be>

Hi Jon,

On Tuesday 02 June 2009 19:34:55 Jon Fairbairn wrote:
> Laurent Pinchart <laurent.pinchart at skynet.be> writes:
> >
> > I would still be interested in messages printed by the
> > uvcvideo driver in the kernel log when running motion.
>
> With trace=15, there's quite a lot. I've removed what I think
> is boring, but let me know if I've trimmed too much:
>
> uvcvideo: Adding mapping Brightness [... and various other controls]
> uvcvideo: Probing generic UVC device 4
> uvcvideo: Found format MJPEG.
> uvcvideo: - 640x480 (30.0 fps)
> uvcvideo: - 320x240 (30.0 fps)
> uvcvideo: - 160x120 (30.0 fps)
> uvcvideo: - 352x288 (30.0 fps)
> uvcvideo: - 176x144 (30.0 fps)
> uvcvideo: Found format YUV 4:2:2 (YUYV). [... same resolutions as above]
>
> uvcvideo: Found a Status endpoint (addr 82).
> uvcvideo: Found UVC 1.00 device Live! Cam Optia (041e:4057)
> uvcvideo: Added control 00000000-0000-0000-0000-000000000101/2 to device 4
> entity 5 [... more similar "Added control..." lines]
> uvcvideo: Scanning UVC chain: OT 3 <- XU 6 <- PU 5 <- SU 4 <- IT 1
> uvcvideo: Found a valid video chain (1 -> 3).
> uvcvideo: UVC non compliance - GET_DEF(PROBE) not supported. Enabling
> workaround. input: Live! Cam Optia as
> /devices/pci0000:00/0000:00:02.1/usb1/1-4/1-4:1.0/input/input10 uvcvideo:
> UVC device initialized.
> usbcore: registered new interface driver uvcvideo
> USB Video Class driver (v0.1.0)
> uvcvideo: Trying format 0x47504a4d (MJPG): 10000x10000.
> uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
> uvcvideo: UVC non compliance - GET_MIN/MAX(PROBE) incorrectly supported.
> Enabling workaround. [ the next section repeats continually while motion is
> running ]
> uvcvideo: Trying format 0x47504a4d (MJPG): 352x288.
> uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
> uvcvideo: Trying format 0x47504a4d (MJPG): 352x288.
> uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
> uvcvideo: Setting jpeg quality to 100.
> uvcvideo: Control 0x0098090e not found.
> uvcvideo: Control 0x0098090f not found.
> uvcvideo: Control 0x00980911 not found.
> uvcvideo: Control 0x00980912 not found.
> uvcvideo: Control 0x00980913 not found.
> uvcvideo: Control 0x08000000 not found.
> uvcvideo: Control 0x08000001 not found.
> uvcvideo: device Live! Cam Optia requested null bandwidth, defaulting to
> lowest.

The problem might be in motion then.

> > > mplayer with -tv mjpeg
> >
> > It might still be using MJPEG, although this sounds a bit
> > weird.
>
> It doesn't look like it...
>
> > If you load the uvcvideo driver with trace=15 the
> > driver will print various debug messages to the kernel
> > log. You will be able to trace all format get/set calls
> > made by mplayer.
>
> uvcvideo: Trying format 0x56595559 (YUYV): 640x480.
> uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
> uvcvideo: Trying format 0x32315659 (YV12): 640x480.
> uvcvideo: Unsupported format 0x32315659.
> uvcvideo: Trying format 0x32315559 (YU12): 640x480.
> uvcvideo: Unsupported format 0x32315559.
> uvcvideo: Trying format 0x59565955 (UYVY): 640x480.
> uvcvideo: Unsupported format 0x59565955.
> uvcvideo: Trying format 0x56595559 (YUYV): 640x480.
> uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
> uvcvideo: Trying format 0x56595559 (YUYV): 352x480.
> uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
> uvcvideo: Trying format 0x56595559 (YUYV): 352x288.
> uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
> uvcvideo: Control 0x00980909 not found.
> uvcvideo: device Live! Cam Optia requested null bandwidth, defaulting to
> lowest. uvcvideo: Control 0x00980909 not found.

And there might be a problem in mplayer as well.

I'm afraid there's not much I can do, applications bugs need to be fixed in 
the application. You should contact the appropriate maintainers for help.

Best regards,

Laurent Pinchart



From pj.assis at gmail.com  Tue Jun  2 20:05:00 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Tue, 2 Jun 2009 19:05:00 +0100
Subject: [Linux-uvc-devel] [PATCH] VIDIOC_[GS]_JPEGCOMP support
In-Reply-To: <200906021857.22331.laurent.pinchart@skynet.be>
References: <EFE3E62A-C489-45B7-A4B2-B0E53E953AB3@federated.com>
	<wftz2y7jhr.fsf@calligramme.charmers>
	<59cf47a80906020835u5c1b8f04v9a35f8baff97408f@mail.gmail.com>
	<200906021857.22331.laurent.pinchart@skynet.be>
Message-ID: <59cf47a80906021105s7959ed34m123920b781bbf934@mail.gmail.com>

OK,
Here are my test results:

 VIDIOC_G_JPEGCOMP:

MJPEG compression:
    quality:  100
    APPn:     0
    APP_len:  0
    APP_data:
    COM_len:  0
    COM_data:
    markers:  0x10
vid:046d
pid:0808
driver:uvcvideo

  VIDIOC_S_JPEGCOMP: Device or Resource Busy

So I can't set the quality value, I'll try it later on other cameras, but I
don't expect this to change

Best regards,
Paulo


2009/6/2 Laurent Pinchart <laurent.pinchart at skynet.be>

> Hi Paulo,
>
> On Tuesday 02 June 2009 17:35:17 Paulo Assis wrote:
> > Hi,
> > I think I can add this to guvcview and run some tests, but I would like
> > some info on the v4l2_jpegcompression struct, especially on the
> > **jpeg_markers flag, I believe for mjpeg I should set all flags, except
> > V4l2_JPEG_MARKER_DHT, since huffman tables are not included in the video
> > stream, is this correct, or it just doesn't make any difference?
>
> It won't make any difference with the uvcvideo driver. The driver ignores
> the
> flags on VIDIOC_S_JPEGCOMP and returns V4L2_JPEG_MARKER_DQT only on
> VIDIOC_G_JPEGCOMP. The DHT, DRI and COM segments are not included in the
> MJPEG
> stream, and the APP0 segment is not user-configurable.
>
> > Also is the correct aproach a call to VIDIOC_G_JPEGCOMP for filling the
> > struct and then just change the quality entry and call VIDIOC_S_JPEGCOMP?
>
> This is still unclear in the specification. I would assume that drivers
> will
> fix the flags if the requested value is unsupported. If you want to make
> sure
> you don't modify them, calling G_JPEGCOMP prior to S_JPEGCOMP sounds good.
>
> Best regards,
>
> Laurent Pinchart
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090602/57664647/attachment.html>

From laurent.pinchart at skynet.be  Tue Jun  2 20:49:34 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Tue, 2 Jun 2009 20:49:34 +0200
Subject: [Linux-uvc-devel] [PATCH] VIDIOC_[GS]_JPEGCOMP support
In-Reply-To: <59cf47a80906021105s7959ed34m123920b781bbf934@mail.gmail.com>
References: <EFE3E62A-C489-45B7-A4B2-B0E53E953AB3@federated.com>
	<200906021857.22331.laurent.pinchart@skynet.be>
	<59cf47a80906021105s7959ed34m123920b781bbf934@mail.gmail.com>
Message-ID: <200906022049.35100.laurent.pinchart@skynet.be>

Hi Paulo,

On Tuesday 02 June 2009 20:05:00 Paulo Assis wrote:
> OK,
> Here are my test results:
>
>  VIDIOC_G_JPEGCOMP:
>
> MJPEG compression:
>     quality:  100
>     APPn:     0
>     APP_len:  0
>     APP_data:
>     COM_len:  0
>     COM_data:
>     markers:  0x10
> vid:046d
> pid:0808
> driver:uvcvideo
>
>   VIDIOC_S_JPEGCOMP: Device or Resource Busy
>
> So I can't set the quality value, I'll try it later on other cameras, but I
> don't expect this to change

You can't change the quality while the video stream is active.

Best regards,

Laurent Pinchart



From shaohuang at gmail.com  Tue Jun  2 21:01:16 2009
From: shaohuang at gmail.com (Brian Pin)
Date: Tue, 2 Jun 2009 12:01:16 -0700
Subject: [Linux-uvc-devel] Possible to use 2 streaming interface withUVC
	driver?
In-Reply-To: <20090602104253.HM.00000000000001v@why21c.wwl489.hanmail.net>
References: <20090602104253.HM.00000000000001v@why21c.wwl489.hanmail.net>
Message-ID: <a81f87bb0906021201y7b5e8dajc373cacc5661214e@mail.gmail.com>

Hi,
I have been using graphedit on Windows for testing some two streaming
interface device for a while.
Although I did not find any application that uses two UVC streams.
The graphedit will just provide any number of pins for the number of
streaming interface you have.
You can test each of the pin individually or test them altogether.
By the way for the UVC device developing side I found the Null renderer in
DirectShow filter is very helpful for verifying the device.
I am wondering if there is anything similar on Linux side?

Brian

2009/6/1 Chris <why21c at hanmail.net>

> On Tuesday 02 June 2009 Laurent Pinchart wrote:
> >On Monday 01 June 2009 07:01:27 fjklsd wrote:
> >> Hi.
> >> I'm developing a kind of webcam which transfer MJPEG and H.264
> >> simultaneously with UVC. I'm not sure that UVC driver supports 2
> streaming
> >> Inteface. Actually, UVC spec supports multiple streaming interface.
> >> However, I can't figure out how to use uvc driver for using 2 streaming
> >> interface.
> >> Is it possible to use 2 streaming interface with UVC driver? If
> possible,
> >> can anyone help me to use UVC driver about using 2 streaming interface
> >> simply?
> >
> >The UVC video driver currently doesn't support multiple streaming
> interfaces.
> >The main reason was that I lacked hardware with multiple streaming
> interfaces
> >to test that feature. By the way, does the Windows UVC driver support
> multiple
> >streaming interfaces ?
> >
> >If you send me the USB descriptors of your devices I could have a look at
> the
> >driver to see how I could add multiple streaming interfaces support.
>
> Hi,
> Thank you for replying.
> I'm not sure that windows UVC driver supports multiple streaming
> interfaces.
> Anyway, I attached my device's descriptor file.
> This descriptor's streaming interfaces are MJPEG and YUV.
>
> best regards,
>
> <why21c at hanmail.net>
> [??? Express]????? ????? ???!
> <http://allim.daum.net/servlet/Redirect?sid=footer_090223_ex>
>
> <http://daumdirect.daum.net/websales/main/event/20080516_woori_event.jsp?_partner_code.key=9100009>
>
> _______________________________________________
> Linux-uvc-devel mailing list
> Linux-uvc-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
>
>


-- 
Best Regards
Brian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090602/71ad308f/attachment.html>

From pj.assis at gmail.com  Wed Jun  3 00:04:23 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Tue, 2 Jun 2009 23:04:23 +0100
Subject: [Linux-uvc-devel] [PATCH] VIDIOC_[GS]_JPEGCOMP support
In-Reply-To: <200906022049.35100.laurent.pinchart@skynet.be>
References: <EFE3E62A-C489-45B7-A4B2-B0E53E953AB3@federated.com>
	<200906021857.22331.laurent.pinchart@skynet.be>
	<59cf47a80906021105s7959ed34m123920b781bbf934@mail.gmail.com>
	<200906022049.35100.laurent.pinchart@skynet.be>
Message-ID: <59cf47a80906021504o6ccceb16xa43d7c800fa36c60@mail.gmail.com>

Hi,
so here are my findings (using a sphere AF):

I'm now disabling the video stream and re-queueing the buffers, this enables
VIDIOC_S_JPEGCOMP

below is what I'm getting from the driver and the corresponding log entry
from dmesg:

setting quality to 60 =>

VIDIOC_G_COMP:
    quality:      60
    APPn:         0
    APP_len:      0
    APP_data:
    COM_len:      0
    COM_data:
    jpeg_markers: 0x10

"dmesg (with trace=15)"
[ 9993.399812] uvcvideo: Setting jpeg quality to 6000.

setting quality to 80 =>

VIDIOC_G_COMP:
    quality:      80
    APPn:         0
    APP_len:      0
    APP_data:
    COM_len:      0
    COM_data:
    jpeg_markers: 0x10

"dmesg (with trace=15)"
[10001.869273] uvcvideo: Setting jpeg quality to 8200.

In any case the video frames don't change their quality, so I guess the
camera is not handling this the correct way, I can't also understand the
values seen in dmesg, is there any reason special reason for this ?

Best regards,
Paulo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090602/65423cfa/attachment.html>

From laurent.pinchart at skynet.be  Wed Jun  3 00:19:00 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Wed, 3 Jun 2009 00:19:00 +0200
Subject: [Linux-uvc-devel] [PATCH] VIDIOC_[GS]_JPEGCOMP support
In-Reply-To: <59cf47a80906021504o6ccceb16xa43d7c800fa36c60@mail.gmail.com>
References: <EFE3E62A-C489-45B7-A4B2-B0E53E953AB3@federated.com>
	<200906022049.35100.laurent.pinchart@skynet.be>
	<59cf47a80906021504o6ccceb16xa43d7c800fa36c60@mail.gmail.com>
Message-ID: <200906030019.00888.laurent.pinchart@skynet.be>

Hi Paulo,

On Wednesday 03 June 2009 00:04:23 Paulo Assis wrote:
> Hi,
> so here are my findings (using a sphere AF):
>
> I'm now disabling the video stream and re-queueing the buffers, this
> enables VIDIOC_S_JPEGCOMP
>
> below is what I'm getting from the driver and the corresponding log entry
> from dmesg:
>
> setting quality to 60 =>
>
> VIDIOC_G_COMP:
>     quality:      60
>     APPn:         0
>     APP_len:      0
>     APP_data:
>     COM_len:      0
>     COM_data:
>     jpeg_markers: 0x10
>
> "dmesg (with trace=15)"
> [ 9993.399812] uvcvideo: Setting jpeg quality to 6000.
>
> setting quality to 80 =>
>
> VIDIOC_G_COMP:
>     quality:      80
>     APPn:         0
>     APP_len:      0
>     APP_data:
>     COM_len:      0
>     COM_data:
>     jpeg_markers: 0x10
>
> "dmesg (with trace=15)"
> [10001.869273] uvcvideo: Setting jpeg quality to 8200.
>
> In any case the video frames don't change their quality, so I guess the
> camera is not handling this the correct way,

I haven't seen any visual difference either between Q=20 and Q=100 on my 
Logitech Quickcam Pro for Notebooks. However, the average frame size was ~24k 
for Q=20 and ~28k for Q=100, so I guess there's still a difference.

> I can't also understand the values seen in dmesg, is there any reason
> special reason for this ?

The quality range in the UVC specification is [0, 10000]. While the V4L2 
specification doesn't mention any specific range, most users are familiar with 
the [0, 100] range. I thus convert between the two ranges in the driver.

Moreover, the requested quality value is passed to the hardware which is free 
to modify it. This is probably why you get 8200 when you ask for 8000.

Best regards,

Laurent Pinchart



From phil.lemelin at gmail.com  Wed Jun  3 15:38:36 2009
From: phil.lemelin at gmail.com (phil lemelin)
Date: Wed, 3 Jun 2009 09:38:36 -0400
Subject: [Linux-uvc-devel] Fwd: Fwd:  Compilation error
In-Reply-To: <20090527153848.1dfb85e7@pedra.chehab.org>
References: <200905270157.55653.laurent.pinchart@skynet.be>
	<20090527153848.1dfb85e7@pedra.chehab.org>
Message-ID: <efe037fe0906030638s32305049y26f44c05147b79@mail.gmail.com>

Sorry for the late replay.

Tested it here with now with a 2.6.22.19 kernel and still the same thing.

I tried with the tip.tar.gz and also cloned the hg repository ( hg clone
http://linuxtv.org/hg/~pinchartl/uvcvideo/ ).
I cant see any mention of your commit in the change log  either.

Any help ?

---------- Forwarded message ----------
From: Mauro Carvalho Chehab <---------->
Date: Wed, May 27, 2009 at 2:38 PM
Subject: Re: Fwd: [Linux-uvc-devel] Compilation error



Em Wed, 27 May 2009 01:57:55 +0200

> Hi everybody,
>
> ----------  Forwarded Message  ----------
>
> Subject: [Linux-uvc-devel] Compilation error
> Date: Tuesday 26 May 2009
> From: Phil Lemelin <linux-uvc-devel at lists.berlios.de>
>
> Hi uvc-devel list,
>
> I'm trying to get my usb camera to work ( 174f:8a34 Syntek ) on a older
> system ( 2.6.18-6, debian etch ) and I am not able to compile the source
> code found on the HG repository. The error I get is the following :
>
> >
> > *snip*
>
> Is an update to v4l/versions.txt needed ?

I just applied a patch at tip that restores compilation with legacy kernels,
tested here with a RHEL5 kernel (a patched version of 2.6.16)



Cheers,
Mauro



-- 
Philippe-Alexandre Lemelin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090603/0fc11db0/attachment.html>

From pj.assis at gmail.com  Wed Jun  3 15:59:50 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Wed, 3 Jun 2009 14:59:50 +0100
Subject: [Linux-uvc-devel] guvcview configuration file
In-Reply-To: <20007.1244034572@calligramme.charmers>
References: <20007.1244034572@calligramme.charmers>
Message-ID: <59cf47a80906030659r733d7b58p59213a0ea8934e1b@mail.gmail.com>

Hi,
Earlier versions of guvcview where compatible with gtk+ 2.8, but since 2.10
was already around I set that for  configurion, but a lot has changed since
:-)
Most distributions keep the gtk+ library up to date, so this was never a
problem before.
Anyway, I will fix it ASAP.

PS: mjpeg compression code is available in svn if you want to test it.
When streaming in MJPEG (or JPEG as is the case of some gspca cameras) there
will be a spin box with the quality factor in the video controls and a Apply
button.
In my case there was absolutly no difference in frame sizes in any of the
tested values, I still need to verify the quantization tables for all of the
cases, if they are the same then compression is unchanged.
The quality factor seems to change only to a couple of values: Q=20, 40, 60,
80 and 100

Best regards,
Paulo

2009/6/3 Jon Fairbairn <jon.fairbairn at cl.cam.ac.uk>

> Further to your test of mjpeg compression, (on the uvc.devel
> mailing list) I thought I'd try guvcview with my camera.
> Unfortunately it doesn't build on Fedora 9
>
> .../src/video_tab.c:366: undefined reference to
> `gtk_dialog_get_content_area'
>
> Apparently gtk_dialog_get_content_area only appeared in gtk+ in
> version 2.14, but the Fedora 9 gtk+ is 2.12, so I'll either have
> to wait until I upgrade the OS or install a newer version of
> gtk2 somewhere out of the way.
>
> However, your configure.in says "gtk+-2.0 >= 2.10.0" but I
> reckon it should say 2.14.0.
>
> Cheers,
>
>  J?n
>
> --
> J?n Fairbairn                                 Jon.Fairbairn at cl.cam.ac.uk
> 31 Chalmers Road                                         jf at cl.cam.ac.uk
> Cambridge CB1 3SZ            +44 1223 570179 (after 14:00 only, please!)
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090603/d22975c7/attachment.html>

From shaohuang at gmail.com  Wed Jun  3 18:03:18 2009
From: shaohuang at gmail.com (Brian Pin)
Date: Wed, 3 Jun 2009 09:03:18 -0700
Subject: [Linux-uvc-devel] Dual stream UVC device testing
In-Reply-To: <bcb3955c0906030756r321bed41r90df29d0df72cd0a@mail.gmail.com>
References: <bcb3955c0906030756r321bed41r90df29d0df72cd0a@mail.gmail.com>
Message-ID: <a81f87bb0906030903ta9ca8c8l86330ade206d5a03@mail.gmail.com>

You can use graphedit, using it to test is simple.First make your device
instance from USB Video capture device
then
make something simple like "Dump filter" or "Null Renderer"
Then you can start stop test your device, of you have analyzer, it will be
even better.


On Wed, Jun 3, 2009 at 7:56 AM, Ajay <ajaykuee at gmail.com> wrote:

> Hi,
>
> This is regarding Dual stream UVC device related post from you at,
>
> http://lists.berlios.de/pipermail/linux-uvc-devel/2009-January/004497.html
>
> I am also developing one such UVC device but unable to test the same on any
> host machine.
>
> I have added two streaming interface with two different ISOC IN endpoints.
> XP PC recognizes the UVC device and both streaming interfaces but I
> didn't find any
> host application which can be used to test the simultaneous streaming on
> both
> the endpoints. Are you aware of any such tool ?
>
> I would appreciate any suggestion/input from you.
>
> Thanks a lot.
>
> Regards,
> Ajay
>



-- 
Best Regards
Brian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090603/f6b9d606/attachment.html>

From pj.assis at gmail.com  Wed Jun  3 19:46:08 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Wed, 3 Jun 2009 18:46:08 +0100
Subject: [Linux-uvc-devel] [PATCH] VIDIOC_[GS]_JPEGCOMP support
In-Reply-To: <200906030019.00888.laurent.pinchart@skynet.be>
References: <EFE3E62A-C489-45B7-A4B2-B0E53E953AB3@federated.com>
	<200906022049.35100.laurent.pinchart@skynet.be>
	<59cf47a80906021504o6ccceb16xa43d7c800fa36c60@mail.gmail.com>
	<200906030019.00888.laurent.pinchart@skynet.be>
Message-ID: <59cf47a80906031046t79e67652s2de603b12996672@mail.gmail.com>

Ok, so I checked the quantization tables for each of the supported quality
factors(Q=20,40,60,80 and 100) and at least for the logitech cameras they
are exactly the same, so no compression change.
Could the quality factor be relevant only for  still image frames ?

Best regards,
Paulo

2009/6/2 Laurent Pinchart <laurent.pinchart at skynet.be>

> Hi Paulo,
>
> On Wednesday 03 June 2009 00:04:23 Paulo Assis wrote:
> > Hi,
> > so here are my findings (using a sphere AF):
> >
> > I'm now disabling the video stream and re-queueing the buffers, this
> > enables VIDIOC_S_JPEGCOMP
> >
> > below is what I'm getting from the driver and the corresponding log entry
> > from dmesg:
> >
> > setting quality to 60 =>
> >
> > VIDIOC_G_COMP:
> >     quality:      60
> >     APPn:         0
> >     APP_len:      0
> >     APP_data:
> >     COM_len:      0
> >     COM_data:
> >     jpeg_markers: 0x10
> >
> > "dmesg (with trace=15)"
> > [ 9993.399812] uvcvideo: Setting jpeg quality to 6000.
> >
> > setting quality to 80 =>
> >
> > VIDIOC_G_COMP:
> >     quality:      80
> >     APPn:         0
> >     APP_len:      0
> >     APP_data:
> >     COM_len:      0
> >     COM_data:
> >     jpeg_markers: 0x10
> >
> > "dmesg (with trace=15)"
> > [10001.869273] uvcvideo: Setting jpeg quality to 8200.
> >
> > In any case the video frames don't change their quality, so I guess the
> > camera is not handling this the correct way,
>
> I haven't seen any visual difference either between Q=20 and Q=100 on my
> Logitech Quickcam Pro for Notebooks. However, the average frame size was
> ~24k
> for Q=20 and ~28k for Q=100, so I guess there's still a difference.
>
> > I can't also understand the values seen in dmesg, is there any reason
> > special reason for this ?
>
> The quality range in the UVC specification is [0, 10000]. While the V4L2
> specification doesn't mention any specific range, most users are familiar
> with
> the [0, 100] range. I thus convert between the two ranges in the driver.
>
> Moreover, the requested quality value is passed to the hardware which is
> free
> to modify it. This is probably why you get 8200 when you ask for 8000.
>
> Best regards,
>
> Laurent Pinchart
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090603/20a15ba8/attachment.html>

From herton at mandriva.com.br  Wed Jun  3 23:13:08 2009
From: herton at mandriva.com.br (Herton Ronaldo Krzesinski)
Date: Wed, 3 Jun 2009 18:13:08 -0300
Subject: [Linux-uvc-devel] [PATCH] uvcvideo: workaround invalid formats
	exposed by buggy webcam
In-Reply-To: <200906031802.34532.herton@mandriva.com.br>
References: <200906031802.34532.herton@mandriva.com.br>
Message-ID: <200906031813.09555.herton@mandriva.com.br>

Em Quarta-feira 03 Junho 2009, ?s 18:02:33, Herton Ronaldo Krzesinski escreveu:
> One webcam I have here exposes an invalid videostreaming interface
> format, with trace=0x2 this output is shown on kernel log:
>(...) 

The lsusb output of the affected webcam:

Bus 001 Device 002: ID 5986:0241 Acer, Inc 
Device Descriptor:
  bLength                18
  bDescriptorType         1
  bcdUSB               2.00
  bDeviceClass          239 Miscellaneous Device
  bDeviceSubClass         2 ?
  bDeviceProtocol         1 Interface Association
  bMaxPacketSize0        64
  idVendor           0x5986 Acer, Inc
  idProduct          0x0241 
  bcdDevice            6.05
  iManufacturer           3 BISON Corporation
  iProduct                1 BisonCam, NB Pro
  iSerial                 0 
  bNumConfigurations      1
  Configuration Descriptor:
    bLength                 9
    bDescriptorType         2
    wTotalLength          459
    bNumInterfaces          2
    bConfigurationValue     1
    iConfiguration          0 
    bmAttributes         0x80
      (Bus Powered)
    MaxPower              500mA
    Interface Association:
      bLength                 8
      bDescriptorType        11
      bFirstInterface         0
      bInterfaceCount         2
      bFunctionClass         14 Video
      bFunctionSubClass       3 Video Interface Collection
      bFunctionProtocol       0 
      iFunction               1 BisonCam, NB Pro
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        0
      bAlternateSetting       0
      bNumEndpoints           1
      bInterfaceClass        14 Video
      bInterfaceSubClass      1 Video Control
      bInterfaceProtocol      0 
      iInterface              1 BisonCam, NB Pro
      VideoControl Interface Descriptor:
        bLength                13
        bDescriptorType        36
        bDescriptorSubtype      1 (HEADER)
        bcdUVC               1.00
        wTotalLength           85
        dwClockFrequency       30.000000MHz
        bInCollection           1
        baInterfaceNr( 0)       1
      VideoControl Interface Descriptor:
        bLength                18
        bDescriptorType        36
        bDescriptorSubtype      2 (INPUT_TERMINAL)
        bTerminalID             1
        wTerminalType      0x0201 Camera Sensor
        bAssocTerminal          0
        iTerminal               0 
        wObjectiveFocalLengthMin      0
        wObjectiveFocalLengthMax      0
        wOcularFocalLength            0
        bControlSize                  3
        bmControls           0x00000000
      VideoControl Interface Descriptor:
        bLength                 9
        bDescriptorType        36
        bDescriptorSubtype      3 (OUTPUT_TERMINAL)
        bTerminalID             3
        wTerminalType      0x0101 USB Streaming
        bAssocTerminal          0
        bSourceID               6
        iTerminal               0 
      VideoControl Interface Descriptor:
        bLength                 7
        bDescriptorType        36
        bDescriptorSubtype      4 (SELECTOR_UNIT)
        bUnitID                 4
        bNrInPins               1
        baSource( 0)            1
        iSelector               0 
      VideoControl Interface Descriptor:
        bLength                11
        bDescriptorType        36
        bDescriptorSubtype      5 (PROCESSING_UNIT)
      Warning: Descriptor too short
        bUnitID                 5
        bSourceID               4
        wMaxMultiplier          0
        bControlSize            2
        bmControls     0x0000043f
          Brightness
          Contrast
          Hue
          Saturation
          Sharpness
          Gamma
          Power Line Frequency
        iProcessing             0 
        bmVideoStandards     0x1b
          None
          NTSC - 525/60
          SECAM - 625/50
          NTSC - 625/50
      VideoControl Interface Descriptor:
        bLength                27
        bDescriptorType        36
        bDescriptorSubtype      6 (EXTENSION_UNIT)
        bUnitID                 6
        guidExtensionCode         {564c97a7-7ea7-904b-8cbf-1c71ec303000}
        bNumControl            16
        bNrPins                 1
        baSourceID( 0)          5
        bControlSize            2
        bmControls( 0)       0xff
        bmControls( 1)       0xff
        iExtension              0 
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x82  EP 2 IN
        bmAttributes            3
          Transfer Type            Interrupt
          Synch Type               None
          Usage Type               Data
        wMaxPacketSize     0x0008  1x 8 bytes
        bInterval              15
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        1
      bAlternateSetting       0
      bNumEndpoints           0
      bInterfaceClass        14 Video
      bInterfaceSubClass      2 Video Streaming
      bInterfaceProtocol      0 
      iInterface              0 
      VideoStreaming Interface Descriptor:
        bLength                            14
        bDescriptorType                    36
        bDescriptorSubtype                  1 (INPUT_HEADER)
        bNumFormats                         1
        wTotalLength                      291
        bEndPointAddress                  129
        bmInfo                              0
        bTerminalLink                       3
        bStillCaptureMethod                 0
        bTriggerSupport                     0
        bTriggerUsage                       0
        bControlSize                        1
        bmaControls( 0)                    27
      VideoStreaming Interface Descriptor:
        bLength                            27
        bDescriptorType                    36
        bDescriptorSubtype                  4 (FORMAT_UNCOMPRESSED)
        bFormatIndex                        1
        bNumFrameDescriptors                6
        guidFormat                            {59555932-0000-1000-8000-00aa00389b71}
        bBitsPerPixel                      16
        bDefaultFrameIndex                  1
        bAspectRatioX                       0
        bAspectRatioY                       0
        bmInterlaceFlags                 0x00
          Interlaced stream or variable: No
          Fields per frame: 1 fields
          Field 1 first: No
          Field pattern: Field 1 only
          bCopyProtect                      0
      VideoStreaming Interface Descriptor:
        bLength                            38
        bDescriptorType                    36
        bDescriptorSubtype                  5 (FRAME_UNCOMPRESSED)
        bFrameIndex                         1
        bmCapabilities                   0x01
          Still image supported
        wWidth                            640
        wHeight                           480
        dwMinBitRate                 12288000
        dwMaxBitRate                 12288000
        dwMaxVideoFrameBufferSize      614400
        dwDefaultFrameInterval         555555
        bFrameIntervalType                  3
        dwFrameInterval( 0)            555555
        dwFrameInterval( 1)            666666
        dwFrameInterval( 2)           1000000
      VideoStreaming Interface Descriptor:
        bLength                            38
        bDescriptorType                    36
        bDescriptorSubtype                  5 (FRAME_UNCOMPRESSED)
        bFrameIndex                         2
        bmCapabilities                   0x01
          Still image supported
        wWidth                            320
        wHeight                           240
        dwMinBitRate                  3072000
        dwMaxBitRate                  3072000
        dwMaxVideoFrameBufferSize      153600
        dwDefaultFrameInterval         333333
        bFrameIntervalType                  3
        dwFrameInterval( 0)            333333
        dwFrameInterval( 1)            666666
        dwFrameInterval( 2)           1000000
      VideoStreaming Interface Descriptor:
        bLength                            38
        bDescriptorType                    36
        bDescriptorSubtype                  5 (FRAME_UNCOMPRESSED)
        bFrameIndex                         3
        bmCapabilities                   0x01
          Still image supported
        wWidth                            160
        wHeight                           120
        dwMinBitRate                   768000
        dwMaxBitRate                   768000
        dwMaxVideoFrameBufferSize       38400
        dwDefaultFrameInterval         333333
        bFrameIntervalType                  3
        dwFrameInterval( 0)            333333
        dwFrameInterval( 1)            666666
        dwFrameInterval( 2)           1000000
      VideoStreaming Interface Descriptor:
        bLength                            38
        bDescriptorType                    36
        bDescriptorSubtype                  5 (FRAME_UNCOMPRESSED)
        bFrameIndex                         4
        bmCapabilities                   0x01
          Still image supported
        wWidth                            352
        wHeight                           288
        dwMinBitRate                  4055040
        dwMaxBitRate                  4055040
        dwMaxVideoFrameBufferSize      202752
        dwDefaultFrameInterval         333333
        bFrameIntervalType                  3
        dwFrameInterval( 0)            333333
        dwFrameInterval( 1)            666666
        dwFrameInterval( 2)           1000000
      VideoStreaming Interface Descriptor:
        bLength                            38
        bDescriptorType                    36
        bDescriptorSubtype                  5 (FRAME_UNCOMPRESSED)
        bFrameIndex                         5
        bmCapabilities                   0x01
          Still image supported
        wWidth                            176
        wHeight                           144
        dwMinBitRate                  1013760
        dwMaxBitRate                  1013760
        dwMaxVideoFrameBufferSize       50688
        dwDefaultFrameInterval         333333
        bFrameIntervalType                  3
        dwFrameInterval( 0)            333333
        dwFrameInterval( 1)            666666
        dwFrameInterval( 2)           1000000
      VideoStreaming Interface Descriptor:
        bLength                            30
        bDescriptorType                    36
        bDescriptorSubtype                  5 (FRAME_UNCOMPRESSED)
        bFrameIndex                         6
        bmCapabilities                   0x01
          Still image supported
        wWidth                           1280
        wHeight                          1024
        dwMinBitRate                 26214400
        dwMaxBitRate                 26214400
        dwMaxVideoFrameBufferSize     2621440
        dwDefaultFrameInterval        1250000
        bFrameIntervalType                  1
        dwFrameInterval( 0)           1250000
      ** UNRECOGNIZED:  12 98 04 02 76 2f 12 98 04 02 76 2f 90 91 97 e0 b4 05
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        1
      bAlternateSetting       1
      bNumEndpoints           1
      bInterfaceClass        14 Video
      bInterfaceSubClass      2 Video Streaming
      bInterfaceProtocol      0 
      iInterface              0 
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            5
          Transfer Type            Isochronous
          Synch Type               Asynchronous
          Usage Type               Data
        wMaxPacketSize     0x1400  3x 1024 bytes
        bInterval               1
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        1
      bAlternateSetting       2
      bNumEndpoints           1
      bInterfaceClass        14 Video
      bInterfaceSubClass      2 Video Streaming
      bInterfaceProtocol      0 
      iInterface              0 
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            5
          Transfer Type            Isochronous
          Synch Type               Asynchronous
          Usage Type               Data
        wMaxPacketSize     0x1400  3x 1024 bytes
        bInterval               1
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        1
      bAlternateSetting       3
      bNumEndpoints           1
      bInterfaceClass        14 Video
      bInterfaceSubClass      2 Video Streaming
      bInterfaceProtocol      0 
      iInterface              0 
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            5
          Transfer Type            Isochronous
          Synch Type               Asynchronous
          Usage Type               Data
        wMaxPacketSize     0x1400  3x 1024 bytes
        bInterval               1
Device Qualifier (for other device speed):
  bLength                10
  bDescriptorType         6
  bcdUSB               2.00
  bDeviceClass          239 Miscellaneous Device
  bDeviceSubClass         2 ?
  bDeviceProtocol         1 Interface Association
  bMaxPacketSize0        64
  bNumConfigurations      1
Device Status:     0x0000
  (Bus Powered)


--
[]'s
Herton


From herton at mandriva.com.br  Wed Jun  3 23:02:33 2009
From: herton at mandriva.com.br (Herton Ronaldo Krzesinski)
Date: Wed, 3 Jun 2009 18:02:33 -0300
Subject: [Linux-uvc-devel] [PATCH] uvcvideo: workaround invalid formats
	exposed by buggy webcam
Message-ID: <200906031802.34532.herton@mandriva.com.br>

One webcam I have here exposes an invalid videostreaming interface
format, with trace=0x2 this output is shown on kernel log:

USB Video Class driver (v0.1.0)
usb 3-7: new high speed USB device using ehci_hcd and address 5
usb 3-7: configuration #1 chosen from 1 choice
uvcvideo: Found format YUV 4:2:2 (YUYV).
uvcvideo: - 640x480 (18.0 fps)
uvcvideo: - 320x240 (30.0 fps)
uvcvideo: - 160x120 (30.0 fps)
uvcvideo: - 352x288 (30.0 fps)
uvcvideo: - 176x144 (30.0 fps)
uvcvideo: - 1280x1024 (8.0 fps)
uvcvideo: device 5 videostreaminginterface 1 FORMAT error
uvcvideo: Found a Status endpoint (addr 82).
uvcvideo: Found UVC 1.00 device BisonCam, NB Pro (5986:0241)
uvcvideo: No valid video chain found.

There is an invalid videostreaming interface format exposed, which makes
the webcam to fail to work as the error is treated as fatal, even if we
have already found a valid format.

Fix this by not failing entirely if we have found an invalid format, as
we can still have a valid format. The initial problem and solution
(patch) was debugged and done by Clevo (probably by Michael Wang),
which uses the affected webcam in one of their laptops. I'm forwarding
their fix plus additional code that I noticed to be needed for generic
cases that decrements properly streaming->nformats and checks later if
we really found at least one valid format, and if there were really no
valid formats we make sure then to return with error.

Signed-off-by: Herton Ronaldo Krzesinski <herton at mandriva.com.br>
---
 3rdparty/uvc/uvc_driver.c |   21 +++++++++++++++++++--
 1 file changed, 19 insertions(+), 2 deletions(-)

diff -p -up linux/drivers/media/video/uvc/uvc_driver.c.orig linux/drivers/media/video/uvc/uvc_driver.c
--- linux/drivers/media/video/uvc/uvc_driver.c.orig	2009-06-03 12:49:50.000000000 -0300
+++ linux/drivers/media/video/uvc/uvc_driver.c	2009-06-03 13:04:44.000000000 -0300
@@ -718,8 +718,17 @@ static int uvc_parse_streaming(struct uv
 			format->frame = frame;
 			ret = uvc_parse_format(dev, streaming, format,
 				&interval, buffer, buflen);
-			if (ret < 0)
-				goto error;
+			/*
+			 * Some webcams can expose videostreaming interface
+			 * with formats that contains errors (firmware bug).
+			 * Ignore the error, as we may have already got some
+			 * valid format or still can find one which is valid
+			 * and can be used
+			 */
+			if (ret < 0) {
+				streaming->nformats--;
+				break;
+			}
 
 			frame += format->nframes;
 			format++;
@@ -736,6 +745,14 @@ static int uvc_parse_streaming(struct uv
 		buffer += buffer[0];
 	}
 
+	/* Check if we got at least one valid format in loop above */
+	if (streaming->nformats == 0) {
+		uvc_trace(UVC_TRACE_DESCR, "device %d videostreaming interface "
+			"%d has no valid formats defined.\n",
+			dev->udev->devnum, alts->desc.bInterfaceNumber);
+		goto error;
+	}
+
 	/* Parse the alternate settings to find the maximum bandwidth. */
 	for (i = 0; i < intf->num_altsetting; ++i) {
 		struct usb_host_endpoint *ep;


From brucembeach at gmail.com  Thu Jun  4 00:25:22 2009
From: brucembeach at gmail.com (bruce m beach)
Date: Wed, 3 Jun 2009 15:25:22 -0700
Subject: [Linux-uvc-devel] suyin crystal eye webcam 064e:a103 not working
Message-ID: <ebff8ece0906031525x653addb5k79c7bb32abbe04ed@mail.gmail.com>

Hello Laurent

>> May 28 10:53:26 lapsystemx kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_STREAMON)
>> May 28 10:53:26 lapsystemx kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_DQBUF)
>> May 28 10:53:28 lapsystemx kernel: uvcvideo: Frame complete (overflow).
>> May 28 10:53:28 lapsystemx kernel: uvcvideo: Dropping payload (out of sync).
>> May 28 10:53:28 lapsystemx last message repeated 18 times
>> May 28 10:53:28 lapsystemx kernel: uvcvideo: Dequeuing buffer 0 (3, 307789 bytes).
>> May 28 10:53:28 lapsystemx kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_QBUF)
>> May 28 10:53:28 lapsystemx kernel: uvcvideo: Queuing buffer 0.
>> May 28 10:53:28 lapsystemx kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_DQBUF)
>> May 28 10:53:28 lapsystemx kernel: uvcvideo: Dropping payload (out of sync).
>> May 28 10:53:59 lapsystemx last message repeated 30784 times
>> May 28 10:55:00 lapsystemx last message repeated 60992 times
>> MESSAGE cntrl backslash
>> May 28 10:55:24 lapsystemx last message repeated 24351 times
>> May 28 10:55:24 lapsystemx kernel: uvcvideo: uvc_v4l2_release
>> MESSAGE done
>
> It seems the device doesn't toggle the FID bit in the UVC
> packet header. Could you try loading the driver with
> quirks=16 ?


First of all it sure looks light the camera
is indeed streaming since I get the line

         uvcvideo: Dequeuing buffer 0 (3, 307789 bytes)

which is very close to the format

         640x480=307200 + 589 control bytes (whatever they are)

Okay I tried the following command (and a million other variations)

         modprobe -v uvcvideo trace=255 quirks=16

and got the line from the kernel log

         kernel: uvcvideo: Forcing device quirks 0x10
                            by module parameter for testing purpose.


This has no effect at all, same output as the trace above,
so I thought it might be a good idea to see what was
happening in the header.  Now if I went to the wrong place
then all my data is wrong.


I went to the call

    "static int uvc_video_decode_start"

in the file "uvc_video.c"

I added the lines

    __u8 packet_header;
    packet_header=data[1] & 255;

    uvc_trace(UVC_TRACE_FRAME, "packet header=%d\n",
                                   packet_header);

After compiling, installing and reloading
I immediately got many pages of

   packet header=141

so I tried the following, see if the header ever changes.

    if (packet_header != 141)
    uvc_trace(UVC_TRACE_FRAME, "packet header=%d\n",
                                   packet_header);

which never got printed. In other words the packet header is
always 141 and we have the information below

            UVC_STREAM_EOH  (1 << 7)  1 (set)
            UVC_STREAM_ERR  (1 << 6)  0 (reset)
            UVC_STREAM_STI  (1 << 5)  0 (reset)
            UVC_STREAM_RES  (1 << 4)  0 (reset)
            UVC_STREAM_SCR  (1 << 3)  1 (set)
            UVC_STREAM_PTS  (1 << 2)  1 (set)
            UVC_STREAM_EOF  (1 << 1)  0 (reset)
            UVC_STREAM_FID  (1 << 0)  1 (set)


Looking forward to your comments
regards bruce


From laurent.pinchart at skynet.be  Thu Jun  4 11:58:34 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Thu, 4 Jun 2009 11:58:34 +0200
Subject: [Linux-uvc-devel] [PATCH] VIDIOC_[GS]_JPEGCOMP support
In-Reply-To: <59cf47a80906031046t79e67652s2de603b12996672@mail.gmail.com>
References: <EFE3E62A-C489-45B7-A4B2-B0E53E953AB3@federated.com>
	<200906030019.00888.laurent.pinchart@skynet.be>
	<59cf47a80906031046t79e67652s2de603b12996672@mail.gmail.com>
Message-ID: <200906041158.34620.laurent.pinchart@skynet.be>

Hi Paulo,

On Wednesday 03 June 2009 19:46:08 Paulo Assis wrote:
> Ok, so I checked the quantization tables for each of the supported quality
> factors(Q=20,40,60,80 and 100) and at least for the logitech cameras they
> are exactly the same, so no compression change.
> Could the quality factor be relevant only for  still image frames ?

I don't think so. The camera might just ignore the quality value completely.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Thu Jun  4 12:41:03 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Thu, 4 Jun 2009 12:41:03 +0200
Subject: [Linux-uvc-devel] [PATCH] uvcvideo: workaround invalid formats
	exposed by buggy webcam
In-Reply-To: <200906031802.34532.herton@mandriva.com.br>
References: <200906031802.34532.herton@mandriva.com.br>
Message-ID: <200906041241.03791.laurent.pinchart@skynet.be>

Hi Herton,

On Wednesday 03 June 2009 23:02:33 Herton Ronaldo Krzesinski wrote:
> One webcam I have here exposes an invalid videostreaming interface
> format, with trace=0x2 this output is shown on kernel log:
>
> USB Video Class driver (v0.1.0)
> usb 3-7: new high speed USB device using ehci_hcd and address 5
> usb 3-7: configuration #1 chosen from 1 choice
> uvcvideo: Found format YUV 4:2:2 (YUYV).
> uvcvideo: - 640x480 (18.0 fps)
> uvcvideo: - 320x240 (30.0 fps)
> uvcvideo: - 160x120 (30.0 fps)
> uvcvideo: - 352x288 (30.0 fps)
> uvcvideo: - 176x144 (30.0 fps)
> uvcvideo: - 1280x1024 (8.0 fps)
> uvcvideo: device 5 videostreaminginterface 1 FORMAT error
> uvcvideo: Found a Status endpoint (addr 82).
> uvcvideo: Found UVC 1.00 device BisonCam, NB Pro (5986:0241)
> uvcvideo: No valid video chain found.
>
> There is an invalid videostreaming interface format exposed, which makes
> the webcam to fail to work as the error is treated as fatal, even if we
> have already found a valid format.

The invalid descriptor (I'm not sure if it's actually invalid, or just
vendor-specific and unsupported) isn't a Class Specific Interface descriptor
(bDescriptorType != 36), so it might make sense not to try to parse it instead
of trying and failing.

> Fix this by not failing entirely if we have found an invalid format, as
> we can still have a valid format. The initial problem and solution
> (patch) was debugged and done by Clevo (probably by Michael Wang),
> which uses the affected webcam in one of their laptops. I'm forwarding
> their fix plus additional code that I noticed to be needed for generic
> cases that decrements properly streaming->nformats and checks later if
> we really found at least one valid format, and if there were really no
> valid formats we make sure then to return with error.

What about modifying uvc_parse_streaming() to stop parsing the interface
descriptors when it encounters a non CS Interface descriptor instead ?
Something like

diff -r 66a270023c26 linux/drivers/media/video/uvc/uvc_driver.c
--- a/linux/drivers/media/video/uvc/uvc_driver.c	Sun May 31 22:05:55 2009 +0200
+++ b/linux/drivers/media/video/uvc/uvc_driver.c	Thu Jun 04 12:40:09 2009 +0200
@@ -644,7 +644,7 @@
 	_buflen = buflen;
 
 	/* Count the format and frame descriptors. */
-	while (_buflen > 2) {
+	while (_buflen > 2 && _buffer[1] == CS_INTERFACE) {
 		switch (_buffer[2]) {
 		case VS_FORMAT_UNCOMPRESSED:
 		case VS_FORMAT_MJPEG:
@@ -709,7 +709,7 @@
 	streaming->nformats = nformats;
 
 	/* Parse the format descriptors. */
-	while (buflen > 2) {
+	while (buflen > 2 && buffer[1] == CS_INTERFACE) {
 		switch (buffer[2]) {
 		case VS_FORMAT_UNCOMPRESSED:
 		case VS_FORMAT_MJPEG:

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Thu Jun  4 13:14:56 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Thu, 4 Jun 2009 13:14:56 +0200
Subject: [Linux-uvc-devel] suyin crystal eye webcam 064e:a103 not working
In-Reply-To: <ebff8ece0906031525x653addb5k79c7bb32abbe04ed@mail.gmail.com>
References: <ebff8ece0906031525x653addb5k79c7bb32abbe04ed@mail.gmail.com>
Message-ID: <200906041314.56464.laurent.pinchart@skynet.be>

Hi Bruce,

On Thursday 04 June 2009 00:25:22 bruce m beach wrote:

[snip]
> >
> > It seems the device doesn't toggle the FID bit in the UVC
> > packet header. Could you try loading the driver with
> > quirks=16 ?
>
> First of all it sure looks light the camera is indeed streaming since I get
> the line
>
>          uvcvideo: Dequeuing buffer 0 (3, 307789 bytes)
>
> which is very close to the format
>
>          640x480=307200 + 589 control bytes (whatever they are)

You're streaming in MJPEG so the data size can (and will) vary.

The application is able to dequeue a single buffer only. This led me to 
believe that the driver is able to fill a single video buffer and then drops 
all further data (or doesn't receive any more data) for some reason.

> Okay I tried the following command (and a million other variations)
>
>          modprobe -v uvcvideo trace=255 quirks=16
>
> and got the line from the kernel log
>
>          kernel: uvcvideo: Forcing device quirks 0x10
>                             by module parameter for testing purpose.

What bothers me in the trace is

May 28 10:53:28 lapsystemx kernel: uvcvideo: Dropping payload (out of sync).
May 28 10:53:59 lapsystemx last message repeated 30784 times
May 28 10:55:00 lapsystemx last message repeated 60992 times
May 28 10:55:24 lapsystemx last message repeated 24351 times

The "out of sync" message means that the device didn't toggle the FID bit. 
Quirk 0x10 is supposed to work around that by ignoring the FID bit.

> This has no effect at all, same output as the trace above, so I thought it
> might be a good idea to see what was happening in the header.  Now if I went
> to the wrong place then all my data is wrong.
>
> I went to the call
>
>     "static int uvc_video_decode_start"
>
> in the file "uvc_video.c"
>
> I added the lines
>
>     __u8 packet_header;
>     packet_header=data[1] & 255;
>
>     uvc_trace(UVC_TRACE_FRAME, "packet header=%d\n",
>                                    packet_header);
>
> After compiling, installing and reloading
> I immediately got many pages of
>
>    packet header=141
>
> so I tried the following, see if the header ever changes.
>
>     if (packet_header != 141)
>     uvc_trace(UVC_TRACE_FRAME, "packet header=%d\n",
>                                    packet_header);
>
> which never got printed. In other words the packet header is
> always 141 and we have the information below
>
>             UVC_STREAM_EOH  (1 << 7)  1 (set)
>             UVC_STREAM_ERR  (1 << 6)  0 (reset)
>             UVC_STREAM_STI  (1 << 5)  0 (reset)
>             UVC_STREAM_RES  (1 << 4)  0 (reset)
>             UVC_STREAM_SCR  (1 << 3)  1 (set)
>             UVC_STREAM_PTS  (1 << 2)  1 (set)
>             UVC_STREAM_EOF  (1 << 1)  0 (reset)
>             UVC_STREAM_FID  (1 << 0)  1 (set)

EOF should be set at the end of every frame, and FID should be toggled for 
every frame. The other bits look correct.

Could you please print the packet length as well as the header flags ? I'd 
like to know if the driver isn't supplied with data at all, or if it drops it 
for some reason.

Best regards,

Laurent Pinchart



From jezz at sysmic.org  Thu Jun  4 13:35:18 2009
From: jezz at sysmic.org (=?iso-8859-1?q?J=E9r=F4me_Pouiller?=)
Date: Thu, 4 Jun 2009 13:35:18 +0200
Subject: [Linux-uvc-devel] [PATCH] uvcvideo: workaround invalid formats
	exposed by buggy webcam
In-Reply-To: <200906031802.34532.herton@mandriva.com.br>
References: <200906031802.34532.herton@mandriva.com.br>
Message-ID: <200906041335.18761.jezz@sysmic.org>

Hi Herton,

On Wednesday 03 June 2009 23:02:33 Herton Ronaldo Krzesinski wrote:
> One webcam I have here exposes an invalid videostreaming interface
> format, with trace=0x2 this output is shown on kernel log:
>
> USB Video Class driver (v0.1.0)
> usb 3-7: new high speed USB device using ehci_hcd and address 5
> usb 3-7: configuration #1 chosen from 1 choice
> uvcvideo: Found format YUV 4:2:2 (YUYV).
> uvcvideo: - 640x480 (18.0 fps)
> uvcvideo: - 320x240 (30.0 fps)
> uvcvideo: - 160x120 (30.0 fps)
> uvcvideo: - 352x288 (30.0 fps)
> uvcvideo: - 176x144 (30.0 fps)
> uvcvideo: - 1280x1024 (8.0 fps)
> uvcvideo: device 5 videostreaminginterface 1 FORMAT error
> uvcvideo: Found a Status endpoint (addr 82).
> uvcvideo: Found UVC 1.00 device BisonCam, NB Pro (5986:0241)
> uvcvideo: No valid video chain found.
>
> There is an invalid videostreaming interface format exposed, which
> makes the webcam to fail to work as the error is treated as fatal,
> even if we have already found a valid format.

Just for information, I have same camera (at least same 
idVendor/idModel), but kernel log is different. I have no error:
Linux video capture interface: v2.00
uvcvideo: Found format YUV 4:2:2 (YUYV).
uvcvideo: - 640x480 (24.0 fps)
uvcvideo: - 320x240 (24.0 fps)
uvcvideo: - 160x120 (24.0 fps)
uvcvideo: - 352x288 (24.0 fps)
uvcvideo: - 176x144 (24.0 fps)
uvcvideo: - 1280x1024 (8.0 fps)
uvcvideo: Found a Status endpoint (addr 82).
uvcvideo: Found UVC 1.00 device BisonCam, NB Pro (5986:0241)
input: BisonCam, NB Pro as 
/devices/pci0000:00/0000:00:1d.7/usb1/1-3/1-3:1.0/input/input10
usbcore: registered new interface driver uvcvideo
USB Video Class driver (v0.1.0)

Quality of BisonCam products seems very poor...


-- 
J?r?me Pouiller (jezz AT sysmic DOT org)


From laurent.pinchart at skynet.be  Thu Jun  4 13:57:53 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Thu, 4 Jun 2009 13:57:53 +0200
Subject: [Linux-uvc-devel] [PATCH] uvcvideo: workaround invalid formats
	exposed by buggy webcam
In-Reply-To: <200906041335.18761.jezz@sysmic.org>
References: <200906031802.34532.herton@mandriva.com.br>
	<200906041335.18761.jezz@sysmic.org>
Message-ID: <200906041357.54153.laurent.pinchart@skynet.be>

Hi J?r?me,

On Thursday 04 June 2009 13:35:18 J?r?me Pouiller wrote:
> Hi Herton,
>
> On Wednesday 03 June 2009 23:02:33 Herton Ronaldo Krzesinski wrote:
> > One webcam I have here exposes an invalid videostreaming interface
> > format, with trace=0x2 this output is shown on kernel log:
> >
> > USB Video Class driver (v0.1.0)
> > usb 3-7: new high speed USB device using ehci_hcd and address 5
> > usb 3-7: configuration #1 chosen from 1 choice
> > uvcvideo: Found format YUV 4:2:2 (YUYV).
> > uvcvideo: - 640x480 (18.0 fps)
> > uvcvideo: - 320x240 (30.0 fps)
> > uvcvideo: - 160x120 (30.0 fps)
> > uvcvideo: - 352x288 (30.0 fps)
> > uvcvideo: - 176x144 (30.0 fps)
> > uvcvideo: - 1280x1024 (8.0 fps)
> > uvcvideo: device 5 videostreaminginterface 1 FORMAT error
> > uvcvideo: Found a Status endpoint (addr 82).
> > uvcvideo: Found UVC 1.00 device BisonCam, NB Pro (5986:0241)
> > uvcvideo: No valid video chain found.
> >
> > There is an invalid videostreaming interface format exposed, which
> > makes the webcam to fail to work as the error is treated as fatal,
> > even if we have already found a valid format.
>
> Just for information, I have same camera (at least same
> idVendor/idModel), but kernel log is different. I have no error:
> Linux video capture interface: v2.00
> uvcvideo: Found format YUV 4:2:2 (YUYV).
> uvcvideo: - 640x480 (24.0 fps)
> uvcvideo: - 320x240 (24.0 fps)
> uvcvideo: - 160x120 (24.0 fps)
> uvcvideo: - 352x288 (24.0 fps)
> uvcvideo: - 176x144 (24.0 fps)
> uvcvideo: - 1280x1024 (8.0 fps)
> uvcvideo: Found a Status endpoint (addr 82).
> uvcvideo: Found UVC 1.00 device BisonCam, NB Pro (5986:0241)
> input: BisonCam, NB Pro as
> /devices/pci0000:00/0000:00:1d.7/usb1/1-3/1-3:1.0/input/input10
> usbcore: registered new interface driver uvcvideo
> USB Video Class driver (v0.1.0)
>
> Quality of BisonCam products seems very poor...

Don't forget that integrators can usually customize the camera firmware, so 
let's not blame Bison Electronics too fast.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Thu Jun  4 14:43:34 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Thu, 4 Jun 2009 14:43:34 +0200
Subject: [Linux-uvc-devel] Fwd: Fwd:  Compilation error
In-Reply-To: <efe037fe0906030638s32305049y26f44c05147b79@mail.gmail.com>
References: <200905270157.55653.laurent.pinchart@skynet.be>
	<20090527153848.1dfb85e7@pedra.chehab.org>
	<efe037fe0906030638s32305049y26f44c05147b79@mail.gmail.com>
Message-ID: <200906041443.35074.laurent.pinchart@skynet.be>

Hi Phil,

On Wednesday 03 June 2009 15:38:36 phil lemelin wrote:
> Sorry for the late replay.
>
> Tested it here with now with a 2.6.22.19 kernel and still the same thing.
>
> I tried with the tip.tar.gz and also cloned the hg repository ( hg clone
> http://linuxtv.org/hg/~pinchartl/uvcvideo/ ).
> I cant see any mention of your commit in the change log  either.

You've probably read my last mail too fast. Mauro, the v4l-dvb maintainer, 
committed a patch to fix this issue. I haven't.

Try the official v4l-dvb tree (http://linuxtv.org/hg/v4l-dvb). The patch will 
make it to my tree the next time I synchronize it with v4l-dvb.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Thu Jun  4 14:50:47 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Thu, 4 Jun 2009 14:50:47 +0200
Subject: [Linux-uvc-devel] Possible to use 2 streaming interface withUVC
	driver?
In-Reply-To: <a81f87bb0906021201y7b5e8dajc373cacc5661214e@mail.gmail.com>
References: <20090602104253.HM.00000000000001v@why21c.wwl489.hanmail.net>
	<a81f87bb0906021201y7b5e8dajc373cacc5661214e@mail.gmail.com>
Message-ID: <200906041450.47786.laurent.pinchart@skynet.be>

Hi Brian,

On Tuesday 02 June 2009 21:01:16 Brian Pin wrote:
> Hi,
> I have been using graphedit on Windows for testing some two streaming
> interface device for a while.
> Although I did not find any application that uses two UVC streams.
> The graphedit will just provide any number of pins for the number of
> streaming interface you have.
> You can test each of the pin individually or test them altogether.
> By the way for the UVC device developing side I found the Null renderer in
> DirectShow filter is very helpful for verifying the device.
> I am wondering if there is anything similar on Linux side?

There's gstreamer which is somehow similar in purpose to (parts of) 
DirectShow, but in my opinion Linux currently doesn't have a good, universal, 
multimedia framework.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Thu Jun  4 18:17:12 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Thu, 4 Jun 2009 18:17:12 +0200
Subject: [Linux-uvc-devel] Possible to use 2 streaming interface withUVC
	driver?
In-Reply-To: <20090602104253.HM.00000000000001v@why21c.wwl489.hanmail.net>
References: <20090602104253.HM.00000000000001v@why21c.wwl489.hanmail.net>
Message-ID: <200906041817.12877.laurent.pinchart@skynet.be>

Hi Chris,

On Tuesday 02 June 2009 03:42:53 Chris wrote:
> On Tuesday 02 June 2009 Laurent Pinchart wrote:
> > On Monday 01 June 2009 07:01:27 fjklsd wrote:
> > > Hi.
> > > I'm developing a kind of webcam which transfer MJPEG and H.264
> > > simultaneously with UVC. I'm not sure that UVC driver supports 2
> > > streaming Inteface. Actually, UVC spec supports multiple streaming
> > > interface. However, I can't figure out how to use uvc driver for using 2
> > > streaming interface.
> > > Is it possible to use 2 streaming interface with UVC driver? If
> > > possible, can anyone help me to use UVC driver about using 2 streaming
> > > interface simply?
> >
> > The UVC video driver currently doesn't support multiple streaming
> > interfaces. The main reason was that I lacked hardware with multiple
> > streaming interfaces to test that feature. By the way, does the Windows
> > UVC driver support multiple streaming interfaces ?
> >
> > If you send me the USB descriptors of your devices I could have a look at
> > the driver to see how I could add multiple streaming interfaces support.
>
> Hi,
> Thank you for replying.
> I'm not sure that windows UVC driver supports multiple streaming
> interfaces. Anyway, I attached my device's descriptor file.
> This descriptor's streaming interfaces are MJPEG and YUV.

Thanks. I'll restructure the driver to support multiple streaming interfaces. 
Will you be able to test a patch when it will be ready ?

Best regards,

Laurent Pinchart



From herton at mandriva.com.br  Thu Jun  4 19:23:17 2009
From: herton at mandriva.com.br (Herton Ronaldo Krzesinski)
Date: Thu, 4 Jun 2009 14:23:17 -0300
Subject: [Linux-uvc-devel] [PATCH] uvcvideo: workaround invalid formats
	exposed by buggy webcam
In-Reply-To: <200906041241.03791.laurent.pinchart@skynet.be>
References: <200906031802.34532.herton@mandriva.com.br>
	<200906041241.03791.laurent.pinchart@skynet.be>
Message-ID: <200906041423.18804.herton@mandriva.com.br>

Em Quinta-feira 04 Junho 2009, ?s 07:41:03, Laurent Pinchart escreveu:
> Hi Herton,
> 
> On Wednesday 03 June 2009 23:02:33 Herton Ronaldo Krzesinski wrote:
> > Fix this by not failing entirely if we have found an invalid format, as
> > we can still have a valid format. The initial problem and solution
> > (patch) was debugged and done by Clevo (probably by Michael Wang),
> > which uses the affected webcam in one of their laptops. I'm forwarding
> > their fix plus additional code that I noticed to be needed for generic
> > cases that decrements properly streaming->nformats and checks later if
> > we really found at least one valid format, and if there were really no
> > valid formats we make sure then to return with error.
> 
> What about modifying uvc_parse_streaming() to stop parsing the interface
> descriptors when it encounters a non CS Interface descriptor instead ?
> Something like

Yep, it works for me too and it's better since then we don't allocate extra
memory that we don't use for streaming->format

But your solution stops to count formats at the first buffer[1] !=
CS_INTERFACE, is it possible that CS_INTERFACE and ! CS_INTERFACE are mixed?
(!= CS_INTERFACE not always the last one) In this case is better to continue,
like patch below:

diff -p -up linux/drivers/media/video/uvc/uvc_driver.c.orig linux/drivers/media/video/uvc/uvc_driver.c
--- linux/drivers/media/video/uvc/uvc_driver.c.orig	2009-06-03 12:49:50.000000000 -0300
+++ linux/drivers/media/video/uvc/uvc_driver.c	2009-06-04 11:11:34.000000000 -0300
@@ -645,42 +645,49 @@ static int uvc_parse_streaming(struct uv
 
 	/* Count the format and frame descriptors. */
 	while (_buflen > 2) {
-		switch (_buffer[2]) {
-		case VS_FORMAT_UNCOMPRESSED:
-		case VS_FORMAT_MJPEG:
-		case VS_FORMAT_FRAME_BASED:
-			nformats++;
-			break;
+		if (_buffer[1] == CS_INTERFACE) {
+			switch (_buffer[2]) {
+			case VS_FORMAT_UNCOMPRESSED:
+			case VS_FORMAT_MJPEG:
+			case VS_FORMAT_FRAME_BASED:
+				nformats++;
+				break;
 
-		case VS_FORMAT_DV:
-			/* DV format has no frame descriptor. We will create a
-			 * dummy frame descriptor with a dummy frame interval.
-			 */
-			nformats++;
-			nframes++;
-			nintervals++;
-			break;
+			case VS_FORMAT_DV:
+				/* DV format has no frame descriptor. We will
+				 * create a dummy frame descriptor with a dummy
+				 * frame interval.
+				 */
+				nformats++;
+				nframes++;
+				nintervals++;
+				break;
 
-		case VS_FORMAT_MPEG2TS:
-		case VS_FORMAT_STREAM_BASED:
-			uvc_trace(UVC_TRACE_DESCR, "device %d videostreaming "
-				"interface %d FORMAT %u is not supported.\n",
-				dev->udev->devnum,
-				alts->desc.bInterfaceNumber, _buffer[2]);
-			break;
+			case VS_FORMAT_MPEG2TS:
+			case VS_FORMAT_STREAM_BASED:
+				uvc_trace(UVC_TRACE_DESCR, "device %d "
+					"videostreaming interface %d FORMAT "
+					"%u is not supported.\n",
+					dev->udev->devnum,
+					alts->desc.bInterfaceNumber,
+					_buffer[2]);
+				break;
 
-		case VS_FRAME_UNCOMPRESSED:
-		case VS_FRAME_MJPEG:
-			nframes++;
-			if (_buflen > 25)
-				nintervals += _buffer[25] ? _buffer[25] : 3;
-			break;
+			case VS_FRAME_UNCOMPRESSED:
+			case VS_FRAME_MJPEG:
+				nframes++;
+				if (_buflen > 25)
+					nintervals += _buffer[25] ?
+						      _buffer[25] : 3;
+				break;
 
-		case VS_FRAME_FRAME_BASED:
-			nframes++;
-			if (_buflen > 21)
-				nintervals += _buffer[21] ? _buffer[21] : 3;
-			break;
+			case VS_FRAME_FRAME_BASED:
+				nframes++;
+				if (_buflen > 21)
+					nintervals += _buffer[21] ?
+						      _buffer[21] : 3;
+				break;
+			}
 		}
 
 		_buflen -= _buffer[0];
@@ -710,26 +717,28 @@ static int uvc_parse_streaming(struct uv
 
 	/* Parse the format descriptors. */
 	while (buflen > 2) {
-		switch (buffer[2]) {
-		case VS_FORMAT_UNCOMPRESSED:
-		case VS_FORMAT_MJPEG:
-		case VS_FORMAT_DV:
-		case VS_FORMAT_FRAME_BASED:
-			format->frame = frame;
-			ret = uvc_parse_format(dev, streaming, format,
-				&interval, buffer, buflen);
-			if (ret < 0)
-				goto error;
+		if (buffer[1] == CS_INTERFACE) {
+			switch (buffer[2]) {
+			case VS_FORMAT_UNCOMPRESSED:
+			case VS_FORMAT_MJPEG:
+			case VS_FORMAT_DV:
+			case VS_FORMAT_FRAME_BASED:
+				format->frame = frame;
+				ret = uvc_parse_format(dev, streaming, format,
+					&interval, buffer, buflen);
+				if (ret < 0)
+					goto error;
 
-			frame += format->nframes;
-			format++;
+				frame += format->nframes;
+				format++;
 
-			buflen -= ret;
-			buffer += ret;
-			continue;
+				buflen -= ret;
+				buffer += ret;
+				continue;
 
-		default:
-			break;
+			default:
+				break;
+			}
 		}
 
 		buflen -= buffer[0];


> 
> diff -r 66a270023c26 linux/drivers/media/video/uvc/uvc_driver.c
> --- a/linux/drivers/media/video/uvc/uvc_driver.c	Sun May 31 22:05:55 2009 +0200
> +++ b/linux/drivers/media/video/uvc/uvc_driver.c	Thu Jun 04 12:40:09 2009 +0200
> @@ -644,7 +644,7 @@
>  	_buflen = buflen;
>  
>  	/* Count the format and frame descriptors. */
> -	while (_buflen > 2) {
> +	while (_buflen > 2 && _buffer[1] == CS_INTERFACE) {
>  		switch (_buffer[2]) {
>  		case VS_FORMAT_UNCOMPRESSED:
>  		case VS_FORMAT_MJPEG:
> @@ -709,7 +709,7 @@
>  	streaming->nformats = nformats;
>  
>  	/* Parse the format descriptors. */
> -	while (buflen > 2) {
> +	while (buflen > 2 && buffer[1] == CS_INTERFACE) {
>  		switch (buffer[2]) {
>  		case VS_FORMAT_UNCOMPRESSED:
>  		case VS_FORMAT_MJPEG:
> 
> Best regards,
> 
> Laurent Pinchart
> 
> 

--
[]'s
Herton


From phil.lemelin at gmail.com  Thu Jun  4 21:04:27 2009
From: phil.lemelin at gmail.com (phil lemelin)
Date: Thu, 4 Jun 2009 15:04:27 -0400
Subject: [Linux-uvc-devel] Fwd: Fwd: Compilation error
In-Reply-To: <200906041443.35074.laurent.pinchart@skynet.be>
References: <200905270157.55653.laurent.pinchart@skynet.be>
	<20090527153848.1dfb85e7@pedra.chehab.org>
	<efe037fe0906030638s32305049y26f44c05147b79@mail.gmail.com>
	<200906041443.35074.laurent.pinchart@skynet.be>
Message-ID: <efe037fe0906041204g13deede2u2ff36030ef225d58@mail.gmail.com>

Mauro, Laurent,

Thank you for you help. I installed the v4l-dvd under 2.6.22 without seeing
my camera but  installing it under 2.6.29 worked.

My webcam is functionnal.

Phil.

On Thu, Jun 4, 2009 at 8:43 AM, Laurent Pinchart wrote:

> Hi Phil,
>
> On Wednesday 03 June 2009 15:38:36 phil lemelin wrote:
> > Sorry for the late replay.
> >
> > Tested it here with now with a 2.6.22.19 kernel and still the same thing.
> >
> > I tried with the tip.tar.gz and also cloned the hg repository ( hg clone
> > http://linuxtv.org/hg/~pinchartl/uvcvideo/<http://linuxtv.org/hg/%7Epinchartl/uvcvideo/>).
> > I cant see any mention of your commit in the change log  either.
>
> You've probably read my last mail too fast. Mauro, the v4l-dvb maintainer,
> committed a patch to fix this issue. I haven't.
>
> Try the official v4l-dvb tree (http://linuxtv.org/hg/v4l-dvb). The patch
> will
> make it to my tree the next time I synchronize it with v4l-dvb.
>
> Best regards,
>
> Laurent Pinchart
>
>


-- 
Philippe-Alexandre Lemelin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090604/08e285c9/attachment.html>

From brucembeach at gmail.com  Fri Jun  5 01:50:04 2009
From: brucembeach at gmail.com (bruce m beach)
Date: Thu, 4 Jun 2009 16:50:04 -0700
Subject: [Linux-uvc-devel] suyin crystal eye webcam 064e:a103 not working
Message-ID: <ebff8ece0906041650o43495868s9bb00ebfc03e8d45@mail.gmail.com>

 > Hi Bruce,
 >
 > On Thursday 04 June 2009 00:25:22 bruce m beach wrote:
 >
 > [snip]
 > > >
 > > > It seems the device doesn't toggle the FID bit in the UVC
 > > > packet header. Could you try loading the driver with
 > > > quirks=16 ?
 > >
 > You're streaming in MJPEG so the data size can (and will) vary.
 > The application is able to dequeue a single buffer only. This led me to
 > believe that the driver is able to fill a single video buffer and then drops
 > all further data (or doesn't receive any more data) for some reason.

As I mention I have a flag to see if the packet header is ever anything
other than 141 and out of 30,000 entries or so I got: (look for
"PHPHPH..".

 kernel: uvcvideo: uvc_v4l2_open
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_QUERYCAP)
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_ENUM_FMT)
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_ENUM_FMT)
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_S_FMT)
 kernel: uvcvideo: Trying format 0x47504a4d (MJPG): 640x480.
 kernel: uvcvideo: Using default frame interval 33333.3 us (30.0 fps).
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_S_PARM)
 kernel: uvcvideo: Setting frame interval to 1/30 (333333).
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_G_PARM)
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_REQBUFS)
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_QUERYBUF)
 kernel: uvcvideo: uvc_v4l2_mmap
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_QUERYBUF)
 kernel: uvcvideo: uvc_v4l2_mmap
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_QUERYBUF)
 kernel: uvcvideo: uvc_v4l2_mmap
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_QUERYBUF)
 kernel: uvcvideo: uvc_v4l2_mmap
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_QBUF)
 kernel: uvcvideo: Queuing buffer 0.
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_QBUF)
 kernel: uvcvideo: Queuing buffer 1.
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_QBUF)
 kernel: uvcvideo: Queuing buffer 2.
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_QBUF)
 kernel: uvcvideo: Queuing buffer 3.
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_STREAMON)
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_DQBUF)
 kernel: uvcvideo: PHPHPHPHPHPHPHPHPHPHPHPHPHPHPHPH packet header 140
 last message repeated 748 times
 kernel: uvcvideo: Frame complete (overflow).
 kernel: uvcvideo: Dequeuing buffer 0 (3, 307789 bytes).
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_QBUF)
 kernel: uvcvideo: Queuing buffer 0.
 kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_DQBUF)
 kernel: uvcvideo: Dropping payload (out of sync).
 last message repeated 8191 times
 kernel: uvcvideo: uvc_v4l2_release

This occured after a power on and the very first time I loaded the
module and started luvcview. It never occured again.

 > What bothers me in the trace is
 >
 > May 28 10:53:28 lapsystemx kernel: uvcvideo: Dropping payload (out of sync).
 > May 28 10:53:59 lapsystemx last message repeated 30784 times
 > May 28 10:55:00 lapsystemx last message repeated 60992 times
 > May 28 10:55:24 lapsystemx last message repeated 24351 times
 >
 > The "out of sync" message means that the device didn't toggle the FID bit.
 > Quirk 0x10 is supposed to work around that by ignoring the FID bit.

I forced a toggle on the FID bit to see if there was any kind of message
about the FID bit toggleing and got:

   uvcvideo: Frame complete (FID bit toggled)

Now the only place I can find where the FID bit is dealt with due
to UVC_QUIRK_STREAM_NO_FID is in

   static void uvc_video_decode_end(...

with:
            if (video->dev->quirks & UVC_QUIRK_STREAM_NO_FID)
            video->last_fid ^= UVC_STREAM_FID;

so I a added a line at the beginning of the call

  uvc_trace(UVC_TRACE_FRAME, "START: uvc_video_decode_end\n");

to see if it ever gets there which it certainly does as
you'll see in the final trace but we still never gets the
"FID bit toggled" message. Is there any dependency on
UVC_STREAM_EOF? It is is also supposed to change state at
the end of a frame but is actually always zero.

 > >             UVC_STREAM_EOH  (1 << 7)  1 (set)
 > >             UVC_STREAM_ERR  (1 << 6)  0 (reset)
 > >             UVC_STREAM_STI  (1 << 5)  0 (reset)
 > >             UVC_STREAM_RES  (1 << 4)  0 (reset)
 > >             UVC_STREAM_SCR  (1 << 3)  1 (set)
 > >             UVC_STREAM_PTS  (1 << 2)  1 (set)
 > >             UVC_STREAM_EOF  (1 << 1)  0 (reset)
 > >             UVC_STREAM_FID  (1 << 0)  1 (set)
 >
 > EOF should be set at the end of every frame, and FID should be toggled for
 > every frame. The other bits look correct.
 > Could you please print the packet length as well as the header flags ? I'd
 > like to know if the driver isn't supplied with data at all, or if
it drops it
 > for some reason.
 >
Okay: "START: uvc_video_decode_end" give the program
entering uvc_video_decode_end and I have printed out

     packet_header, len, video->last_fid.

The last one on the assumption that it should be toggleling
even if FID is not toggleing due to UVC_QUIRK_STREAM_NO_FID working.
The trace was about 13000 lines long so I deleted a big chunk of it.
It is currently about 2000 lines long because there are
big variations in the buffer size over the long term,
usually 12, 12,..... then 956 .. 12, 12 .....

The one thing that I'll continue to look into is why
is video->last_fid  not toggleing. As far as I can see
it ->must<- toggle, unless it is also getting toggled
somewhere else at the same time.

Bruce

************** Start Trace ***************

... ...
... ...
kernel: uvcvideo: Found UVC 1.00 device Crystal Eye webcam (064e:a103)
kernel: uvcvideo: Forcing device quirks 0x10 by module parameter for
testing purpose.
kernel: uvcvideo: Please report required quirks to the linux-uvc-devel
mailing list.
... ...
kernel: uvcvideo: Queuing buffer 3.
kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_STREAMON)
kernel: uvcvideo: uvc_v4l2_ioctl(VIDIOC_DQBUF)
kernel: uvcvideo: packet header=141 len=956 video->last_fid 255
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=620 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=780 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=620 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=620 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=708 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=444 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=620 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=620 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=644 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=220 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=620 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=620 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=164 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=620 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=620 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=92 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=620 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=620 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: START: uvc_video_decode_end
kernel: uvcvideo: Dropping payload (out of sync).
... ...
... ...
... ...
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: Dropping payload (out of sync).
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: Dropping payload (out of sync).
kernel: uvcvideo: packet header=141 len=956 video->last_fid 1
kernel: uvcvideo: Dropping payload (out of sync).
kernel: uvcvideo: packet header=141 len=924 video->last_fid 1
kernel: uvcvideo: Dropping payload (out of sync).
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: Dropping payload (out of sync).
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: Dropping payload (out of sync).
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: Dropping payload (out of sync).
kernel: uvcvideo: packet header=141 len=12 video->last_fid 1
kernel: uvcvideo: Dropping payload (out of sync).
kernel: uvcvideo: uvc_v4l2_release


From brucembeach at gmail.com  Fri Jun  5 22:36:55 2009
From: brucembeach at gmail.com (bruce m beach)
Date: Fri, 5 Jun 2009 13:36:55 -0700
Subject: [Linux-uvc-devel] suyin crystal eye webcam 064e:a103 not working
Message-ID: <ebff8ece0906051336p3bdc01d6yb1b139ae1fe5d5bd@mail.gmail.com>

  Hello Laurent

    I replied to your last email but it 'mailman' is holding
    it because it is far too big. Just to give you an update
    on something that I realized:

 > What bothers me in the trace is
 >
 > May 28 10:53:28 lapsystemx kernel: uvcvideo: Dropping payload (out of sync).
 > May 28 10:53:59 lapsystemx last message repeated 30784 times
 > May 28 10:55:00 lapsystemx last message repeated 60992 times
 > May 28 10:55:24 lapsystemx last message repeated 24351 times
 >
 > The "out of sync" message means that the device didn't toggle the FID bit.
 > Quirk 0x10 is supposed to work around that by ignoring the FID bit.

in the following bit of code from

      static void uvc_video_decode_end(...

    if (data[1] & UVC_STREAM_EOF && buf->buf.bytesused != 0)
                  -------------
    {
          uvc_trace(UVC_TRACE_FRAME, "Frame complete (EOF found).\n");
          if (data[0] == len)
              uvc_trace(UVC_TRACE_FRAME, "EOF in empty payload.\n");
          buf->state = UVC_BUF_STATE_DONE;
          if (video->dev->quirks & UVC_QUIRK_STREAM_NO_FID)
      video->last_fid ^= UVC_STREAM_FID;
    }

last_fid is toggled ->only<- if the appropriate bit of data[1] is
set (UVC_STREAM_EOF) which will never happen since UVC_STREAM_EOF
is always zero (on the crystal eye webcam).

Bruce


From spiglerg at gmail.com  Sat Jun  6 15:10:17 2009
From: spiglerg at gmail.com (SpiglerG)
Date: Sat, 6 Jun 2009 15:10:17 +0200
Subject: [Linux-uvc-devel] Minoru3D Webcam
Message-ID: <b58e52da0906060610v4441c725v48de2c9a482b632f@mail.gmail.com>

Hi.
I've just bought a Minoru3D webcam (which recently got supported by
UVCVideo) to get a nice stereo platform, but I can't manage to get it
working because of the known-problems about "VIDIOC_STREAMON error 28, No
space left on device", even thought I'm using the uvcvideo-50059a68c503
(last) driver.
Actually I've managed to get it working with a modified version of fswebcam,
and only at 320x240, but I can't make it work with OpenCV: I can't change
resolution to 320x240 (default is 640x480), and at default resolutions it
fails (it's probably trying to get images @ 30fps).
UVC currently supports acquisition up to 320x240 @ 30fps, and 640x480
@15fps, but default specs are 640x480 @ 30fps, which gets usb bandwidth
errors.
Do you know any possible fixes to have it work with OpenCV (simultaneous
streaming), or to set 15fps as default for such resolution with this webcam
modifying UVC driver (at least for personal usage)?

Best regards,
             Giacomo Spigler
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090606/63c2ce48/attachment.html>

From why21c at hanmail.net  Sun Jun  7 08:52:15 2009
From: why21c at hanmail.net (Chris)
Date: Sun, 07 Jun 2009 15:52:15 +0900 (KST)
Subject: [Linux-uvc-devel] Possible to use 2 streaming interface
	withUVCdriver?
Message-ID: <20090607155215.HM.00000000000003F@why21c.wwl489.hanmail.net>

An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090607/6997dcce/attachment.html>

From taoxo4t at gmail.com  Sun Jun  7 22:21:20 2009
From: taoxo4t at gmail.com (Taor Mina)
Date: Sun, 7 Jun 2009 22:21:20 +0200
Subject: [Linux-uvc-devel] UVC device : 04f2:b070 Chicony Electronics Co.,
	Ltd
In-Reply-To: <714554a0906071310k77851cd4r587ada6c0a6432a3@mail.gmail.com>
References: <714554a0906071310k77851cd4r587ada6c0a6432a3@mail.gmail.com>
Message-ID: <714554a0906071321w18957c84je7a871691ba132fd@mail.gmail.com>

Hi, sorry my English, it's very bad.

I've got a Toshiba Satellite L350D (AMD Athlon X2 64bit - Ubuntu 8.10)

My video device is:
  Device ID: 04f2:b070
  Name: ???
  Manufacturer: Chicony Electronics Co., Ltd
  Status: Device works with issues

In attach my test whit
  lsusb -d 04f2:b070 -v
  luvcview -l
  uvccapture -v

Regard
taoX
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090607/a3095aa8/attachment.html>
-------------- next part --------------
taoX at lande:~$ lsusb 
Bus 003 Device 002: ID 15ca:00c3 Textech International Ltd. Mini Optical Mouse
Bus 003 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
Bus 006 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
Bus 005 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
Bus 004 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
Bus 002 Device 002: ID 04f2:b070 Chicony Electronics Co., Ltd 
Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub

taoX at lande:~$ lsusb -d 04f2:b070 -v
Bus 002 Device 002: ID 04f2:b070 Chicony Electronics Co., Ltd 
Device Descriptor:
  bLength                18
  bDescriptorType         1
  bcdUSB               2.00
  bDeviceClass          239 Miscellaneous Device
  bDeviceSubClass         2 ?
  bDeviceProtocol         1 Interface Association
  bMaxPacketSize0        64
  idVendor           0x04f2 Chicony Electronics Co., Ltd
  idProduct          0xb070 
  bcdDevice            8.34
  iManufacturer           2 
  iProduct                1 
  iSerial                 3 
  bNumConfigurations      1
  Configuration Descriptor:
    bLength                 9
    bDescriptorType         2
    wTotalLength          523
    bNumInterfaces          2
    bConfigurationValue     1
    iConfiguration          0 
    bmAttributes         0x80
      (Bus Powered)
    MaxPower               98mA
    Interface Association:
      bLength                 8
      bDescriptorType        11
      bFirstInterface         0
      bInterfaceCount         2
      bFunctionClass         14 Video
      bFunctionSubClass       3 Video Interface Collection
      bFunctionProtocol       0 
      iFunction               5 
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        0
      bAlternateSetting       0
      bNumEndpoints           1
      bInterfaceClass        14 Video
      bInterfaceSubClass      1 Video Control
      bInterfaceProtocol      0 
      iInterface              5 
      VideoControl Interface Descriptor:
        bLength                13
        bDescriptorType        36
        bDescriptorSubtype      1 (HEADER)
        bcdUVC               1.00
        wTotalLength          103
        dwClockFrequency       15.000000MHz
        bInCollection           1
        baInterfaceNr( 0)       1
      VideoControl Interface Descriptor:
        bLength                 9
        bDescriptorType        36
        bDescriptorSubtype      3 (OUTPUT_TERMINAL)
        bTerminalID             2
        wTerminalType      0x0101 USB Streaming
        bAssocTerminal          0
        bSourceID               5
        iTerminal               0 
      VideoControl Interface Descriptor:
        bLength                26
        bDescriptorType        36
        bDescriptorSubtype      6 (EXTENSION_UNIT)
        bUnitID                 4
        guidExtensionCode         {7033f028-1163-2e4a-ba2c-6890eb334016}
        bNumControl             8
        bNrPins                 1
        baSourceID( 0)          3
        bControlSize            1
        bmControls( 0)       0x0f
        iExtension              0 
      VideoControl Interface Descriptor:
        bLength                26
        bDescriptorType        36
        bDescriptorSubtype      6 (EXTENSION_UNIT)
        bUnitID                 5
        guidExtensionCode         {3fae1228-d7bc-114e-a357-6f1edef7d61d}
        bNumControl             8
        bNrPins                 1
        baSourceID( 0)          4
        bControlSize            1
        bmControls( 0)       0xff
        iExtension              0 
      VideoControl Interface Descriptor:
        bLength                18
        bDescriptorType        36
        bDescriptorSubtype      2 (INPUT_TERMINAL)
        bTerminalID             1
        wTerminalType      0x0201 Camera Sensor
        bAssocTerminal          0
        iTerminal               0 
        wObjectiveFocalLengthMin      0
        wObjectiveFocalLengthMax      0
        wOcularFocalLength            0
        bControlSize                  3
        bmControls           0x00000000
      VideoControl Interface Descriptor:
        bLength                11
        bDescriptorType        36
        bDescriptorSubtype      5 (PROCESSING_UNIT)
      Warning: Descriptor too short
        bUnitID                 3
        bSourceID               1
        wMaxMultiplier          0
        bControlSize            2
        bmControls     0x0000153f
          Brightness
          Contrast
          Hue
          Saturation
          Sharpness
          Gamma
          Backlight Compensation
          Power Line Frequency
          White Balance Temperature, Auto
        iProcessing             0 
        bmVideoStandards     0x 0
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x83  EP 3 IN
        bmAttributes            3
          Transfer Type            Interrupt
          Synch Type               None
          Usage Type               Data
        wMaxPacketSize     0x0010  1x 16 bytes
        bInterval               6
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        1
      bAlternateSetting       0
      bNumEndpoints           0
      bInterfaceClass        14 Video
      bInterfaceSubClass      2 Video Streaming
      bInterfaceProtocol      0 
      iInterface              0 
      VideoStreaming Interface Descriptor:
        bLength                            14
        bDescriptorType                    36
        bDescriptorSubtype                  1 (INPUT_HEADER)
        bNumFormats                        1
        wTotalLength                      277
        bEndPointAddress                  129
        bmInfo                              0
        bTerminalLink                       2
        bStillCaptureMethod                 0
        bTriggerSupport                     1
        bTriggerUsage                       1
        bControlSize                        1
        bmaControls( 0)                    27
      VideoStreaming Interface Descriptor:
        bLength                            27
        bDescriptorType                    36
        bDescriptorSubtype                  4 (FORMAT_UNCOMPRESSED)
        bFormatIndex                        1
        bNumFrameDescriptors                5
        guidFormat                            {59555932-0000-1000-8000-00aa00389b71}
        bBitsPerPixel                      16
        bDefaultFrameIndex                  1
        bAspectRatioX                       0
        bAspectRatioY                       0
        bmInterlaceFlags                 0x00
          Interlaced stream or variable: No
          Fields per frame: 1 fields
          Field 1 first: No
          Field pattern: Field 1 only
          bCopyProtect                      0
      VideoStreaming Interface Descriptor:
        bLength                            46
        bDescriptorType                    36
        bDescriptorSubtype                  5 (FRAME_UNCOMPRESSED)
        bFrameIndex                         1
        bmCapabilities                   0x00
          Still image unsupported
        wWidth                            640
        wHeight                           480
        dwMinBitRate                  3072000
        dwMaxBitRate                 18432000
        dwMaxVideoFrameBufferSize      614400
        dwDefaultFrameInterval         333333
        bFrameIntervalType                  5
        dwFrameInterval( 0)            333333
        dwFrameInterval( 1)            500000
        dwFrameInterval( 2)            666666
        dwFrameInterval( 3)           1000000
        dwFrameInterval( 4)           2000000
      VideoStreaming Interface Descriptor:
        bLength                            46
        bDescriptorType                    36
        bDescriptorSubtype                  5 (FRAME_UNCOMPRESSED)
        bFrameIndex                         2
        bmCapabilities                   0x00
          Still image unsupported
        wWidth                            352
        wHeight                           288
        dwMinBitRate                  1013760
        dwMaxBitRate                  6082560
        dwMaxVideoFrameBufferSize      202752
        dwDefaultFrameInterval         333333
        bFrameIntervalType                  5
        dwFrameInterval( 0)            333333
        dwFrameInterval( 1)            500000
        dwFrameInterval( 2)            666666
        dwFrameInterval( 3)           1000000
        dwFrameInterval( 4)           2000000
      VideoStreaming Interface Descriptor:
        bLength                            46
        bDescriptorType                    36
        bDescriptorSubtype                  5 (FRAME_UNCOMPRESSED)
        bFrameIndex                         3
        bmCapabilities                   0x00
          Still image unsupported
        wWidth                            320
        wHeight                           240
        dwMinBitRate                   768000
        dwMaxBitRate                  4608000
        dwMaxVideoFrameBufferSize      153600
        dwDefaultFrameInterval         333333
        bFrameIntervalType                  5
        dwFrameInterval( 0)            333333
        dwFrameInterval( 1)            500000
        dwFrameInterval( 2)            666666
        dwFrameInterval( 3)           1000000
        dwFrameInterval( 4)           2000000
      VideoStreaming Interface Descriptor:
        bLength                            46
        bDescriptorType                    36
        bDescriptorSubtype                  5 (FRAME_UNCOMPRESSED)
        bFrameIndex                         4
        bmCapabilities                   0x00
          Still image unsupported
        wWidth                            176
        wHeight                           144
        dwMinBitRate                   253440
        dwMaxBitRate                  1520640
        dwMaxVideoFrameBufferSize       50688
        dwDefaultFrameInterval         333333
        bFrameIntervalType                  5
        dwFrameInterval( 0)            333333
        dwFrameInterval( 1)            500000
        dwFrameInterval( 2)            666666
        dwFrameInterval( 3)           1000000
        dwFrameInterval( 4)           2000000
      VideoStreaming Interface Descriptor:
        bLength                            46
        bDescriptorType                    36
        bDescriptorSubtype                  5 (FRAME_UNCOMPRESSED)
        bFrameIndex                         5
        bmCapabilities                   0x00
          Still image unsupported
        wWidth                            160
        wHeight                           120
        dwMinBitRate                   192000
        dwMaxBitRate                  1152000
        dwMaxVideoFrameBufferSize       38400
        dwDefaultFrameInterval         333333
        bFrameIntervalType                  5
        dwFrameInterval( 0)            333333
        dwFrameInterval( 1)            500000
        dwFrameInterval( 2)            666666
        dwFrameInterval( 3)           1000000
        dwFrameInterval( 4)           2000000
      VideoStreaming Interface Descriptor:
        bLength                             6
        bDescriptorType                    36
        bDescriptorSubtype                 13 (COLORFORMAT)
        bColorPrimaries                     1 (BT.709,sRGB)
        bTransferCharacteristics            1 (BT.709)
        bMatrixCoefficients                 4 (SMPTE 170M (BT.601))
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        1
      bAlternateSetting       1
      bNumEndpoints           1
      bInterfaceClass        14 Video
      bInterfaceSubClass      2 Video Streaming
      bInterfaceProtocol      0 
      iInterface              0 
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            5
          Transfer Type            Isochronous
          Synch Type               Asynchronous
          Usage Type               Data
        wMaxPacketSize     0x0080  1x 128 bytes
        bInterval               1
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        1
      bAlternateSetting       2
      bNumEndpoints           1
      bInterfaceClass        14 Video
      bInterfaceSubClass      2 Video Streaming
      bInterfaceProtocol      0 
      iInterface              0 
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            5
          Transfer Type            Isochronous
          Synch Type               Asynchronous
          Usage Type               Data
        wMaxPacketSize     0x0100  1x 256 bytes
        bInterval               1
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        1
      bAlternateSetting       3
      bNumEndpoints           1
      bInterfaceClass        14 Video
      bInterfaceSubClass      2 Video Streaming
      bInterfaceProtocol      0 
      iInterface              0 
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            5
          Transfer Type            Isochronous
          Synch Type               Asynchronous
          Usage Type               Data
        wMaxPacketSize     0x0320  1x 800 bytes
        bInterval               1
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        1
      bAlternateSetting       4
      bNumEndpoints           1
      bInterfaceClass        14 Video
      bInterfaceSubClass      2 Video Streaming
      bInterfaceProtocol      0 
      iInterface              0 
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            5
          Transfer Type            Isochronous
          Synch Type               Asynchronous
          Usage Type               Data
        wMaxPacketSize     0x0b20  2x 800 bytes
        bInterval               1
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        1
      bAlternateSetting       5
      bNumEndpoints           1
      bInterfaceClass        14 Video
      bInterfaceSubClass      2 Video Streaming
      bInterfaceProtocol      0 
      iInterface              0 
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            5
          Transfer Type            Isochronous
          Synch Type               Asynchronous
          Usage Type               Data
        wMaxPacketSize     0x1320  3x 800 bytes
        bInterval               1
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        1
      bAlternateSetting       6
      bNumEndpoints           1
      bInterfaceClass        14 Video
      bInterfaceSubClass      2 Video Streaming
      bInterfaceProtocol      0 
      iInterface              0 
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            5
          Transfer Type            Isochronous
          Synch Type               Asynchronous
          Usage Type               Data
        wMaxPacketSize     0x1400  3x 1024 bytes
        bInterval               1
can't get device qualifier: Operation not permitted
can't get debug descriptor: Operation not permitted
cannot read device status, Operation not permitted (1)

taoX at lande:~$ luvcview -l
luvcview 0.2.4

SDL information:
  Video driver: x11
  A window manager is available
Device information:
  Device path:  /dev/video0
Stream settings:
  Frame format: YUYV (MJPG is not supported by device)
  Frame size:   640x480
  Frame rate:   30 fps
Available controls of device 'Camera 1' (Type 1=Integer 2=Boolean 3=Menu 4=Button)
V4L2_CID_BASE         (predefined controls):
 index:9963776    name:Brightness                       type:1 min:-64   max:64    step:1     def:0     now:0
 index:9963777    name:Contrast                         type:1 min:0     max:95    step:1     def:25    now:25
 index:9963778    name:Saturation                       type:1 min:0     max:128   step:1     def:64    now:64
 index:9963779    name:Hue                              type:1 min:-40   max:40    step:1     def:0     now:0
 index:9963788    name:White Balance Temperature, Auto  type:2 min:0     max:1     step:1     def:1     now:1
 index:9963792    name:Gamma                            type:1 min:72    max:500   step:1     def:100   now:100
V4L2_CID_PRIVATE_BASE (driver specific controls):

max 64, min -64, step 1, default 0 ,current 1
Control name:Brightness set to value:1
max 95, min 0, step 1, default 25 ,current 24
Control name:Contrast set to value:24
max 128, min 0, step 1, default 64 ,current 65
Control name:Saturation set to value:65
ioctl querycontrol error: Invalid argument
Set Gain down error
ioctl querycontrol error: Invalid argument
Set Gain down error
ioctl querycontrol error: Invalid argument
Set Gain up error
ioctl querycontrol error: Invalid argument
Set Gain up error
max 7, min 0, step 1, default 3 ,current 4
Control name:Sharpness set to value:4
max 7, min 0, step 1, default 3 ,current 3
Control name:Sharpness set to value:3
max 500, min 72, step 1, default 100 ,current 101
Control name:Gamma set to value:101
max 500, min 72, step 1, default 100 ,current 102
Control name:Gamma set to value:102
ioctl querycontrol error: Invalid argument
Set Pan up error
ioctl querycontrol error: Invalid argument
Set Pan up error
ioctl querycontrol error: Invalid argument
Set Tilt down error
ioctl querycontrol error: Invalid argument
Set Tilt down error
ioctl querycontrol error: Invalid argument
Reset pan error
ioctl querycontrol error: Invalid argument
Reset pan error
ioctl querycontrol error: Invalid argument
Reset tilt error
ioctl querycontrol error: Invalid argument
Reset tilt error
Current light frequency filter: NoFliker
Current light frequency filter: 50Hz
Current light frequency filter: 60Hz
ioctl querycontrol error: Invalid argument
Set Absolute Exposure up error
ioctl querycontrol error: Invalid argument
Set Absolute Exposure down error
ioctl querycontrol error: Invalid argument
Set Absolute Exposure down error
Set Auto Exposure on error
Set Auto Exposure on error
ioctl querycontrol error: Invalid argument
Set Balance Temperature up error
ioctl querycontrol error: Invalid argument
Set Balance Temperature up error
ioctl querycontrol error: Invalid argument
Set Balance Temperature down error
ioctl querycontrol error: Invalid argument
Set Balance Temperature down error
ioctl querycontrol error: Invalid argument
Set Balance Temperature down error
Auto Balance set to 1
Auto Balance set to 1
Auto Balance set to 0
Auto Balance set to 0
Auto Balance set to 0
get picture !
avi recording started
frame rate: 33     
avi recording stopped (14s)
ioctl querycontrol error: Invalid argument
reset Gain error
ioctl querycontrol error: Invalid argument
reset pantilt error

Cleanup done. Exiting ...

taoX at lande:~$ uvccapture -v
Using videodevice: /dev/video0
Saving images to: snap.jpg
Image size: 320x240
Taking snapshot every 0 seconds
Taking images using mmap
Unable to set format: 22.
 Init v4L2 failed !! exit fatal 


From laurent.pinchart at skynet.be  Mon Jun  8 00:41:05 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Mon, 8 Jun 2009 00:41:05 +0200
Subject: [Linux-uvc-devel] [PATCH] uvcvideo: workaround invalid formats
	exposed by buggy webcam
In-Reply-To: <200906041423.18804.herton@mandriva.com.br>
References: <200906031802.34532.herton@mandriva.com.br>
	<200906041241.03791.laurent.pinchart@skynet.be>
	<200906041423.18804.herton@mandriva.com.br>
Message-ID: <200906080041.06150.laurent.pinchart@skynet.be>

Hi Herton,

On Thursday 04 June 2009 19:23:17 Herton Ronaldo Krzesinski wrote:
> Em Quinta-feira 04 Junho 2009, ?s 07:41:03, Laurent Pinchart escreveu:
> > Hi Herton,
> >
> > On Wednesday 03 June 2009 23:02:33 Herton Ronaldo Krzesinski wrote:
> > > Fix this by not failing entirely if we have found an invalid format, as
> > > we can still have a valid format. The initial problem and solution
> > > (patch) was debugged and done by Clevo (probably by Michael Wang),
> > > which uses the affected webcam in one of their laptops. I'm forwarding
> > > their fix plus additional code that I noticed to be needed for generic
> > > cases that decrements properly streaming->nformats and checks later if
> > > we really found at least one valid format, and if there were really no
> > > valid formats we make sure then to return with error.
> >
> > What about modifying uvc_parse_streaming() to stop parsing the interface
> > descriptors when it encounters a non CS Interface descriptor instead ?
> > Something like
>
> Yep, it works for me too and it's better since then we don't allocate extra
> memory that we don't use for streaming->format
>
> But your solution stops to count formats at the first buffer[1] !=
> CS_INTERFACE, is it possible that CS_INTERFACE and ! CS_INTERFACE are
> mixed? (!= CS_INTERFACE not always the last one) In this case is better to
> continue, like patch below:

In theory, yes, the device can be as buggy as you want :-) Don't forget that 
we're dealing with UVC devices here, so I don't expect buggy devices to be the 
norm. I'd rather apply my patch, as it's less intrusive, and deal with other 
buggy devices later if needed.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Mon Jun  8 01:02:46 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Mon, 8 Jun 2009 01:02:46 +0200
Subject: [Linux-uvc-devel] Minoru3D Webcam
In-Reply-To: <b58e52da0906060610v4441c725v48de2c9a482b632f@mail.gmail.com>
References: <b58e52da0906060610v4441c725v48de2c9a482b632f@mail.gmail.com>
Message-ID: <200906080102.46335.laurent.pinchart@skynet.be>

Hi Giacomo,

On Saturday 06 June 2009 15:10:17 SpiglerG wrote:
> Hi.
> I've just bought a Minoru3D webcam (which recently got supported by
> UVCVideo) to get a nice stereo platform, but I can't manage to get it
> working because of the known-problems about "VIDIOC_STREAMON error 28, No
> space left on device", even thought I'm using the uvcvideo-50059a68c503
> (last) driver.
> Actually I've managed to get it working with a modified version of
> fswebcam, and only at 320x240, but I can't make it work with OpenCV: I
> can't change resolution to 320x240 (default is 640x480), and at default
> resolutions it fails (it's probably trying to get images @ 30fps).
> UVC currently supports acquisition up to 320x240 @ 30fps, and 640x480
> @15fps, but default specs are 640x480 @ 30fps, which gets usb bandwidth
> errors.
> Do you know any possible fixes to have it work with OpenCV (simultaneous
> streaming),

I'm not too familiar with OpenCV. If it doesn't provide a way to change the 
frame rate, I think you can try to cast your CvCapture object to a 
CvCaptureCAM_V4L object and call the VIDIOC_S_PARM ioct directly on 
CvCaptureCAM_V4L::deviceHandle.

> or to set 15fps as default for such resolution with this webcam
> modifying UVC driver (at least for personal usage)?

Assuming OpenCV calls VIDIOC_S_PARM, it should be easy to modify the ioctl 
handler and overwrite the requested frame rate with 15fps.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Mon Jun  8 01:06:07 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Mon, 8 Jun 2009 01:06:07 +0200
Subject: [Linux-uvc-devel] UVC device : 04f2:b070 Chicony Electronics
	Co., Ltd
In-Reply-To: <714554a0906071321w18957c84je7a871691ba132fd@mail.gmail.com>
References: <714554a0906071310k77851cd4r587ada6c0a6432a3@mail.gmail.com>
	<714554a0906071321w18957c84je7a871691ba132fd@mail.gmail.com>
Message-ID: <200906080106.07339.laurent.pinchart@skynet.be>

Hi,

On Sunday 07 June 2009 22:21:20 Taor Mina wrote:
> Hi, sorry my English, it's very bad.

No worries.

> I've got a Toshiba Satellite L350D (AMD Athlon X2 64bit - Ubuntu 8.10)
>
> My video device is:
>   Device ID: 04f2:b070
>   Name: ???
>   Manufacturer: Chicony Electronics Co., Ltd
>   Status: Device works with issues
>
> In attach my test whit
>   lsusb -d 04f2:b070 -v
>   luvcview -l
>   uvccapture -v

Your camera supports YUYV only. Try uvccapture -v -m

Regards,

Laurent Pinchart



From spiglerg at gmail.com  Mon Jun  8 07:32:53 2009
From: spiglerg at gmail.com (SpiglerG)
Date: Mon, 8 Jun 2009 07:32:53 +0200
Subject: [Linux-uvc-devel] Minoru3D Webcam
In-Reply-To: <200906080102.46335.laurent.pinchart@skynet.be>
References: <b58e52da0906060610v4441c725v48de2c9a482b632f@mail.gmail.com>
	<200906080102.46335.laurent.pinchart@skynet.be>
Message-ID: <b58e52da0906072232q75f499e1o2a6905812f7fbbc0@mail.gmail.com>

Thank you verey much for your answer. Anyway, opencv has functions to
adjust such parameters; they just don't work most of times.
I'll try your mods, but I've also managed to convert some raw v4l2
code to a wrapped c++ library, providing a neat interface with opencv
bindings. Its a pretty useful class for quick coding of a video
capture application, hence I'm going to publish it opensource; I think
it would be very useful for people like me, who need simple interfaces
to manipulate video streams without having to study whole v4l2 apis.
:)

Giacomo


On Monday, June 8, 2009, Laurent Pinchart <laurent.pinchart at skynet.be> wrote:
> Hi Giacomo,
>
> On Saturday 06 June 2009 15:10:17 SpiglerG wrote:
>> Hi.
>> I've just bought a Minoru3D webcam (which recently got supported by
>> UVCVideo) to get a nice stereo platform, but I can't manage to get it
>> working because of the known-problems about "VIDIOC_STREAMON error 28, No
>> space left on device", even thought I'm using the uvcvideo-50059a68c503
>> (last) driver.
>> Actually I've managed to get it working with a modified version of
>> fswebcam, and only at 320x240, but I can't make it work with OpenCV: I
>> can't change resolution to 320x240 (default is 640x480), and at default
>> resolutions it fails (it's probably trying to get images @ 30fps).
>> UVC currently supports acquisition up to 320x240 @ 30fps, and 640x480
>> @15fps, but default specs are 640x480 @ 30fps, which gets usb bandwidth
>> errors.
>> Do you know any possible fixes to have it work with OpenCV (simultaneous
>> streaming),
>
> I'm not too familiar with OpenCV. If it doesn't provide a way to change the
> frame rate, I think you can try to cast your CvCapture object to a
> CvCaptureCAM_V4L object and call the VIDIOC_S_PARM ioct directly on
> CvCaptureCAM_V4L::deviceHandle.
>
>> or to set 15fps as default for such resolution with this webcam
>> modifying UVC driver (at least for personal usage)?
>
> Assuming OpenCV calls VIDIOC_S_PARM, it should be easy to modify the ioctl
> handler and overwrite the requested frame rate with 15fps.
>
> Best regards,
>
> Laurent Pinchart
>
>


From laurent.pinchart at skynet.be  Mon Jun  8 14:57:53 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Mon, 8 Jun 2009 14:57:53 +0200
Subject: [Linux-uvc-devel] Minoru3D Webcam
In-Reply-To: <b58e52da0906072232q75f499e1o2a6905812f7fbbc0@mail.gmail.com>
References: <b58e52da0906060610v4441c725v48de2c9a482b632f@mail.gmail.com>
	<200906080102.46335.laurent.pinchart@skynet.be>
	<b58e52da0906072232q75f499e1o2a6905812f7fbbc0@mail.gmail.com>
Message-ID: <200906081457.54385.laurent.pinchart@skynet.be>

Hi Giacomo,

On Monday 08 June 2009 07:32:53 SpiglerG wrote:
> Thank you verey much for your answer. Anyway, opencv has functions to
> adjust such parameters; they just don't work most of times.
> I'll try your mods, but I've also managed to convert some raw v4l2
> code to a wrapped c++ library, providing a neat interface with opencv
> bindings. Its a pretty useful class for quick coding of a video
> capture application, hence I'm going to publish it opensource;

I can only encourage you to do so. I'll be very happy if open-source projects 
spring from the uvcvideo driver.

> I think it would be very useful for people like me, who need simple
> interfaces to manipulate video streams without having to study whole v4l2
> apis.

Best regards,

Laurent Pinchart



From spiglerg at gmail.com  Mon Jun  8 15:07:22 2009
From: spiglerg at gmail.com (SpiglerG)
Date: Mon, 8 Jun 2009 15:07:22 +0200
Subject: [Linux-uvc-devel] Minoru3D Webcam
In-Reply-To: <200906081457.54385.laurent.pinchart@skynet.be>
References: <b58e52da0906060610v4441c725v48de2c9a482b632f@mail.gmail.com> 
	<200906080102.46335.laurent.pinchart@skynet.be>
	<b58e52da0906072232q75f499e1o2a6905812f7fbbc0@mail.gmail.com> 
	<200906081457.54385.laurent.pinchart@skynet.be>
Message-ID: <b58e52da0906080607l463770epb121a4b4a783bab0@mail.gmail.com>

I've almost done it. :)
The library is very simple.
I'll release it here http://code.google.com/p/libv4l2cam/ by a few hours at
most, in the while this is part of the class description.

class Camera {
public:
  int width;
  int height;
  int fps;

  unsigned char *data;

  Camera(const char *name, int w, int h, int fps=30);
  ~Camera();

  unsigned char *Update(unsigned int t=100); //better  (t=1ms, in usecs)

#ifdef USE_OPENCV
  void toIplImage(IplImage *im);
#endif


  int minBrightness();
  int maxBrightness();
  int defaultBrightness();
  int minContrast();
  int maxContrast();
  int defaultContrast();
  int minSaturation();
  int maxSaturation();
  int defaultSaturation();
  int minHue();
  int maxHue();
  int defaultHue();
  bool isHueAuto();
  int minSharpness();
  int maxSharpness();
  int defaultSharpness();

  int setBrightness(int v);
  int setContrast(int v);
  int setSaturation(int v);
  int setHue(int v);
  int setHueAuto(bool v);
  int setSharpness(int v);

};


However i'm experiencing a small delay between Minoru left and right images.
It may be a problem with my interface (as I have 1ms waiting time on frame
update). I'll try to sync multiple cams from this interface.

Giacomo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090608/6950427e/attachment.html>

From spiglerg at gmail.com  Mon Jun  8 16:18:10 2009
From: spiglerg at gmail.com (SpiglerG)
Date: Mon, 8 Jun 2009 16:18:10 +0200
Subject: [Linux-uvc-devel] Minoru3D Webcam
In-Reply-To: <b58e52da0906080607l463770epb121a4b4a783bab0@mail.gmail.com>
References: <b58e52da0906060610v4441c725v48de2c9a482b632f@mail.gmail.com> 
	<200906080102.46335.laurent.pinchart@skynet.be>
	<b58e52da0906072232q75f499e1o2a6905812f7fbbc0@mail.gmail.com> 
	<200906081457.54385.laurent.pinchart@skynet.be>
	<b58e52da0906080607l463770epb121a4b4a783bab0@mail.gmail.com>
Message-ID: <b58e52da0906080718y24d0ee5fsb44d3619bfc553fe@mail.gmail.com>

> I'll release it here http://code.google.com/p/libv4l2cam/ by a few hours
> at most, in the while this is part of the class description.
>

Code is synced and ready on svn.

Giacomo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090608/f0992399/attachment.html>

From herton at mandriva.com.br  Mon Jun  8 16:35:15 2009
From: herton at mandriva.com.br (Herton Ronaldo Krzesinski)
Date: Mon, 8 Jun 2009 11:35:15 -0300
Subject: [Linux-uvc-devel] [PATCH] uvcvideo: workaround invalid formats
	exposed by buggy webcam
In-Reply-To: <200906080041.06150.laurent.pinchart@skynet.be>
References: <200906031802.34532.herton@mandriva.com.br>
	<200906041423.18804.herton@mandriva.com.br>
	<200906080041.06150.laurent.pinchart@skynet.be>
Message-ID: <200906081135.16166.herton@mandriva.com.br>

Em Domingo 07 Junho 2009, ?s 19:41:05, Laurent Pinchart escreveu:
> Hi Herton,
> 
> On Thursday 04 June 2009 19:23:17 Herton Ronaldo Krzesinski wrote:
> > Em Quinta-feira 04 Junho 2009, ?s 07:41:03, Laurent Pinchart escreveu:
> > > Hi Herton,
> > >
> > > On Wednesday 03 June 2009 23:02:33 Herton Ronaldo Krzesinski wrote:
> > > > Fix this by not failing entirely if we have found an invalid format, as
> > > > we can still have a valid format. The initial problem and solution
> > > > (patch) was debugged and done by Clevo (probably by Michael Wang),
> > > > which uses the affected webcam in one of their laptops. I'm forwarding
> > > > their fix plus additional code that I noticed to be needed for generic
> > > > cases that decrements properly streaming->nformats and checks later if
> > > > we really found at least one valid format, and if there were really no
> > > > valid formats we make sure then to return with error.
> > >
> > > What about modifying uvc_parse_streaming() to stop parsing the interface
> > > descriptors when it encounters a non CS Interface descriptor instead ?
> > > Something like
> >
> > Yep, it works for me too and it's better since then we don't allocate extra
> > memory that we don't use for streaming->format
> >
> > But your solution stops to count formats at the first buffer[1] !=
> > CS_INTERFACE, is it possible that CS_INTERFACE and ! CS_INTERFACE are
> > mixed? (!= CS_INTERFACE not always the last one) In this case is better to
> > continue, like patch below:
> 
> In theory, yes, the device can be as buggy as you want :-) Don't forget that 
> we're dealing with UVC devices here, so I don't expect buggy devices to be the 
> norm. I'd rather apply my patch, as it's less intrusive, and deal with other 
> buggy devices later if needed.

Yep, for me it's fine also applying the less intrusive approach, lets hope we
don't get more buggy ones :)

> 
> Best regards,
> 
> Laurent Pinchart

--
[]'s
Herton


From laurent.pinchart at skynet.be  Mon Jun  8 16:56:01 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Mon, 8 Jun 2009 16:56:01 +0200
Subject: [Linux-uvc-devel] suyin crystal eye webcam 064e:a103 not working
In-Reply-To: <ebff8ece0906051336p3bdc01d6yb1b139ae1fe5d5bd@mail.gmail.com>
References: <ebff8ece0906051336p3bdc01d6yb1b139ae1fe5d5bd@mail.gmail.com>
Message-ID: <200906081656.01543.laurent.pinchart@skynet.be>

Hi Bruce,

On Friday 05 June 2009 22:36:55 bruce m beach wrote:
> Hello Laurent
>
> I replied to your last email but it 'mailman' is holding it because it is
> far too big.

Mailman was holding it but I've manually accepted the mail, so it made it 
through to the list.

> Just to give you an update on something that I realized:
> > What bothers me in the trace is
> >
> > May 28 10:53:28 lapsystemx kernel: uvcvideo: Dropping payload (out of
> > sync). May 28 10:53:59 lapsystemx last message repeated 30784 times
> > May 28 10:55:00 lapsystemx last message repeated 60992 times
> > May 28 10:55:24 lapsystemx last message repeated 24351 times
> >
> > The "out of sync" message means that the device didn't toggle the FID
> > bit. Quirk 0x10 is supposed to work around that by ignoring the FID bit.
>
> in the following bit of code from
>
> static void uvc_video_decode_end(...
>
>     if (data[1] & UVC_STREAM_EOF && buf->buf.bytesused != 0)
>                   -------------
>     {
>           uvc_trace(UVC_TRACE_FRAME, "Frame complete (EOF found).\n");
>           if (data[0] == len)
>               uvc_trace(UVC_TRACE_FRAME, "EOF in empty payload.\n");
>           buf->state = UVC_BUF_STATE_DONE;
>           if (video->dev->quirks & UVC_QUIRK_STREAM_NO_FID)
>       video->last_fid ^= UVC_STREAM_FID;
>     }
>
> last_fid is toggled ->only<- if the appropriate bit of data[1] is
> set (UVC_STREAM_EOF) which will never happen since UVC_STREAM_EOF
> is always zero (on the crystal eye webcam).

last_fid is also set in uvc_video_decode_start().

Here's what's supposed to happen with a UVC compliant device.

- The EOH bit is set in every packet.
- The SCR and PTS bits are usually set in every packets as well.
- The ERR, STI and RES bits should not be set.
- The EOF bit should be set for the last packet of a video frame.
- The FID bit should be toggled in the first packet of every video frame.

Your device always sets EOH, SCR and PTS. It never sets ERR, STI and RES. So 
good so far.

From the logs you sent me, the EOF bit is never set. This is wrong, but the 
driver tries to work around that by checking when the FID bit toggles in 
uvc_video_decode_start():

        /* Mark the buffer as done if we're at the beginning of a new frame.
         * End of frame detection is better implemented by checking the EOF
         * bit (FID bit toggling is delayed by one frame compared to the EOF
         * bit), but some devices don't set the bit at end of frame (and the
         * last payload can be lost anyway). We thus must check if the FID has
         * been toggled.
         *
         * stream->last_fid is initialized to -1, so the first isochronous
         * frame will never trigger an end of frame detection.
         *
         * Empty buffers (bytesused == 0) don't trigger end of frame detection
         * as it doesn't make sense to return an empty buffer. This also
         * avoids detecting end of frame conditions at FID toggling if the
         * previous payload had the EOF bit set.
         */
        if (fid != stream->last_fid && buf->buf.bytesused != 0) {
                uvc_trace(UVC_TRACE_FRAME, "Frame complete (FID bit "
                                "toggled).\n");
                buf->state = UVC_BUF_STATE_DONE;
                return -EAGAIN;
        }

(the code might be slightly different from the one you're using, I'm reworking 
part of the driver).

If the current FID bit is different from the last one, and if the current 
video buffer is not empty, the buffer is marked as done and the function 
returns -EAGAIN. The caller will move the buffer to the output queue, get a 
new buffer from the input queue and call uvc_video_decode_start() again. At 
that point, the following code should be triggered:

        /* Synchronize to the input stream by waiting for the FID bit to be
         * toggled when the the buffer state is not UVC_BUF_STATE_ACTIVE.
         * stream->last_fid is initialized to -1, so the first isochronous
         * frame will always be in sync.
         *
         * If the device doesn't toggle the FID bit, invert stream->last_fid
         * when the EOF bit is set to force synchronisation on the next
         * packet.
         */
        if (buf->state != UVC_BUF_STATE_ACTIVE) {
                if (fid == stream->last_fid) {
                        uvc_trace(UVC_TRACE_FRAME, "Dropping payload (out of "
                                "sync).\n");
                        if ((stream->dev->quirks & UVC_QUIRK_STREAM_NO_FID) &&
                            (data[1] & UVC_STREAM_EOF))
                                stream->last_fid ^= UVC_STREAM_FID;
                        return -ENODATA;
                }

                /* TODO: Handle PTS and SCR. */
                buf->state = UVC_BUF_STATE_ACTIVE;
        }

The buffer being freshly dequeued, it's state will not be 
UVC_BUF_STATE_ACTIVE. The FID bit being different than the last stored value 
(otherwise the first call to uvc_video_decode_start() wouldn't have returned -
EAGAIN in the first place), the buffer state is set to UVC_BUF_STATE_ACTIVE 
and the function continues with

        stream->last_fid = fid;

which effectively toggles the stored FID value.

If the buffer gets filled with video data before the FID bit is toggled, 
uvc_video_decode_data() will mark the buffer as done and the caller will 
process a new buffer. The next call to uvc_video_decode_start() will then drop 
all packets with "Dropping payload (out of sync)." until the FID bit set by 
the device is toggled. This seems to never happen in your case.

If the camera doesn't set the EOF bit and doesn't toggle the FID bit there's 
very little I can do. Without any frame boundary information the driver can't 
synchronize itself to the video stream. I'm really puzzled by how this camera 
can work at all. Your last e-mail showed that it toggled the FID bit once from 
0 to 1 and left it at 1 forever after. Is my understanding correct ?

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Mon Jun  8 16:57:19 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Mon, 8 Jun 2009 16:57:19 +0200
Subject: [Linux-uvc-devel] [PATCH] uvcvideo: workaround invalid formats
	exposed by buggy webcam
In-Reply-To: <200906081135.16166.herton@mandriva.com.br>
References: <200906031802.34532.herton@mandriva.com.br>
	<200906080041.06150.laurent.pinchart@skynet.be>
	<200906081135.16166.herton@mandriva.com.br>
Message-ID: <200906081657.19384.laurent.pinchart@skynet.be>

Hi Herton,

On Monday 08 June 2009 16:35:15 Herton Ronaldo Krzesinski wrote:
> Em Domingo 07 Junho 2009, ?s 19:41:05, Laurent Pinchart escreveu:
> > Hi Herton,
> >
> > On Thursday 04 June 2009 19:23:17 Herton Ronaldo Krzesinski wrote:
> > > Em Quinta-feira 04 Junho 2009, ?s 07:41:03, Laurent Pinchart escreveu:
> > > > Hi Herton,
> > > >
> > > > On Wednesday 03 June 2009 23:02:33 Herton Ronaldo Krzesinski wrote:
> > > > > Fix this by not failing entirely if we have found an invalid
> > > > > format, as we can still have a valid format. The initial problem
> > > > > and solution (patch) was debugged and done by Clevo (probably by
> > > > > Michael Wang), which uses the affected webcam in one of their
> > > > > laptops. I'm forwarding their fix plus additional code that I
> > > > > noticed to be needed for generic cases that decrements properly
> > > > > streaming->nformats and checks later if we really found at least
> > > > > one valid format, and if there were really no valid formats we make
> > > > > sure then to return with error.
> > > >
> > > > What about modifying uvc_parse_streaming() to stop parsing the
> > > > interface descriptors when it encounters a non CS Interface
> > > > descriptor instead ? Something like
> > >
> > > Yep, it works for me too and it's better since then we don't allocate
> > > extra memory that we don't use for streaming->format
> > >
> > > But your solution stops to count formats at the first buffer[1] !=
> > > CS_INTERFACE, is it possible that CS_INTERFACE and ! CS_INTERFACE are
> > > mixed? (!= CS_INTERFACE not always the last one) In this case is better
> > > to continue, like patch below:
> >
> > In theory, yes, the device can be as buggy as you want :-) Don't forget
> > that we're dealing with UVC devices here, so I don't expect buggy devices
> > to be the norm. I'd rather apply my patch, as it's less intrusive, and
> > deal with other buggy devices later if needed.
>
> Yep, for me it's fine also applying the less intrusive approach, lets hope
> we don't get more buggy ones :)

Ok. I'll submit the less intrusive patch and I'll cross my fingers :-)

Best regards,

Laurent Pinchart



From ueno at unixuser.org  Tue Jun  9 15:23:35 2009
From: ueno at unixuser.org (Daiki Ueno)
Date: Tue, 09 Jun 2009 22:23:35 +0900
Subject: [Linux-uvc-devel] 1871:0306
Message-ID: <b4611ac7-0ec1-45af-8193-05c8eb332b1a@broken.deisui.org>

Hi,

I bought a new web camera whose USB ID is 1871:0306.  After a quick
search, I found a couple of threads mentioning the camera and a patch
(*) was even proposed.

http://article.gmane.org/gmane.linux.drivers.uvc.devel/2683
http://article.gmane.org/gmane.linux.drivers.uvc.devel/2904
http://article.gmane.org/gmane.linux.drivers.uvc.devel/2909 (*)

I've confirmed that the patch works fine here with linux 2.6.29.  Is
there any chance that it will be incorporated in the future releases?

Regards,
-- 
Daiki Ueno


From malte.gell at gmx.de  Tue Jun  9 16:07:28 2009
From: malte.gell at gmx.de (Malte Gell)
Date: Tue, 09 Jun 2009 16:07:28 +0200
Subject: [Linux-uvc-devel] No working microphone with usb webcam,
	possible solution
Message-ID: <4A2E6CA0.7030904@gmx.de>

Hi there,

just a hint for folks who may need it... The USB microphone of my
Philips SPC 620 NC never worked with Linux. I could never use the mic
with Skype.

A few days agos, when I installed a dual boot system with Windows Vista
I noticed something interesting: after installing the Windows drivers
and using the cam/mic with Skype under Windows it suddenly started to
work under Linux as well!

My guess is, the Windows driver loads necessary firmware into the camera
that makes the microphone work under Linux.

So, if you have a (USB) webcam and its microphone does not work with
Linux I would suggest to use the cam under Windows with the Windows
driver it may help to make the cam work under Linux.

Malte


From laurent.pinchart at skynet.be  Tue Jun  9 17:46:27 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Tue, 9 Jun 2009 17:46:27 +0200
Subject: [Linux-uvc-devel] 1871:0306
In-Reply-To: <b4611ac7-0ec1-45af-8193-05c8eb332b1a@broken.deisui.org>
References: <b4611ac7-0ec1-45af-8193-05c8eb332b1a@broken.deisui.org>
Message-ID: <200906091746.29074.laurent.pinchart@skynet.be>

Hi Daiki,

On Tuesday 09 June 2009 15:23:35 Daiki Ueno wrote:
> Hi,
>
> I bought a new web camera whose USB ID is 1871:0306.  After a quick
> search, I found a couple of threads mentioning the camera and a patch
> (*) was even proposed.
>
> http://article.gmane.org/gmane.linux.drivers.uvc.devel/2683
> http://article.gmane.org/gmane.linux.drivers.uvc.devel/2904
> http://article.gmane.org/gmane.linux.drivers.uvc.devel/2909 (*)
>
> I've confirmed that the patch works fine here with linux 2.6.29.  Is
> there any chance that it will be incorporated in the future releases?

I've applied the patch to the uvcvideo repository, and I'll push it upstream 
today.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Tue Jun  9 18:14:54 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Tue, 9 Jun 2009 18:14:54 +0200
Subject: [Linux-uvc-devel] No working microphone with usb webcam,
	possible solution
In-Reply-To: <4A2E6CA0.7030904@gmx.de>
References: <4A2E6CA0.7030904@gmx.de>
Message-ID: <200906091814.54436.laurent.pinchart@skynet.be>

Hi Malte,

On Tuesday 09 June 2009 16:07:28 Malte Gell wrote:
> Hi there,
>
> just a hint for folks who may need it... The USB microphone of my
> Philips SPC 620 NC never worked with Linux. I could never use the mic
> with Skype.
>
> A few days agos, when I installed a dual boot system with Windows Vista
> I noticed something interesting: after installing the Windows drivers
> and using the cam/mic with Skype under Windows it suddenly started to
> work under Linux as well!
>
> My guess is, the Windows driver loads necessary firmware into the camera
> that makes the microphone work under Linux.
>
> So, if you have a (USB) webcam and its microphone does not work with
> Linux I would suggest to use the cam under Windows with the Windows
> driver it may help to make the cam work under Linux.

Thanks for the report. Have you installed a Philips-specific driver or did you 
use the stock Windows UVC driver ?

Best regards,

Laurent Pinchart



From brucembeach at gmail.com  Tue Jun  9 19:12:28 2009
From: brucembeach at gmail.com (bruce m beach)
Date: Tue, 9 Jun 2009 10:12:28 -0700
Subject: [Linux-uvc-devel] suyin crystal eye webcam 064e:a103 not working
Message-ID: <ebff8ece0906091012k31ed91d0xd239da4d6fe3bf4d@mail.gmail.com>

Hello Laurent

> > Just to give you an update on something that I realized:
> > > What bothers me in the trace is
> > >

[snip] (and saved to a file called payload_header_info)

...

[unsnip]

> If the camera doesn't set the EOF bit and doesn't toggle the FID bit
> there's very little I can do. Without any frame boundary information
> the driver can't synchronize itself to the video stream. I'm really
> puzzled by how this camera can work at all. Your last e-mail showed
> that it toggled the FID bit once from 0 to 1 and left it at 1 forever
> after. Is my understanding correct ?

100% correct. But don't despair of the republic just yet. Right now
the best you can do is just give me your insights and suggestions. I'm
going to continue working on this thing. I currently believe that it
is a UVC-compliant device (complete with working FID and EOF bits) but
that it is not being set up correctly and is streaming in a mode that
is for diagnostics or some undocumented mode. I spent a couple of days
documenting the lsusb listing and everything points to it being
UVC-compliant. Now what I would really like to know is if I'm right
about the following:

  If there is a stream of mjpeg payloads coming in, whether or not
we can sync them, we still should be able to detect things like

            M_SOF0, M_SOI, M_EOI ...

in the stream, yet  when I scan the packets I get messages like

                lapsystemx kernel: uvcvideo: doing scan
                lapsystemx last message repeated 4360 times

"scan" just searches any packet greater than the header size
(typically 12) and if it finds 0xff it prints out the preceding
and following byte. (in case there is some endianess lurking about)
I can't believe that 4360 payloads come in whithout any jpeg
information at all. If this is the case what are these packets?
Are there other quick tests that I could try in case the device
is saying that it is putting out mjpeg packets but is really putting
out another format? The other thing I am wondering is what is the
format of the *.raw files that luvcview creates. Are they more or
less jpeg files (assuming this particular case of a webcam doing
mjepg streaming ) If I toggle the video->last_fid every time a packet
comes in it gives me a convenient way of sending this data to
user-land and luvcview then can write the *.raw files which I can
the examine so currently information on these files is helpful.

Regards Bruce


From malte.gell at gmx.de  Tue Jun  9 23:24:21 2009
From: malte.gell at gmx.de (Malte Gell)
Date: Tue, 9 Jun 2009 23:24:21 +0200
Subject: [Linux-uvc-devel] No working microphone with usb webcam,
	possible solution
In-Reply-To: <200906091814.54436.laurent.pinchart@skynet.be>
References: <4A2E6CA0.7030904@gmx.de>
	<200906091814.54436.laurent.pinchart@skynet.be>
Message-ID: <200906092324.22502.malte.gell@gmx.de>


Laurent Pinchart <laurent.pinchart at skynet.be> wrote

> Hi Malte,
>
> On Tuesday 09 June 2009 16:07:28 Malte Gell wrote:
> > Hi there,
> >
> > just a hint for folks who may need it... The USB microphone of my
> > Philips SPC 620 NC never worked with Linux. I could never use the mic
> > with Skype.
> >
> > A few days agos, when I installed a dual boot system with Windows Vista
> > I noticed something interesting: after installing the Windows drivers
> > and using the cam/mic with Skype under Windows it suddenly started to
> > work under Linux as well!
> >
> > My guess is, the Windows driver loads necessary firmware into the camera
> > that makes the microphone work under Linux.
> >
> > So, if you have a (USB) webcam and its microphone does not work with
> > Linux I would suggest to use the cam under Windows with the Windows
> > driver it may help to make the cam work under Linux.

> Thanks for the report. Have you installed a Philips-specific driver or did
> you use the stock Windows UVC driver ?

Indeed, it was the driver from Philips. I don't think, a stock Windows driver 
can upload a firmware. I have not even tried the stock Windows driver, I just 
installed the Philips drivers.

Regards
Malte


From laurent.pinchart at skynet.be  Wed Jun 10 01:55:05 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Wed, 10 Jun 2009 01:55:05 +0200
Subject: [Linux-uvc-devel] suyin crystal eye webcam 064e:a103 not working
In-Reply-To: <ebff8ece0906091012k31ed91d0xd239da4d6fe3bf4d@mail.gmail.com>
References: <ebff8ece0906091012k31ed91d0xd239da4d6fe3bf4d@mail.gmail.com>
Message-ID: <200906100155.05881.laurent.pinchart@skynet.be>

Hi Bruce,

On Tuesday 09 June 2009 19:12:28 bruce m beach wrote:
>
> > If the camera doesn't set the EOF bit and doesn't toggle the FID bit
> > there's very little I can do. Without any frame boundary information
> > the driver can't synchronize itself to the video stream. I'm really
> > puzzled by how this camera can work at all. Your last e-mail showed
> > that it toggled the FID bit once from 0 to 1 and left it at 1 forever
> > after. Is my understanding correct ?
>
> 100% correct. But don't despair of the republic just yet. Right now
> the best you can do is just give me your insights and suggestions. I'm
> going to continue working on this thing. I currently believe that it
> is a UVC-compliant device (complete with working FID and EOF bits) but
> that it is not being set up correctly and is streaming in a mode that
> is for diagnostics or some undocumented mode.

I've learnt with time that all kinds of weird behaviours are possible. Vendors 
tend to be very imaginative when it comes to implementing bugs :-)

> I spent a couple of days documenting the lsusb listing and everything points
> to it being UVC-compliant. Now what I would really like to know is if I'm
> right about the following:
>
>   If there is a stream of mjpeg payloads coming in, whether or not
> we can sync them, we still should be able to detect things like
>
>             M_SOF0, M_SOI, M_EOI ...
>
> in the stream, yet  when I scan the packets I get messages like
>
>                 lapsystemx kernel: uvcvideo: doing scan
>                 lapsystemx last message repeated 4360 times
>
> "scan" just searches any packet greater than the header size
> (typically 12) and if it finds 0xff it prints out the preceding
> and following byte. (in case there is some endianess lurking about)
> I can't believe that 4360 payloads come in whithout any jpeg
> information at all. If this is the case what are these packets?

Good question. Could you dump them ? You could give usbmon a try to dump USB 
traffic.

> Are there other quick tests that I could try in case the device is saying
> that it is putting out mjpeg packets but is really putting out another
> format?

If the device outputs YUYV instead of MJPEG we'll really need a way to 
synchronize on frame boundaries. I'm not sure it's worth it trying to analyze 
the data format before getting proper synchronization information.

> The other thing I am wondering is what is the format of the *.raw files that
> luvcview creates. Are they more or less jpeg files (assuming this particular
> case of a webcam doing mjepg streaming)

I suppose they're just raw frames of data as received from the driver without 
any header.

> If I toggle the video->last_fid every time a packet comes in it gives me a
> convenient way of sending this data to user-land and luvcview then can write
> the *.raw files which I can the examine so currently information on these
> files is helpful.

Be careful that the "frame" rate could get quite high, and luvcview could then 
loose frames.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Wed Jun 10 01:56:04 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Wed, 10 Jun 2009 01:56:04 +0200
Subject: [Linux-uvc-devel] No working microphone with usb webcam,
	possible solution
In-Reply-To: <200906092324.22502.malte.gell@gmx.de>
References: <4A2E6CA0.7030904@gmx.de>
	<200906091814.54436.laurent.pinchart@skynet.be>
	<200906092324.22502.malte.gell@gmx.de>
Message-ID: <200906100156.05118.laurent.pinchart@skynet.be>

Hi Malte,

On Tuesday 09 June 2009 23:24:21 Malte Gell wrote:
> Laurent Pinchart <laurent.pinchart at skynet.be> wrote
>
> > Hi Malte,
> >
> > On Tuesday 09 June 2009 16:07:28 Malte Gell wrote:
> > > Hi there,
> > >
> > > just a hint for folks who may need it... The USB microphone of my
> > > Philips SPC 620 NC never worked with Linux. I could never use the mic
> > > with Skype.
> > >
> > > A few days agos, when I installed a dual boot system with Windows Vista
> > > I noticed something interesting: after installing the Windows drivers
> > > and using the cam/mic with Skype under Windows it suddenly started to
> > > work under Linux as well!
> > >
> > > My guess is, the Windows driver loads necessary firmware into the
> > > camera that makes the microphone work under Linux.
> > >
> > > So, if you have a (USB) webcam and its microphone does not work with
> > > Linux I would suggest to use the cam under Windows with the Windows
> > > driver it may help to make the cam work under Linux.
> >
> > Thanks for the report. Have you installed a Philips-specific driver or
> > did you use the stock Windows UVC driver ?
>
> Indeed, it was the driver from Philips. I don't think, a stock Windows
> driver can upload a firmware. I have not even tried the stock Windows
> driver, I just installed the Philips drivers.

Do you still have a copy of the USB descriptors before the firmware upgrade ? 
If so, could you compare it with the USB descriptors after the upgrade ?

Best regards,

Laurent Pinchart



From malte.gell at gmx.de  Wed Jun 10 16:19:31 2009
From: malte.gell at gmx.de (Malte Gell)
Date: Wed, 10 Jun 2009 16:19:31 +0200
Subject: [Linux-uvc-devel] No working microphone with usb webcam,
	possible solution
In-Reply-To: <200906100156.05118.laurent.pinchart@skynet.be>
References: <4A2E6CA0.7030904@gmx.de> <200906092324.22502.malte.gell@gmx.de>
	<200906100156.05118.laurent.pinchart@skynet.be>
Message-ID: <200906101619.31837.malte.gell@gmx.de>


Laurent Pinchart <laurent.pinchart at skynet.be> wrote

> > Indeed, it was the driver from Philips. I don't think, a stock Windows
> > driver can upload a firmware. I have not even tried the stock Windows
> > driver, I just installed the Philips drivers.

> Do you still have a copy of the USB descriptors before the firmware upgrade
> ? If so, could you compare it with the USB descriptors after the upgrade ?


Hmm.... how do I get these USB descriptors? In /var/log/messages or with 
lsusb?

Regards
Malte


From cemalettinkara at gmail.com  Thu Jun 11 10:23:25 2009
From: cemalettinkara at gmail.com (cemalettin kara)
Date: Thu, 11 Jun 2009 11:23:25 +0300
Subject: [Linux-uvc-devel] suyin 1.3 mp not listed
Message-ID: <bc11b44a0906110123se16188fwad32d16c1b04800f@mail.gmail.com>

hi, i have a suyin 1.3 mp webcam. lsub output is Bus 002 Device 002: ID
064e:a111 Suyin Corp. it works on linux kernel 2.6.26 and higher but view is
not fine.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090611/15bef5da/attachment.html>

From laurent.pinchart at skynet.be  Thu Jun 11 11:38:36 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Thu, 11 Jun 2009 11:38:36 +0200
Subject: [Linux-uvc-devel] suyin 1.3 mp not listed
In-Reply-To: <bc11b44a0906110123se16188fwad32d16c1b04800f@mail.gmail.com>
References: <bc11b44a0906110123se16188fwad32d16c1b04800f@mail.gmail.com>
Message-ID: <200906111138.36948.laurent.pinchart@skynet.be>

Hi,

On Thursday 11 June 2009 10:23:25 cemalettin kara wrote:
> hi, i have a suyin 1.3 mp webcam. lsub output is Bus 002 Device 002: ID
> 064e:a111 Suyin Corp. it works on linux kernel 2.6.26 and higher but view
> is not fine.

Could you please post the output of

lsusb -v -d 064e:a111

using usbutils 0.72 or newer (0.73+ preferred) ? Thanks.

What do you mean by "view is not fine" ?

Best regards,

Laurent Pinchart



From linux4michelle at tamay-dogan.net  Thu Jun 11 12:53:01 2009
From: linux4michelle at tamay-dogan.net (Michelle Konzack)
Date: Thu, 11 Jun 2009 12:53:01 +0200
Subject: [Linux-uvc-devel] The video device does not support the required
	video format
Message-ID: <20090611105301.GJ2523@tamay-dogan.net>

Hello,

I have a "Longsun L580" Dual-SIM/Dual-StandBy  cellphone  which  support
the Webcam mode und identify it self with:

    0e8d:0004   MediaTek MT6227 phone   MediaTek Inc

Even if all kernel modules are loaded, I can not get the stream  because
the error message:

    "The video device does not support the required video format"

----[ command 'luvcview -L' ]-------------------------------------------
luvcview 0.2.4

SDL information:
  Video driver: x11
  A window manager is available
Device information:
  Device path:  /dev/video0
/dev/video0 does not support read i/o
{ pixelformat = 'MJPG', description = 'MJPEG' }
{ discrete: width = 160, height = 120 }
        Time interval between frame: {min { 1/20 } .. max { 1/20 } / stepsize { 1/10000000 } },
{ discrete: width = 320, height = 240 }
        Time interval between frame: {min { 1/20 } .. max { 1/20 } / stepsize { 1/10000000 } },
------------------------------------------------------------------------

and /dev/video0 is created, if I connect the Webcom.  Also  I  am  using
the standard Debian Kernel and I am currently not able to compile my own
Kernel.

Linux michelle1 2.6.26-1-686 #1 SMP Sat Jan 10 18:29:31 UTC 2009 i686 GNU/Linux

Any suggestions?

----[ command 'lsusb -v -d 0e8d:0004' ]---------------------------------

Bus 001 Device 020: ID 0e8d:0004 MediaTek Inc.
Device Descriptor:
  bLength                18
  bDescriptorType         1
  bcdUSB               1.10
  bDeviceClass          239 Miscellaneous Device
  bDeviceSubClass         2 ?
  bDeviceProtocol         1 Interface Association
  bMaxPacketSize0         8
  idVendor           0x0e8d MediaTek Inc.
  idProduct          0x0004
  bcdDevice            1.00
  iManufacturer           6
  iProduct                7
  iSerial                 8
  bNumConfigurations      1
  Configuration Descriptor:
    bLength                 9
    bDescriptorType         2
    wTotalLength          231
    bNumInterfaces          2
    bConfigurationValue     1
    iConfiguration          0
    bmAttributes         0x80
      (Bus Powered)
    MaxPower              500mA
    Interface Association:
      bLength                 8
      bDescriptorType        11
      bFirstInterface         0
      bInterfaceCount         2
      bFunctionClass         14 Video
      bFunctionSubClass       3 Video Interface Collection
      bFunctionProtocol       0
      iFunction               1
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        0
      bAlternateSetting       0
      bNumEndpoints           1
      bInterfaceClass        14 Video
      bInterfaceSubClass      1 Video Control
      bInterfaceProtocol      0
      iInterface              1
      VideoControl Interface Descriptor:
        bLength                13
        bDescriptorType        36
        bDescriptorSubtype      1 (HEADER)
        bcdUVC               1.00
        wTotalLength           50
        dwClockFrequency        0.001000MHz
        bInCollection           1
        baInterfaceNr( 0)       1
      VideoControl Interface Descriptor:
        bLength                17
        bDescriptorType        36
        bDescriptorSubtype      2 (INPUT_TERMINAL)
        bTerminalID             1
        wTerminalType      0x0201 Camera Sensor
        bAssocTerminal          0
        iTerminal               2
        wObjectiveFocalLengthMin      0
        wObjectiveFocalLengthMax      0
        wOcularFocalLength            0
        bControlSize                  2
        bmControls           0x00000000
      VideoControl Interface Descriptor:
        bLength                 9
        bDescriptorType        36
        bDescriptorSubtype      3 (OUTPUT_TERMINAL)
        bTerminalID             2
        wTerminalType      0x0101 USB Streaming
        bAssocTerminal          0
        bSourceID               3
        iTerminal               3
      VideoControl Interface Descriptor:
        bLength                11
        bDescriptorType        36
        bDescriptorSubtype      5 (PROCESSING_UNIT)
      Warning: Descriptor too short
        bUnitID                 3
        bSourceID               1
        wMaxMultiplier          0
        bControlSize            2
        bmControls     0x00001540
          White Balance Temperature
          Backlight Compensation
          Power Line Frequency
          White Balance Temperature, Auto
        iProcessing             4
        bmVideoStandards     0x44
          PAL - 625/50
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x83  EP 3 IN
        bmAttributes            3
          Transfer Type            Interrupt
          Synch Type               None
          Usage Type               Data
        wMaxPacketSize     0x0010  1x 16 bytes
        bInterval               1
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        1
      bAlternateSetting       0
      bNumEndpoints           1
      bInterfaceClass        14 Video
      bInterfaceSubClass      2 Video Streaming
      bInterfaceProtocol      0
      iInterface              5
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            2
          Transfer Type            Bulk
          Synch Type               None
          Usage Type               Data
        wMaxPacketSize     0x0040  1x 64 bytes
        bInterval               0
        INTERFACE CLASS:  0e 24 01 01 7f 00 81 00 02 02 00 00 01 00
        INTERFACE CLASS:  0b 24 06 01 02 01 01 00 00 00 00
        INTERFACE CLASS:  26 24 07 01 00 a0 00 78 00 7c 94 00 00 fe eb 0d 00 00 c0 00 00 20 a1 07 00 00 20 a1 07 00 20 a1 07 00 00 00 00 00
        INTERFACE CLASS:  26 24 07 02 00 40 01 f0 00 80 94 00 00 00 ec 0d 00 00 c0 00 00 20 a1 07 00 00 20 a1 07 00 20 a1 07 00 00 00 00 00
        INTERFACE CLASS:  14 24 03 00 03 a0 00 78 00 40 01 f0 00 80 02 e0 01 02 03 02
        INTERFACE CLASS:  06 24 0d 00 00 00
cannot read device status, Operation not permitted (1)
------------------------------------------------------------------------


Thanks, Greetings and nice Day/Evening
    Michelle Konzack
    Systemadministrator
    Tamay Dogan Network
    Debian GNU/Linux Consultant

-- 
Linux-User #280138 with the Linux Counter, http://counter.li.org/
##################### Debian GNU/Linux Consultant #####################
<http://www.tamay-dogan.net/>                 Michelle Konzack
<http://www.can4linux.org/>                   Apt. 917
<http://www.flexray4linux.org/>               50, rue de Soultz
Jabber linux4michelle at jabber.ccc.de           67100 Strasbourg/France
IRC #Debian (irc.icq.com)                     Tel. DE: +49 177 9351947
ICQ #328449886                                Tel. FR: +33  6  61925193
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.pgp
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090611/57fd4581/attachment.pgp>

From laurent.pinchart at skynet.be  Thu Jun 11 17:02:36 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Thu, 11 Jun 2009 17:02:36 +0200
Subject: [Linux-uvc-devel] The video device does not support the
	required video format
In-Reply-To: <20090611105301.GJ2523@tamay-dogan.net>
References: <20090611105301.GJ2523@tamay-dogan.net>
Message-ID: <200906111702.36624.laurent.pinchart@skynet.be>

Hi Michelle,

On Thursday 11 June 2009 12:53:01 Michelle Konzack wrote:
> Hello,
>
> I have a "Longsun L580" Dual-SIM/Dual-StandBy  cellphone  which  support
> the Webcam mode und identify it self with:
>
>     0e8d:0004   MediaTek MT6227 phone   MediaTek Inc
>
> Even if all kernel modules are loaded, I can not get the stream  because
> the error message:
>
>     "The video device does not support the required video format"

Where do you get that error message from ? Your device supports MJPEG only, so 
you will need an application that supports MJPEG as well (luvcview does).

Best regards,

Laurent Pinchart



From linux4michelle at tamay-dogan.net  Fri Jun 12 08:44:50 2009
From: linux4michelle at tamay-dogan.net (Michelle Konzack)
Date: Fri, 12 Jun 2009 08:44:50 +0200
Subject: [Linux-uvc-devel] The video device does not support the
	required video format
In-Reply-To: <200906111702.36624.laurent.pinchart@skynet.be>
References: <20090611105301.GJ2523@tamay-dogan.net>
	<200906111702.36624.laurent.pinchart@skynet.be>
Message-ID: <20090612064450.GB21431@tamay-dogan.net>

Hi Laurent,

Am 2009-06-11 17:02:36, schrieb Laurent Pinchart:
> Where do you get that error message from ?

Ekiga and VLC

> Your device supports MJPEG only, so 
> you will need an application that supports MJPEG as well (luvcview does).

...and no, luvcview does not work.  :-(
I have already tried to capture the MJPEG stream.

> 
> Best regards,
> 
> Laurent Pinchart


Thanks, Greetings and nice Day/Evening
    Michelle Konzack

-- 
Linux-User #280138 with the Linux Counter, http://counter.li.org/
##################### Debian GNU/Linux Consultant #####################
<http://www.tamay-dogan.net/>                 Michelle Konzack
<http://www.can4linux.org/>                   Apt. 917
<http://www.flexray4linux.org/>               50, rue de Soultz
Jabber linux4michelle at jabber.ccc.de           67100 Strasbourg/France
IRC #Debian (irc.icq.com)                     Tel. DE: +49 177 9351947
ICQ #328449886                                Tel. FR: +33  6  61925193
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.pgp
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090612/dd7a62ff/attachment.pgp>

From lameventanas at yahoo.com  Sun Jun 14 02:18:11 2009
From: lameventanas at yahoo.com (Frito Lay)
Date: Sat, 13 Jun 2009 17:18:11 -0700 (PDT)
Subject: [Linux-uvc-devel] support for 05ca:183a
Message-ID: <977967.31602.qm@web111907.mail.gq1.yahoo.com>

> On Saturday 21 February 2009 19:58:02 Pivo wrote:
> > Hi Laurent,
> > I have the same webcam, the same problems than petr but the problem is
> > not solve and I think you didn't get the answers you wanted.

I have the same problem.  My webcam is embedded in my Sony laptop (FZ series), it has the same USB id.
Just tried the uvcvideo driver included in kernel 2.6.30, and the problem persists.

> > > Hi Petr,
> > >
> > > On Monday 10 November 2008, Petr Men??k wrote:
> > > > hi,
> > > >
> > > > i found interesting news. my camera will change its resolution, but
> > > > only to 640x480 and 1280x1024 correctly. I was astonished when high
> > > > resolution worked, i did not expect that. I got working svn version
> > > > of luvcview, but really lower resolutions are still wrong in that
> > > > also.
> > >
> > > Could you please send me the USB descriptors of your camera ? You can
> > > retrieve them with 'lsusb -v'.
> >
> > Bus 001 Device 002: ID 05ca:183b Ricoh Co., Ltd
> > Device Descriptor:
> >   bLength                18
> >   bDescriptorType         1
> >   bcdUSB               2.00
> >   bDeviceClass          239 Miscellaneous Device
> >   bDeviceSubClass         2 ?
> >   bDeviceProtocol         1 Interface Association
> >   bMaxPacketSize0        64
> >   idVendor           0x05ca Ricoh Co., Ltd
> >   idProduct          0x183b
> >   bcdDevice            1.00
> >   iManufacturer           0
> >   iProduct                0
> >   iSerial                 0
> >   bNumConfigurations      1
>
> [snip]
>
> Thanks for the descriptors.
>
> Ricoh cameras are not renowned for their UVC compatibility :-/
>
> > > > Yes, lower resolutions worked fine in ekiga before, i believe it is
> > > > using lowest one, 160x120.
> > >
> > > So there's probably a problem on the host side (or at least in the host
> > > <-> device communication). Your tests seem to point to the resolution
> > > change not being understood by the camera.
> > >
> > > To confirm that, I'd like you to check the kernel log with the uvcvideo
> > > trace parameter set to 128 (either when loading the driver, or later
> > > with 'echo 128 > /sys/modules/uvcvideo/parameters/trace').
> > >
> > > Clear the kernel log (dmesg -c), run a video application in 640x480 for
> > > a second or two (longer would write too much messages to the log),
> > > close the application and capture the kernel log. Rerun the same test
> > > procedure in a lower, faulty resolution such as 320x240.
> >
> > # luvcview -s 640x480 -f yuv -i 30
> > luvcview version 0.2.1
> >  size width: 640 height: 480
> >  interval: 30 fps
> > Video driver: x11
> > A window manager is available
> > video /dev/video0
> >
> > Stop asked
> >  Clean Up done Quit
> >
> > # dmesg
> > [20451.408588] uvcvideo: Frame complete (EOF found).
>
> [snip]
>
> > [20456.138594] uvcvideo: Frame complete (EOF found).
>
> Looks pretty normal.
>
> > # luvcview -s 320x240 -f yuv -i 30
> > luvcview version 0.2.1
> >  size width: 320 height: 240
> >  interval: 30 fps
> > Video driver: x11
> > A window manager is available
> > video /dev/video0
> > ^C
> > Stop asked
> >  Clean Up done Quit
> >
> > # dmesg
> > [20516.062625] uvcvideo: Frame complete (overflow).
> > [20516.062637] uvcvideo: Dropping payload (out of sync).
>
> [snip]
>
> > [20516.067631] uvcvideo: Dropping payload (out of sync).
> >
> > Many and many lines like that!
> >
> > > If, as I suspect, the camera doesn't understand the resolution change
> > > properly, it should send a whole 640x480 frame even when the driver
> > > expects a lower resolution. Excess video data should be dropped and
> > > logged by the driver with a "Dropping payload (out of sync)" message.
> > > Those messages should not occur in 640x480 (or at least be way less
> > > frequent than in 320x240).
> >
> > You are right!
>
> Unfortunately :-/
>
> I don't know why the device didn't understand the resolution change
> request. It could be anything from a bug in the camera, a
> mostly-but-not-really UVC compatible firmware, or just an inability to
> stream at lower resolutions.
>
> Capturing a USB trace on Windows might help understanding what's going on.
>
> Best regards,
>
> Laurent Pinchart


Just wanted to add that I used to use the r5u870 driver and it worked
correctly at 320x240, but had to switch to uvcvideo because the
r5u870 one doesn't build with kernels newer than 2.6.27 (I think the
project was abandoned).
So maybe its possible to look into the r5u870 driver and see how it was done there?

This is a major problem, because Skype, kopete, etc, they all use 320x240, so they are not working with this driver.

Frito



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090613/23d50f00/attachment.html>

From lopan.eti at gmail.com  Sun Jun 14 14:12:16 2009
From: lopan.eti at gmail.com (Arlindo F. Neto)
Date: Sun, 14 Jun 2009 09:12:16 -0300
Subject: [Linux-uvc-devel] Audio on Philips SPC530NC
Message-ID: <a6ef6a2d0906140512s4eb2a42boebe346608e119422@mail.gmail.com>

Dear,

After much searching on this problem resolved post it here.

The Philips SPC530NC webcam does not capture audio. Used the solution
proposed in (http://openfacts.berlios.de/index-en.phtml?title=Linux_UVC) and
still not working.

I have seen that when the webcam is used primarily in the windows after you
restart the computer in the linux audio works perfectly. But if the computer
is switched off in Linux and the webcam does not capture the audio further.

I know that the UVC driver is responsible for the video, however I thought
it would work with the webcam experience in trying to solve this problem.

Best regards,
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090614/1218e5ba/attachment.html>

From valent.turkovic at gmail.com  Mon Jun 15 09:33:08 2009
From: valent.turkovic at gmail.com (Valent Turkovic)
Date: Mon, 15 Jun 2009 09:33:08 +0200
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
Message-ID: <64b14b300906150033m8e12b30pdf4dd84bd8ed16ba@mail.gmail.com>

Hi,
I have installed Fedora 11 on my sisters laptop with this webcam:
Bus 002 Device 002: ID 0c45:62c0 Microdia Sonix USB 2.0 Camera

Laptop is MSI MS-1221 (PR200):
https://wiki.ubuntu.com/LaptopTestingTeam/MSIPR200

It worked on Ubuntu 8.04 with System76 drivers package, but now on
Fedora 11 it doesn't work. I checked your webpage and this usb model
is under supported models.

This is what I get when I unload and load the uvcvideo module:

uvcvideo: Found UVC 1.00 device USB 2.0 Camera (0c45:62c0)
uvcvideo: No valid video chain found.
usbcore: registered new interface driver uvcvideo
USB Video Class driver (v0.1.0)

but cheese and mplayer don't see the webcam and there is no
/dev/video0 device ;(

kernel is:
2.6.29.4-167.fc11.i586

lsusb output:
Bus 002 Device 002: ID 0c45:62c0 Microdia Sonix USB 2.0 Camera

here is lsusb -v output:
http://fpaste.org/paste/15184

Is there some caveat that I'm missing? Can I provide you with some
more feedback? How can I get this webcam working?

Cheers!

-- 
http://kernelreloaded.blog385.com/
linux, blog, anime, spirituality, windsurf, wireless
registered as user #367004 with the Linux Counter, http://counter.li.org.
ICQ: 2125241, Skype: valent.turkovic


From lopan.eti at gmail.com  Tue Jun 16 13:25:05 2009
From: lopan.eti at gmail.com (Arlindo F. Neto)
Date: Tue, 16 Jun 2009 08:25:05 -0300
Subject: [Linux-uvc-devel] Audio on Philips SPC530NC
In-Reply-To: <a6ef6a2d0906140512s4eb2a42boebe346608e119422@mail.gmail.com>
References: <a6ef6a2d0906140512s4eb2a42boebe346608e119422@mail.gmail.com>
Message-ID: <a6ef6a2d0906160425v4cdbaf31i877c1b4bb127c089@mail.gmail.com>

Dears,

I am posting the descriptors of the webcam when it works (after use in
windows) and when it does not work (only with the use on Linux). You can see
that there is no difference in descriptors. Still I sure that the webcam
works with Linux after using Windows (dual-boot).

After plug webcam on windows and reboot to linux (webcam's audio working).
http://pastebin.com/f31d5cd41

Use only Linux to initialize and plug the webcam (webcam's audio does not
work more).
http://pastebin.com/f6873b895

Thanks for any  help!

Best regards,

Arlindo F. Neto

2009/6/14 Arlindo F. Neto <lopan.eti at gmail.com>

> Dear,
>
> After much searching on this problem resolved post it here.
>
> The Philips SPC530NC webcam does not capture audio. Used the solution
> proposed in (http://openfacts.berlios.de/index-en.phtml?title=Linux_UVC)
> and still not working.
>
> I have seen that when the webcam is used primarily in the windows after you
> restart the computer in the linux audio works perfectly. But if the computer
> is switched off in Linux and the webcam does not capture the audio further.
>
> I know that the UVC driver is responsible for the video, however I thought
> it would work with the webcam experience in trying to solve this problem.
>
> Best regards,
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090616/955cb7b9/attachment.html>

From laurent.pinchart at skynet.be  Wed Jun 17 00:31:47 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Wed, 17 Jun 2009 00:31:47 +0200
Subject: [Linux-uvc-devel] The video device does not support the
	required video format
In-Reply-To: <20090612064450.GB21431@tamay-dogan.net>
References: <20090611105301.GJ2523@tamay-dogan.net>
	<200906111702.36624.laurent.pinchart@skynet.be>
	<20090612064450.GB21431@tamay-dogan.net>
Message-ID: <200906170031.47408.laurent.pinchart@skynet.be>

Hi Michelle,

On Friday 12 June 2009 08:44:50 Michelle Konzack wrote:
> Hi Laurent,
>
> Am 2009-06-11 17:02:36, schrieb Laurent Pinchart:
> > Where do you get that error message from ?
>
> Ekiga and VLC
>
> > Your device supports MJPEG only, so
> > you will need an application that supports MJPEG as well (luvcview does).
>
> ...and no, luvcview does not work.  :-(
> I have already tried to capture the MJPEG stream.

How does it fail ? Please post the luvcview command line, the messages it 
prints, and all messages output by the uvcvideo driver to the kernel log.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Wed Jun 17 01:13:38 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Wed, 17 Jun 2009 01:13:38 +0200
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
In-Reply-To: <64b14b300906150033m8e12b30pdf4dd84bd8ed16ba@mail.gmail.com>
References: <64b14b300906150033m8e12b30pdf4dd84bd8ed16ba@mail.gmail.com>
Message-ID: <200906170113.38752.laurent.pinchart@skynet.be>

Hi Valentn

On Monday 15 June 2009 09:33:08 Valent Turkovic wrote:
> Hi,
> I have installed Fedora 11 on my sisters laptop with this webcam:
> Bus 002 Device 002: ID 0c45:62c0 Microdia Sonix USB 2.0 Camera
>
> Laptop is MSI MS-1221 (PR200):
> https://wiki.ubuntu.com/LaptopTestingTeam/MSIPR200
>
> It worked on Ubuntu 8.04 with System76 drivers package, but now on
> Fedora 11 it doesn't work. I checked your webpage and this usb model
> is under supported models.
>
> This is what I get when I unload and load the uvcvideo module:
>
> uvcvideo: Found UVC 1.00 device USB 2.0 Camera (0c45:62c0)
> uvcvideo: No valid video chain found.
> usbcore: registered new interface driver uvcvideo
> USB Video Class driver (v0.1.0)
>
> but cheese and mplayer don't see the webcam and there is no
> /dev/video0 device ;(
>
> kernel is:
> 2.6.29.4-167.fc11.i586
>
> lsusb output:
> Bus 002 Device 002: ID 0c45:62c0 Microdia Sonix USB 2.0 Camera
>
> here is lsusb -v output:
> http://fpaste.org/paste/15184
>
> Is there some caveat that I'm missing? Can I provide you with some
> more feedback? How can I get this webcam working?

Could you try with a vanilla 2.6.29 or 2.6.30 kernel ?

Best regards,

Laurent Pinchart



From valent.turkovic at gmail.com  Wed Jun 17 13:23:28 2009
From: valent.turkovic at gmail.com (Valent Turkovic)
Date: Wed, 17 Jun 2009 13:23:28 +0200
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
In-Reply-To: <200906170113.38752.laurent.pinchart@skynet.be>
References: <64b14b300906150033m8e12b30pdf4dd84bd8ed16ba@mail.gmail.com>
	<200906170113.38752.laurent.pinchart@skynet.be>
Message-ID: <64b14b300906170423p6d8c8c96i75ce354a94c45341@mail.gmail.com>

On Wed, Jun 17, 2009 at 1:13 AM, Laurent
Pinchart<laurent.pinchart at skynet.be> wrote:
> Hi Valentn
>
> On Monday 15 June 2009 09:33:08 Valent Turkovic wrote:
>> Hi,
>> I have installed Fedora 11 on my sisters laptop with this webcam:
>> Bus 002 Device 002: ID 0c45:62c0 Microdia Sonix USB 2.0 Camera
>>
>> Laptop is MSI MS-1221 (PR200):
>> https://wiki.ubuntu.com/LaptopTestingTeam/MSIPR200
>>
>> It worked on Ubuntu 8.04 with System76 drivers package, but now on
>> Fedora 11 it doesn't work. I checked your webpage and this usb model
>> is under supported models.
>>
>> This is what I get when I unload and load the uvcvideo module:
>>
>> uvcvideo: Found UVC 1.00 device USB 2.0 Camera (0c45:62c0)
>> uvcvideo: No valid video chain found.
>> usbcore: registered new interface driver uvcvideo
>> USB Video Class driver (v0.1.0)
>>
>> but cheese and mplayer don't see the webcam and there is no
>> /dev/video0 device ;(
>>
>> kernel is:
>> 2.6.29.4-167.fc11.i586
>>
>> lsusb output:
>> Bus 002 Device 002: ID 0c45:62c0 Microdia Sonix USB 2.0 Camera
>>
>> here is lsusb -v output:
>> http://fpaste.org/paste/15184
>>
>> Is there some caveat that I'm missing? Can I provide you with some
>> more feedback? How can I get this webcam working?
>
> Could you try with a vanilla 2.6.29 or 2.6.30 kernel ?
>
> Best regards,
>
> Laurent Pinchart


I'll try and report back... I need to get some instructions from
Fedora folks how to compile a vanilla kernel because I used to do
compile kernels twice per day before ;) But I haven't compiled kernel
manually for years now ;)

So if you also have any tips/suggestions how to compile please share it...

Talk to you soon,
Cheers!

-- 
http://kernelreloaded.blog385.com/
linux, blog, anime, spirituality, windsurf, wireless
registered as user #367004 with the Linux Counter, http://counter.li.org.
ICQ: 2125241, Skype: valent.turkovic


From laurent.pinchart at skynet.be  Wed Jun 17 16:33:50 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Wed, 17 Jun 2009 16:33:50 +0200
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
In-Reply-To: <64b14b300906170423p6d8c8c96i75ce354a94c45341@mail.gmail.com>
References: <64b14b300906150033m8e12b30pdf4dd84bd8ed16ba@mail.gmail.com>
	<200906170113.38752.laurent.pinchart@skynet.be>
	<64b14b300906170423p6d8c8c96i75ce354a94c45341@mail.gmail.com>
Message-ID: <200906171633.50501.laurent.pinchart@skynet.be>

Hi Valent,

On Wednesday 17 June 2009 13:23:28 Valent Turkovic wrote:
> On Wed, Jun 17, 2009 at 1:13 AM, Laurent Pinchart wrote:
> > On Monday 15 June 2009 09:33:08 Valent Turkovic wrote:
> >> Hi,
> >> I have installed Fedora 11 on my sisters laptop with this webcam:
> >> Bus 002 Device 002: ID 0c45:62c0 Microdia Sonix USB 2.0 Camera
> >>
> >> Laptop is MSI MS-1221 (PR200):
> >> https://wiki.ubuntu.com/LaptopTestingTeam/MSIPR200
> >>
> >> It worked on Ubuntu 8.04 with System76 drivers package, but now on
> >> Fedora 11 it doesn't work. I checked your webpage and this usb model
> >> is under supported models.
> >>
> >> This is what I get when I unload and load the uvcvideo module:
> >>
> >> uvcvideo: Found UVC 1.00 device USB 2.0 Camera (0c45:62c0)
> >> uvcvideo: No valid video chain found.
> >> usbcore: registered new interface driver uvcvideo
> >> USB Video Class driver (v0.1.0)
> >>
> >> but cheese and mplayer don't see the webcam and there is no
> >> /dev/video0 device ;(
> >>
> >> kernel is:
> >> 2.6.29.4-167.fc11.i586
> >>
> >> lsusb output:
> >> Bus 002 Device 002: ID 0c45:62c0 Microdia Sonix USB 2.0 Camera
> >>
> >> here is lsusb -v output:
> >> http://fpaste.org/paste/15184
> >>
> >> Is there some caveat that I'm missing? Can I provide you with some
> >> more feedback? How can I get this webcam working?
> >
> > Could you try with a vanilla 2.6.29 or 2.6.30 kernel ?
> >
> > Best regards,
> >
> > Laurent Pinchart
>
> I'll try and report back... I need to get some instructions from
> Fedora folks how to compile a vanilla kernel because I used to do
> compile kernels twice per day before ;) But I haven't compiled kernel
> manually for years now ;)
>
> So if you also have any tips/suggestions how to compile please share it...

It's quite simple. Download sources for 2.6.29 or 2.6.30, unpack them, copy 
the .config file shipped with the Fedora kernel (a copy might be located in 
/boot) to the source directory, run make, make install and make 
modules_install. Don't forget to update your boot loader afterwards.

If Fedora requires an initrd image you might need Fedora-specific 
documentation.

Best regards,

Laurent Pinchart



From hdegoede at redhat.com  Thu Jun 18 09:51:53 2009
From: hdegoede at redhat.com (Hans de Goede)
Date: Thu, 18 Jun 2009 09:51:53 +0200
Subject: [Linux-uvc-devel] Looking for upside down uvc cams
Message-ID: <4A39F219.10301@redhat.com>

Hi all,

Short self intro: I've been a Linux developer for 10+ years now and lately
I'm working on improving support for webcams under Linux.

I'm looking for people who have a laptop with a build in uvc web camera which
is mounted upside down resulting in an upside down picture under Linux.

I'm the author of libv4l a userspace library for handling various v4l things in
userspace, which is used by most applications now a days (in a recent version
of an up2date distro such as ubuntu or Fedora).

libv4l has the ability to put the image the right way up in software, and
already does so for a few Philips camera's which are always upside down.

I'm working on adding a table to libv4l with upside down camera moules in
laptops, so that it can do the correction of the upside down image automatically.
For this table I need info about such laptops.

If you have such a laptop can you please mail the output of the following commands:
lsusb > lsusb.log
dmidecode > dmi.log

Note the last command must be executed as root. The DMI info is needed as the
same usb module may be mounted upside down in one laptop and the right way up
in another. The DMI info contains info like:

Handle 0x0002, DMI type 2, 8 bytes
Base Board Information
         Manufacturer: ASUSTeK Computer INC.
         Product Name: M2N-SLI DELUXE
         Version: 1.XX
         Serial Number: 123456789000

Which allows libv4l to uniquely identify the laptop model.

Thanks & Regards,

Hans


From vatbier at yahoo.com  Fri Jun 19 23:59:12 2009
From: vatbier at yahoo.com (vatbier)
Date: Fri, 19 Jun 2009 14:59:12 -0700 (PDT)
Subject: [Linux-uvc-devel] USB Mic of Quickcam Fusion records annoying tick
	tick sound
Message-ID: <11789.74016.qm@web50309.mail.re2.yahoo.com>


Hello,

046d:08ca Logitech Quickcam Fusion webcam:
 
When having Skype conversations the microphone of my webcam not only records my voice but also an annoying tick sound which gets repeated every second.
Listen to this recording: "http://kwaaikop.fileave.com/webcam Logitech Fusion micro records annoying tick sounds every second.mp3".
 
In Windows Vista the audio input with Skype is flawless.
It is not a problem of Skype as guvcview also records the tick tick sound.
For years I lived with this hindrance hoping that new software would resolve it but I can't stand it no longer so here's my question:
 is there a solution for this problem?
 does anybody else have this problem?
 
I've read in forums.quickcamteam.net that USB mics have their own driver in alsa. I hope someone here knows what the cause of this problem is. I know uvc is more about video but I think you may also be familiar with sound problems of webcams. I will also file a bug report at alsa.
I've played with alsamixer (alsamixer -c 1: setting motherboard audio input mixers to zero) but that doesn't help.
 
My hardware:
AMD Athlon? 64 X2 Dual Core Processor 5600
motherboard audio: MCP55 High Definition Audio: Card: HDA NVidia, Chip: Realtek ALC883
motherboard: Gigabyte GA-M55S-S3 (AMD) version 1.1
 
Software:
Mandriva Linux 2009.1/2008.1/2007.1
libalsa2-1.0.20-1mdv2010.0
KDE 4.2.2: phonon-xine backend
Pulseaudio

vatbier



      


From lopan.eti at gmail.com  Sat Jun 20 01:31:35 2009
From: lopan.eti at gmail.com (Arlindo F. Neto)
Date: Fri, 19 Jun 2009 20:31:35 -0300
Subject: [Linux-uvc-devel] USB Mic of Quickcam Fusion records annoying
	tick tick sound
In-Reply-To: <11789.74016.qm@web50309.mail.re2.yahoo.com>
References: <11789.74016.qm@web50309.mail.re2.yahoo.com>
Message-ID: <a6ef6a2d0906191631n435e83bcm683deaa5e9f7fe68@mail.gmail.com>

Hi vatbier,

I have a similar problem with the Philips SPC530NC webcam.

Try using the audio of your webcam in linux after using it in windows.

I am trying to solve this problem for some time and did not find a clue to
the problem. : (

[]'s

Arlindo F. Neto

2009/6/19 vatbier <vatbier at yahoo.com>

>
> Hello,
>
> 046d:08ca Logitech Quickcam Fusion webcam:
>
> When having Skype conversations the microphone of my webcam not only
> records my voice but also an annoying tick sound which gets repeated every
> second.
> Listen to this recording: "http://kwaaikop.fileave.com/webcam Logitech
> Fusion micro records annoying tick sounds every second.mp3".
>
> In Windows Vista the audio input with Skype is flawless.
> It is not a problem of Skype as guvcview also records the tick tick sound.
> For years I lived with this hindrance hoping that new software would
> resolve it but I can't stand it no longer so here's my question:
>  is there a solution for this problem?
>  does anybody else have this problem?
>
> I've read in forums.quickcamteam.net that USB mics have their own driver
> in alsa. I hope someone here knows what the cause of this problem is. I know
> uvc is more about video but I think you may also be familiar with sound
> problems of webcams. I will also file a bug report at alsa.
> I've played with alsamixer (alsamixer -c 1: setting motherboard audio input
> mixers to zero) but that doesn't help.
>
> My hardware:
> AMD Athlon? 64 X2 Dual Core Processor 5600
> motherboard audio: MCP55 High Definition Audio: Card: HDA NVidia, Chip:
> Realtek ALC883
> motherboard: Gigabyte GA-M55S-S3 (AMD) version 1.1
>
> Software:
> Mandriva Linux 2009.1/2008.1/2007.1
> libalsa2-1.0.20-1mdv2010.0
> KDE 4.2.2: phonon-xine backend
> Pulseaudio
>
> vatbier
>
>
>
>
> _______________________________________________
> Linux-uvc-devel mailing list
> Linux-uvc-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090619/e01c8bc6/attachment.html>

From vatbier at yahoo.com  Sat Jun 20 02:06:25 2009
From: vatbier at yahoo.com (vatbier)
Date: Fri, 19 Jun 2009 17:06:25 -0700 (PDT)
Subject: [Linux-uvc-devel] USB Mic of Quickcam Fusion records annoying
	tick tick sound
Message-ID: <897610.52398.qm@web50311.mail.re2.yahoo.com>


--- On Fri, 6/19/09, vatbier <vatbier at yahoo.com> wrote:
> 046d:08ca Logitech Quickcam Fusion webcam:
>  
> When having Skype conversations the microphone of my webcam
> not only records my voice but also an annoying tick sound
> which gets repeated every second.

Here is the reason of the problem:
http://forum.skype.com/lofiversion/index.php/t98411.html :
QUOTE(punking @ Mon Dec 24 2007, 23:43)
  Strange clicking sound occurs every second when I speak on the test
  call. I haven't had chance to try it with a proper call. I'm using
  Logitech Quickcam Pro 5000 (using cameras mic)
  Skype (Beta) V 2.0.0.27
Same camera, same problem here. It's not a problem of Skype. I found out,
that this is a problem of the camera model which has a firmware bug. As i
read, the windows driver uses a pop/click filter that corrects this
problem. The solution would be a filter by the alsa project but i doubt
they will code this workaround in their driver.

Ask the alsa developers for a fix in the alsa driver here:
https://bugtrack.alsa-project.org:443/alsa-bug/view.php?id=4584

vatbier


      


From borislavba at gmail.com  Sat Jun 20 07:21:01 2009
From: borislavba at gmail.com (Borislav Gerassimov)
Date: Sat, 20 Jun 2009 08:21:01 +0300
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
Message-ID: <4fdcce020906192221o72a73fa3h281cf41ec0d7076a@mail.gmail.com>

Hi,

I would like to join your conversation... Few months ago (when kernel
2.6.29 was released) this problem showed up for me too. I've searched
and found out this:

http://developer.berlios.de/support/?func=detailsupport&support_id=102913&group_id=5681

Then in the forums of my distribution of choice I've found this:

http://bbs.archlinux.org/viewtopic.php?id=70685

In short: I've tested with vanilla kernel, it didn't work. I've
tweaked the patch, suggested by Pavel Pisa, applied it to 2.6.29 and
it worked. After that tweaked it for 2.6.30 and it worked too.
I don't know how exactly it helps, but it does its job. Please include
if possible.

-- 
Greetings,
Borislav


From valent.turkovic at gmail.com  Sat Jun 20 15:47:01 2009
From: valent.turkovic at gmail.com (Valent Turkovic)
Date: Sat, 20 Jun 2009 15:47:01 +0200
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
In-Reply-To: <4fdcce020906192221o72a73fa3h281cf41ec0d7076a@mail.gmail.com>
References: <4fdcce020906192221o72a73fa3h281cf41ec0d7076a@mail.gmail.com>
Message-ID: <64b14b300906200647m7eebb9a8xbb667c3512e5c4d@mail.gmail.com>

On Sat, Jun 20, 2009 at 7:21 AM, Borislav
Gerassimov<borislavba at gmail.com> wrote:
> Hi,
>
> I would like to join your conversation... Few months ago (when kernel
> 2.6.29 was released) this problem showed up for me too. I've searched
> and found out this:
>
> http://developer.berlios.de/support/?func=detailsupport&support_id=102913&group_id=5681
>
> Then in the forums of my distribution of choice I've found this:
>
> http://bbs.archlinux.org/viewtopic.php?id=70685
>
> In short: I've tested with vanilla kernel, it didn't work. I've
> tweaked the patch, suggested by Pavel Pisa, applied it to 2.6.29 and
> it worked. After that tweaked it for 2.6.30 and it worked too.
> I don't know how exactly it helps, but it does its job. Please include
> if possible.

I have tried applying microdia.patch to stable 2.6.30 vanilla kernel
but it fails to patch the kernel for me :( I guess that git version
and this patch are somewhat Arch specific or is it something else?

I will still try to build the vanilla kernel just to comfirm that this
module needs to be patched.

If anybody has this microdia patch for vanilla 2.6.30 kernel I would
be more than grateful to have it.

Cheers!

-- 
http://kernelreloaded.blog385.com/
linux, blog, anime, spirituality, windsurf, wireless
registered as user #367004 with the Linux Counter, http://counter.li.org.
ICQ: 2125241, Skype: valent.turkovic


From valent.turkovic at gmail.com  Sat Jun 20 17:31:40 2009
From: valent.turkovic at gmail.com (Valent Turkovic)
Date: Sat, 20 Jun 2009 17:31:40 +0200
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
In-Reply-To: <200906171633.50501.laurent.pinchart@skynet.be>
References: <64b14b300906150033m8e12b30pdf4dd84bd8ed16ba@mail.gmail.com>
	<200906170113.38752.laurent.pinchart@skynet.be>
	<64b14b300906170423p6d8c8c96i75ce354a94c45341@mail.gmail.com>
	<200906171633.50501.laurent.pinchart@skynet.be>
Message-ID: <64b14b300906200831x26ac961cr47fb025a0226eec8@mail.gmail.com>

On Wed, Jun 17, 2009 at 4:33 PM, Laurent
Pinchart<laurent.pinchart at skynet.be> wrote:
> Hi Valent,
> It's quite simple. Download sources for 2.6.29 or 2.6.30, unpack them, copy
> the .config file shipped with the Fedora kernel (a copy might be located in
> /boot) to the source directory, run make, make install and make
> modules_install. Don't forget to update your boot loader afterwards.
>
> If Fedora requires an initrd image you might need Fedora-specific
> documentation.
>
> Best regards,
>
> Laurent Pinchart

Hi Laurent,
I got the laptop again from my sister and I have just finisher
compiling and booting to a new kernel, it was really easy.

Still the same thing, but as you can see on the mailing list there is
a patch that works on Arch Linux, but isn't in mainstream kernel tree.
I'll can't apply the patch because it fails on me, but I could be
doing it wrong...

The same error message shows on 2.6.30 kernel as it does on Fedora's
2.6.29.4 kernel...
If anybody has a patch that works on vanilla 2.6.30 kernel please post a link...

Cheers.

-- 
http://kernelreloaded.blog385.com/
linux, blog, anime, spirituality, windsurf, wireless
registered as user #367004 with the Linux Counter, http://counter.li.org.
ICQ: 2125241, Skype: valent.turkovic


From valent.turkovic at gmail.com  Sat Jun 20 17:34:39 2009
From: valent.turkovic at gmail.com (Valent Turkovic)
Date: Sat, 20 Jun 2009 17:34:39 +0200
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
In-Reply-To: <64b14b300906200831x26ac961cr47fb025a0226eec8@mail.gmail.com>
References: <64b14b300906150033m8e12b30pdf4dd84bd8ed16ba@mail.gmail.com>
	<200906170113.38752.laurent.pinchart@skynet.be>
	<64b14b300906170423p6d8c8c96i75ce354a94c45341@mail.gmail.com>
	<200906171633.50501.laurent.pinchart@skynet.be>
	<64b14b300906200831x26ac961cr47fb025a0226eec8@mail.gmail.com>
Message-ID: <64b14b300906200834x747cd721v253a92c14fab7536@mail.gmail.com>

On Sat, Jun 20, 2009 at 5:31 PM, Valent
Turkovic<valent.turkovic at gmail.com> wrote:
>
> The same error message shows on 2.6.30 kernel as it does on Fedora's
> 2.6.29.4 kernel...
> If anybody has a patch that works on vanilla 2.6.30 kernel please post a link...
>
> Cheers.


Not sure why Borislav's message isn't on mailing list archives so that
you can see to what patch I'm refering to here is his message:


"Hi,

I would like to join your conversation... Few months ago (when kernel
2.6.29 was released) this problem showed up for me too. I've searched
and found out this:

http://developer.berlios.de/support/?func=detailsupport&support_id=102913&group_id=5681

Then in the forums of my distribution of choice I've found this:

http://bbs.archlinux.org/viewtopic.php?id=70685

In short: I've tested with vanilla kernel, it didn't work. I've
tweaked the patch, suggested by Pavel Pisa, applied it to 2.6.29 and
it worked. After that tweaked it for 2.6.30 and it worked too.
I don't know how exactly it helps, but it does its job. Please include
if possible."




-- 
http://kernelreloaded.blog385.com/
linux, blog, anime, spirituality, windsurf, wireless
registered as user #367004 with the Linux Counter, http://counter.li.org.
ICQ: 2125241, Skype: valent.turkovic


From laurent.pinchart at skynet.be  Sat Jun 20 19:48:50 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Sat, 20 Jun 2009 19:48:50 +0200
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
In-Reply-To: <4fdcce020906192221o72a73fa3h281cf41ec0d7076a@mail.gmail.com>
References: <4fdcce020906192221o72a73fa3h281cf41ec0d7076a@mail.gmail.com>
Message-ID: <200906201948.50314.laurent.pinchart@skynet.be>

Hi Borislav,

On Saturday 20 June 2009 07:21:01 Borislav Gerassimov wrote:
> Hi,
>
> I would like to join your conversation... Few months ago (when kernel
> 2.6.29 was released) this problem showed up for me too. I've searched
> and found out this:
>
> http://developer.berlios.de/support/?func=detailsupport&support_id=102913&g
>roup_id=5681
>
> Then in the forums of my distribution of choice I've found this:
>
> http://bbs.archlinux.org/viewtopic.php?id=70685
>
> In short: I've tested with vanilla kernel, it didn't work. I've
> tweaked the patch, suggested by Pavel Pisa, applied it to 2.6.29 and
> it worked. After that tweaked it for 2.6.30 and it worked too.
> I don't know how exactly it helps, but it does its job. Please include
> if possible.

Thanks for the report, and thanks for pointing me to the discussions and 
patch.

2.6.31 will include a patch that might fix your issue. Could you please try it 
? It applies on top of 2.6.30 and can be found at 
http://linuxtv.org/hg/~pinchartl/uvcvideo/diff/f873b121590f/linux/drivers/media/video/uvc/uvc_driver.c

Could you please also send me the output of

lsusb -v -d 0c45:62c0

with usbutils 0.72 or newer (0.73+ preferred) ? Thanks.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Sat Jun 20 19:54:28 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Sat, 20 Jun 2009 19:54:28 +0200
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
In-Reply-To: <64b14b300906200831x26ac961cr47fb025a0226eec8@mail.gmail.com>
References: <64b14b300906150033m8e12b30pdf4dd84bd8ed16ba@mail.gmail.com>
	<200906171633.50501.laurent.pinchart@skynet.be>
	<64b14b300906200831x26ac961cr47fb025a0226eec8@mail.gmail.com>
Message-ID: <200906201954.28987.laurent.pinchart@skynet.be>

Hi Valent,

On Saturday 20 June 2009 17:31:40 Valent Turkovic wrote:
> On Wed, Jun 17, 2009 at 4:33 PM, Laurent
>
> Pinchart<laurent.pinchart at skynet.be> wrote:
> > Hi Valent,
> > It's quite simple. Download sources for 2.6.29 or 2.6.30, unpack them,
> > copy the .config file shipped with the Fedora kernel (a copy might be
> > located in /boot) to the source directory, run make, make install and
> > make
> > modules_install. Don't forget to update your boot loader afterwards.
> >
> > If Fedora requires an initrd image you might need Fedora-specific
> > documentation.
> >
> > Best regards,
> >
> > Laurent Pinchart
>
> Hi Laurent,
> I got the laptop again from my sister and I have just finisher
> compiling and booting to a new kernel, it was really easy.
>
> Still the same thing, but as you can see on the mailing list there is
> a patch that works on Arch Linux, but isn't in mainstream kernel tree.
> I'll can't apply the patch because it fails on me, but I could be
> doing it wrong...
>
> The same error message shows on 2.6.30 kernel as it does on Fedora's
> 2.6.29.4 kernel...
> If anybody has a patch that works on vanilla 2.6.30 kernel please post a
> link...

Could you please try the following patch on top of 2.6.30 ?

http://linuxtv.org/hg/~pinchartl/uvcvideo/diff/f873b121590f/linux/drivers/media/video/uvc/uvc_driver.c

I'd appreciate if you could also send me the output of

lsusb -v -d 0c45:62c0

with usbutils 0.72 or newer (0.73+ preferred). Thanks.

Best regards,

Laurent Pinchart



From saintger at gmail.com  Sun Jun 21 01:00:26 2009
From: saintger at gmail.com (Saint Germain)
Date: Sun, 21 Jun 2009 01:00:26 +0200
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
Message-ID: <20090621010026.30d7f8ab@debian.fr>

Hello,

I've just bought a Logitech Quickcam Pro 9000 (3rd generation, BCD 0.08)
for my Debian Testing (kernel 2.6.26-2-686) and have some frame dropped
issues with it.

I'm aware (see
http://www.quickcamteam.net/documentation/faq/how-many-versions-of-the-quickcam-pro-9000-are-there
or http://linux-uvc.berlios.de/#footnote-6) that this particular webcam
is subject to some kind of problems but I'm not sure that it's the case
here.

With or without the auto exposure (set using uvcdynctrl), it seems that
a lot of frames are dropped.
With mplayer (mplayer tv:// -tv
driver=v4l2:width=640:height=480:device=/dev/video0:fps=30), I got :
*******************************************************************
MPlayer SVN-r29142-4.3.3 (C) 2000-2009 MPlayer Team
mplayer: could not connect to socket
mplayer: No such file or directory
Failed to open LIRC support. You will not be able to use your remote
control.

Playing tv://.
Cache fill:  0.00% (0 bytes)   
TV file format detected.
Selected driver: v4l2
 name: Video 4 Linux 2 input
 author: Martin Olschewski <olschewski at zpr.uni-koeln.de>
 comment: first try, more to come ;-)
v4l2: your device driver does not support VIDIOC_G_STD ioctl,
VIDIOC_G_PARM was used instead. Selected device: UVC Camera (046d:0990)
 Capabilites:  video capture  streaming
 supported norms:
 inputs: 0 = Camera 1;
 Current input: 0
 Current format: MJPEG
v4l2: ioctl set format failed: Invalid argument
v4l2: ioctl set format failed: Invalid argument
v4l2: ioctl set format failed: Invalid argument
tv.c: norm_from_string(pal): Bogus norm parameter, setting default.
v4l2: ioctl enum norm failed: Invalid argument
Error: Cannot set norm!
Selected input hasn't got a tuner!
v4l2: ioctl set mute failed: Invalid argument
v4l2: ioctl query control failed: Invalid argument
open: No such file or directory
[MGA] Couldn't open: /dev/mga_vid
open: No such file or directory
[MGA] Couldn't open: /dev/mga_vid
[VO_TDFXFB] Can't open /dev/fb0: No such file or directory.
[VO_3DFX] Unable to open /dev/3dfx.
Opening video filter: [expand aspect=4/3]
Expand: -1 x -1, -1 ; -1, osd: 0, aspect: 1.333333, round: 1
==========================================================================
Opening video decoder: [raw] RAW Uncompressed Video
VDec: vo config request - 640 x 480 (preferred colorspace: Packed YUY2)
VDec: using Packed YUY2 as output csp (no 0)
Movie-Aspect is undefined - no prescaling applied.
VO: [xv] 640x480 => 640x480 Packed YUY2 
Selected video codec: [rawyuy2] vfm: raw (RAW YUY2)
==========================================================================
Audio: no sound
Starting playback...
v4l2: ioctl set mute failed: Invalid argument
v4l2: 20 frames successfully processed, 219 frames dropped.
*******************************************************************

So 9/10 of the total frames were dropped !
Even with a lower resolution (160*120), I still got 50% of dropped
frames.

Using guvcview or luvcview, the video is flickering (but overall better
than with mplayer) hinting also that many frames are dropped.
Exactly the same problem with Ekiga or Kopete.

Also, I've been unable to record any video using mencoder (but I don't
know if it's related):
mencoder tv:// -tv driver=v4l2:device=/dev/video0:fps=30 -of rawvideo
*********************************************************************
-o webcam4.mp4
MEncoder dev-SVN-r26940 (C) 2000-2008 MPlayer Team
CPU: Intel Celeron 2/Pentium III Coppermine,Geyserville (Family: 6,
Model: 8, Stepping: 10) CPUflags: Type: 6 MMX: 1 MMX2: 1 3DNow: 0
3DNow2: 0 SSE: 1 SSE2: 0 Compiled with runtime CPU detection.
success: format: 9  data: 0x0 - 0x0
TV file format detected.
Selected driver: v4l2
 name: Video 4 Linux 2 input
 author: Martin Olschewski <olschewski at zpr.uni-koeln.de>
 comment: first try, more to come ;-)
v4l2: ioctl get standard failed: Invalid argument
Selected device: UVC Camera (046d:0990)
 Capabilites:  video capture  streaming
 supported norms:
 inputs: 0 = Camera 1;
 Current input: 0
 Current format: YUYV
v4l2: ioctl set format failed: Invalid argument
v4l2: ioctl set format failed: Invalid argument
v4l2: ioctl set format failed: Invalid argument
tv.c: norm_from_string(pal): Bogus norm parameter, setting default.
v4l2: ioctl enum norm failed: Invalid argument
Error: Cannot set norm!
Selected input hasn't got a tuner!
Floating point exception
***********************************************************************

Do you think that the problem is in:
1) the webcam hardware/firmware
2) the kernel/uvc version
3) mplayer/guvcview/...

Don't hesitate if you need any additional information to investigate
this issue.

Thank you in advance,


From laurent.pinchart at skynet.be  Sun Jun 21 23:42:45 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Sun, 21 Jun 2009 23:42:45 +0200
Subject: [Linux-uvc-devel] support for 05ca:183a
In-Reply-To: <977967.31602.qm@web111907.mail.gq1.yahoo.com>
References: <977967.31602.qm@web111907.mail.gq1.yahoo.com>
Message-ID: <200906212342.45426.laurent.pinchart@skynet.be>

Hi Frito,

sorry for the late reply.

On Sunday 14 June 2009 02:18:11 Frito Lay wrote:
> > On Saturday 21 February 2009 19:58:02 Pivo wrote:
> > > Hi Laurent,
> > > I have the same webcam, the same problems than petr but the problem is
> > > not solve and I think you didn't get the answers you wanted.
>
> I have the same problem.  My webcam is embedded in my Sony laptop (FZ
> series), it has the same USB id. Just tried the uvcvideo driver included in
> kernel 2.6.30, and the problem persists.

[snip]

> Just wanted to add that I used to use the r5u870 driver and it worked
> correctly at 320x240, but had to switch to uvcvideo because the
> r5u870 one doesn't build with kernels newer than 2.6.27 (I think the
> project was abandoned).
> So maybe its possible to look into the r5u870 driver and see how it was
> done there?

Feel free to do so :-)

> This is a major problem, because Skype, kopete, etc, they all use 320x240,
> so they are not working with this driver.

Can you capture and send me a USB traffic dump (you can use Linux's usbmon for 
that) of all control and interrupts messages exchanged by the host and the 
camera, starting at when you plug the camera in and extending to when the 
application starts streaming in 320x240 ?

Alternatively, with a Ricoh webcam sample I could debug the problem myself 
here, which would be faster :-)

Best regards,

Laurent Pinchart



From bardia.vivek at gmail.com  Mon Jun 22 14:23:21 2009
From: bardia.vivek at gmail.com (Vivek Bardia)
Date: Mon, 22 Jun 2009 17:53:21 +0530
Subject: [Linux-uvc-devel] Multiple streaming interface and MPEG2-TS support
	?
Message-ID: <E54E921FAAA9494485999DFF27C90C95@vivek>

Hello Laurent,

With respect to the mail chain below,
Would you be able to help me with regards to Multiple streaming interfaces. 

Firstly how much effort could be required to bring up the UVC driver to support multiple streaming interfaces and MPEG2-TS support ?
In case it is simple and already available, will you be able to provide that patch so that I am able to test it with the hardware and get back about the same ? 

Since I have just joined this mailing list, I do now have any patches in case you have already sent one.

Best Regards,
Vivek

>On Friday 05 June 2009 Laurent Pinchart wrote:
>>On Tuesday 02 June 2009 03:42:53 Chris wrote:
>>> On Tuesday 02 June 2009 Laurent Pinchart wrote:
>>> > On Monday 01 June 2009 07:01:27 fjklsd wrote:
>>> > > Hi.
>>> > > I'm developing a kind of webcam which transfer MJPEG and H.264
>>> > > simultaneously with UVC. I'm not sure that UVC driver supports 2
>>> > > streaming Inteface. Actually, UVC spec supports multiple streaming
>>> > > interface. However, I can't figure out how to use uvc driver for using 2
>>> > > streaming interface.
>>> > > Is it possible to use 2 streaming interface with UVC driver? If
>>> > > possible, can anyone help me to use UVC driver about using 2 streaming
>>> > > interface simply?
>> >>
>>> > The UVC video driver currently doesn't support multiple streaming
>>> > interfaces. The main reason was that I lacked hardware with multiple
>>> > streaming interfaces to test that feature. By the way, does the Windows
>>> > UVC driver support multiple streaming interfaces ?
>> >>
>> >> If you send me the USB descriptors of your devices I could have a look at
>> >> the driver to see how I could add multiple streaming interfaces support.
>>>
>> >Hi,
>> >Thank you for replying.
>>> I'm not sure that windows UVC driver supports multiple streaming
>>> interfaces. Anyway, I attached my device's descriptor file.
>>> This descriptor's streaming interfaces are MJPEG and YUV.
>>
>>Thanks. I'll restructure the driver to support multiple streaming interfaces. 
>>Will you be able to test a patch when it will be ready ?
>
>Hi,
>Of courese, I can test the patch.
>
>Best regards,
>Chris
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090622/829adeb5/attachment.html>

From brian at interlinx.bc.ca  Mon Jun 22 15:12:36 2009
From: brian at interlinx.bc.ca (Brian J. Murrell)
Date: Mon, 22 Jun 2009 09:12:36 -0400
Subject: [Linux-uvc-devel] purple tinted images on quickcam pro 5000
Message-ID: <1245676355.24333.12.camel@pc.interlinx.bc.ca>

I have a Logitech Quickcam Pro 5000 which I am using with "motion".  The
images it's getting though have a purple tint in the brightest spots
(i.e. white t-shirt is purple).

I have seen this before but I have also not seen it before.  Perhaps
it's different pieces of software driving the cam in different ways.

For background, dmesg reports:

[ 1043.988176] usb 1-1: new full speed USB device using uhci_hcd and address 2
[ 1044.288031] usb 1-1: configuration #1 chosen from 1 choice
[ 1044.544029] Linux video capture interface: v2.00
[ 1045.326055] usbcore: registered new interface driver snd-usb-audio
[ 1045.357304] uvcvideo: Found UVC 1.00 device <unnamed> (046d:08c5)
[ 1045.367888] input: UVC Camera (046d:08c5) as /devices/pci0000:00/0000:00:1d.0/usb1/1-1/1-1:1.0/input/input9
[ 1045.381663] usbcore: registered new interface driver uvcvideo
[ 1045.381663] USB Video Class driver (v0.1.0)

Also, perhaps related, perhaps not, motion complains:

[1] VIDIOC_G_JPEGCOMP not supported but it should be (does your webcam driver support this ioctl?)

Thots?

b.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: This is a digitally signed message part
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090622/2a3b741f/attachment.pgp>

From valent.turkovic at gmail.com  Mon Jun 22 16:10:06 2009
From: valent.turkovic at gmail.com (Valent Turkovic)
Date: Mon, 22 Jun 2009 16:10:06 +0200
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
In-Reply-To: <200906201954.28987.laurent.pinchart@skynet.be>
References: <64b14b300906150033m8e12b30pdf4dd84bd8ed16ba@mail.gmail.com>
	<200906171633.50501.laurent.pinchart@skynet.be>
	<64b14b300906200831x26ac961cr47fb025a0226eec8@mail.gmail.com>
	<200906201954.28987.laurent.pinchart@skynet.be>
Message-ID: <64b14b300906220710m64433b36o5a4dd974e94c50d@mail.gmail.com>

On Sat, Jun 20, 2009 at 7:54 PM, Laurent
Pinchart<laurent.pinchart at skynet.be> wrote:
> Hi Valent,
>
> http://linuxtv.org/hg/~pinchartl/uvcvideo/diff/f873b121590f/linux/drivers/media/video/uvc/uvc_driver.c
>
> I'd appreciate if you could also send me the output of
>
> lsusb -v -d 0c45:62c0
>
> with usbutils 0.72 or newer (0.73+ preferred). Thanks.
>
> Best regards,
>
> Laurent Pinchart
>
>

I have prepared to do this, now I need my sister to come with the laptop again.

$ patch -p0 < uvcvideo.patch
missing header for unified diff at line 3 of patch
patching file linux/drivers/media/video/uvc/uvc_driver.c


$ head uvcvideo.patch
--- linux/drivers/media/video/uvc/uvc_driver.c	Fri Mar 27 14:46:49 2009 +0100
+++ linux/drivers/media/video/uvc/uvc_driver.c	Wed May 06 17:30:30 2009 +0200
@@ -289,10 +289,8 @@ static int uvc_parse_format(struct uvc_d
 	struct uvc_format_desc *fmtdesc;
 	struct uvc_frame *frame;
 	const unsigned char *start = buffer;
-	unsigned char *_buffer;
 	unsigned int interval;
 	unsigned int i, n;
-	int _buflen;




I had to change first two lines to remove "/a/" and "/b/" that you had
in your patch, but after that it worked.

Cheers,

-- 
http://kernelreloaded.blog385.com/
linux, blog, anime, spirituality, windsurf, wireless
registered as user #367004 with the Linux Counter, http://counter.li.org.
ICQ: 2125241, Skype: valent.turkovic


From vatbier at yahoo.com  Mon Jun 22 21:24:03 2009
From: vatbier at yahoo.com (vatbier)
Date: Mon, 22 Jun 2009 12:24:03 -0700 (PDT)
Subject: [Linux-uvc-devel] USB Mic of Quickcam Fusion records annoying
	tick tick sound
Message-ID: <369270.6230.qm@web50305.mail.re2.yahoo.com>


I got an answer at http://forums.quickcamteam.net/showthread.php?tid=855&pid=3271#pid3271 :
Yes, someone was indeed looking at porting the code but it seems he abandoned the project. So, it looks like for these older cameras people are stuck with the click problem. With our newer cameras this has been fixed, however.

Now the question for me is whether I want to spend 85 euros on a new Logitech webcam... 
or I'll probably use another microphone (for which I'll have to buy an audio cable)


      


From bo-liu at hotmail.com  Tue Jun 23 04:31:07 2009
From: bo-liu at hotmail.com (Bo Liu)
Date: Tue, 23 Jun 2009 10:31:07 +0800
Subject: [Linux-uvc-devel] How to record audio and video from Logitech E3500
	webcam?
Message-ID: <COL115-W53567626B38DEA8D733C1F9F360@phx.gbl>


Hi, All.
   
     I would like to know how can I record audio and video simultaneously
from my Logitech E3500 webcam.
 
     I have built the video driver, and use mplayer to play the video well.
     Then, how to built the uvc audio driver? 
     And use which tool to play audio and video simultaneously?
 
Thanks a lot!

---

Best regards


Bo Liu
_________________________________________________________________
Show them the way! Add maps and directions to your party invites. 
http://www.microsoft.com/windows/windowslive/products/events.aspx


From bo-liu at hotmail.com  Tue Jun 23 04:42:23 2009
From: bo-liu at hotmail.com (Bo Liu)
Date: Tue, 23 Jun 2009 10:42:23 +0800
Subject: [Linux-uvc-devel] which format of data (typically image format)
 exchanged between uvc driver and the camera HW device?
Message-ID: <COL115-W30168862DB86A74D3AAF379F360@phx.gbl>


Hi, All
     
     I have a question about which format of data (typically image format) 
exchanged between uvc driver and the camera HW device?
 
     An application(eg..mplayer) exchange data with v4l2 by RGB Formats,YUV Formats and JPEG, MPEG.
Because v4l2 just support such formats(may be more, fix me..).
 
     But, I don't know whether the v4l2 encoder data to such formats by itself? or the v4l2 receive data
which have been encodered to such fromats by the camera HW device from the uvc drvier(usb..).
 
Thanks, all!

---

Best regards


Bo Liu
_________________________________________________________________
Invite your mail contacts to join your friends list with Windows Live Spaces. It's easy!
http://spaces.live.com/spacesapi.aspx?wx_action=create&wx_url=/friends.aspx&mkt=en-us


From pj.assis at gmail.com  Tue Jun 23 10:46:28 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Tue, 23 Jun 2009 09:46:28 +0100
Subject: [Linux-uvc-devel] How to record audio and video from Logitech
	E3500 webcam?
In-Reply-To: <COL115-W53567626B38DEA8D733C1F9F360@phx.gbl>
References: <COL115-W53567626B38DEA8D733C1F9F360@phx.gbl>
Message-ID: <59cf47a80906230146l23d52361qf27d5464a6bdc61e@mail.gmail.com>

Hi,
Try one of these:
cheese
guvcview
mencoder

Best regards,
Paulo

2009/6/23 Bo Liu <bo-liu at hotmail.com>

>
> Hi, All.
>
>     I would like to know how can I record audio and video simultaneously
> from my Logitech E3500 webcam.
>
>     I have built the video driver, and use mplayer to play the video well.
>     Then, how to built the uvc audio driver?
>     And use which tool to play audio and video simultaneously?
>
> Thanks a lot!
>
> ---
>
> Best regards
>
>
> Bo Liu
> _________________________________________________________________
> Show them the way! Add maps and directions to your party invites.
> http://www.microsoft.com/windows/windowslive/products/events.aspx
> _______________________________________________
> Linux-uvc-devel mailing list
> Linux-uvc-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090623/c4123956/attachment.html>

From pj.assis at gmail.com  Tue Jun 23 10:53:40 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Tue, 23 Jun 2009 09:53:40 +0100
Subject: [Linux-uvc-devel] which format of data (typically image format)
	exchanged between uvc driver and the camera HW device?
In-Reply-To: <COL115-W30168862DB86A74D3AAF379F360@phx.gbl>
References: <COL115-W30168862DB86A74D3AAF379F360@phx.gbl>
Message-ID: <59cf47a80906230153j6593f586ia76377c7a8602374@mail.gmail.com>

Hi,
linux drivers don't do any type of encoding. This is always done in the
hardware or in the application side.
UVC devices typically support MJPG or some type of yuv format (mostly YUYV).
V4L2 however supports a very wide range of formats ( and you can still
define your own if you want :-) )
as an example, other drivers, like GSPCA, support cameras with vendor
specific formats and this is now done through V4L2.

Best regards,
Paulo

2009/6/23 Bo Liu <bo-liu at hotmail.com>

>
> Hi, All
>
>     I have a question about which format of data (typically image format)
> exchanged between uvc driver and the camera HW device?
>
>     An application(eg..mplayer) exchange data with v4l2 by RGB Formats,YUV
> Formats and JPEG, MPEG.
> Because v4l2 just support such formats(may be more, fix me..).
>
>     But, I don't know whether the v4l2 encoder data to such formats by
> itself? or the v4l2 receive data
> which have been encodered to such fromats by the camera HW device from the
> uvc drvier(usb..).
>
> Thanks, all!
>
> ---
>
> Best regards
>
>
> Bo Liu
> _________________________________________________________________
> Invite your mail contacts to join your friends list with Windows Live
> Spaces. It's easy!
>
> http://spaces.live.com/spacesapi.aspx?wx_action=create&wx_url=/friends.aspx&mkt=en-us
> _______________________________________________
> Linux-uvc-devel mailing list
> Linux-uvc-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090623/1270d66a/attachment.html>

From valent.turkovic at gmail.com  Tue Jun 23 19:29:06 2009
From: valent.turkovic at gmail.com (Valent Turkovic)
Date: Tue, 23 Jun 2009 19:29:06 +0200
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
In-Reply-To: <4fdcce020906222214o2f4605e0h3dd36736254a761e@mail.gmail.com>
References: <64b14b300906150033m8e12b30pdf4dd84bd8ed16ba@mail.gmail.com>
	<200906171633.50501.laurent.pinchart@skynet.be>
	<64b14b300906200831x26ac961cr47fb025a0226eec8@mail.gmail.com>
	<200906201954.28987.laurent.pinchart@skynet.be>
	<64b14b300906220710m64433b36o5a4dd974e94c50d@mail.gmail.com>
	<4fdcce020906222214o2f4605e0h3dd36736254a761e@mail.gmail.com>
Message-ID: <64b14b300906231029w6e7d579fs2c2058c0e44d05e4@mail.gmail.com>

On Tue, Jun 23, 2009 at 7:14 AM, Borislav
Gerassimov<borislavba at gmail.com> wrote:
> next time try with "patch -p1 < ..." :)

Thx Borislave ;) You saw through my leet skillz ;)

I haven't patched kernel modules for years... and google said that to
"patch linux kernel" I need to use -p0 ;) Ah, I'm a dumb droid :)


-- 
http://kernelreloaded.blog385.com/
linux, blog, anime, spirituality, windsurf, wireless
registered as user #367004 with the Linux Counter, http://counter.li.org.
ICQ: 2125241, Skype: valent.turkovic


From saintger at gmail.com  Wed Jun 24 02:07:12 2009
From: saintger at gmail.com (Saint Germain)
Date: Wed, 24 Jun 2009 02:07:12 +0200
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <20090621010026.30d7f8ab@debian.fr>
References: <20090621010026.30d7f8ab@debian.fr>
Message-ID: <20090624020712.62aad48f@debian.fr>

On Sun, 21 Jun 2009 01:00:26 +0200, Saint Germain <saintger at gmail.com>
wrote :

> I've just bought a Logitech Quickcam Pro 9000 (3rd generation, BCD
> 0.08) for my Debian Testing (kernel 2.6.26-2-686) and have some frame
> dropped issues with it.
> 
> [snip]
> 
> Do you think that the problem is in:
> 1) the webcam hardware/firmware
> 2) the kernel/uvc version
> 3) mplayer/guvcview/...
> 

For information, I've just tried with linux kernel 2.6.30-1 and I have
the same problem...

I think that I'll return the product and go for a Vision Pro which
should work out-of-the-box (I hope).

Regards,


From pj.assis at gmail.com  Wed Jun 24 10:58:23 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Wed, 24 Jun 2009 09:58:23 +0100
Subject: [Linux-uvc-devel] Fwd: Dropped frames with Logitech Quickcam Pro
	9000
In-Reply-To: <59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624020712.62aad48f@debian.fr>
	<59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
Message-ID: <59cf47a80906240158u7ee3cd75lcfb3f7e6507dd1e8@mail.gmail.com>

Hi,
Could you run the following test with guvcview:

make sure you disable "Exposure, Auto Priority", set exposure to manual.
Then try setting exposure to 10000 (the lowest exposure possible) the image
should be very dark, but the frame rate should reach the value you set for
the camera (up to 30 fps)
If it doesn't then there is something wrong with the camera.

Best regards,
Paulo

2009/6/24 Saint Germain <saintger at gmail.com>

On Sun, 21 Jun 2009 01:00:26 +0200, Saint Germain <saintger at gmail.com>
> wrote :
>
> > I've just bought a Logitech Quickcam Pro 9000 (3rd generation, BCD
> > 0.08) for my Debian Testing (kernel 2.6.26-2-686) and have some frame
> > dropped issues with it.
> >
> > [snip]
> >
> > Do you think that the problem is in:
> > 1) the webcam hardware/firmware
> > 2) the kernel/uvc version
> > 3) mplayer/guvcview/...
> >
>
> For information, I've just tried with linux kernel 2.6.30-1 and I have
> the same problem...
>
> I think that I'll return the product and go for a Vision Pro which
> should work out-of-the-box (I hope).
>
> Regards,
> _______________________________________________
> Linux-uvc-devel mailing list
> Linux-uvc-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090624/4b7366e9/attachment.html>

From matthew.f.lucas at gmail.com  Wed Jun 24 16:46:40 2009
From: matthew.f.lucas at gmail.com (Matthew Lucas)
Date: Wed, 24 Jun 2009 09:46:40 -0500
Subject: [Linux-uvc-devel] Linux-uvc-devel Digest, Vol 36, Issue 27
In-Reply-To: <mailman.87.1245837761.27784.linux-uvc-devel@lists.berlios.de>
References: <mailman.87.1245837761.27784.linux-uvc-devel@lists.berlios.de>
Message-ID: <5761c2ad0906240746q7bd6a097w351415a68cddb07f@mail.gmail.com>

I have the same issue with the Logitech QuickCam? Orbit AF.  When I
have attempted to record with either cheese or guvcview, my recording
always drops frames and is almost unintelligible.

I will attempt the remedy described below and post my results later this week.

Matthew


> Message: 3
> Hi,
> Could you run the following test with guvcview:
>
> make sure you disable "Exposure, Auto Priority", set exposure to manual.
> Then try setting exposure to 10000 (the lowest exposure possible) the image
> should be very dark, but the frame rate should reach the value you set for
> the camera (up to 30 fps)
> If it doesn't then there is something wrong with the camera.
>
> Best regards,
> Paulo
>
> 2009/6/24 Saint Germain <saintger at gmail.com>
>
> On Sun, 21 Jun 2009 01:00:26 +0200, Saint Germain <saintger at gmail.com>
>> wrote :
>>
>> > I've just bought a Logitech Quickcam Pro 9000 (3rd generation, BCD
>> > 0.08) for my Debian Testing (kernel 2.6.26-2-686) and have some frame
>> > dropped issues with it.
>> >


From pj.assis at gmail.com  Wed Jun 24 20:27:46 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Wed, 24 Jun 2009 19:27:46 +0100
Subject: [Linux-uvc-devel] Linux-uvc-devel Digest, Vol 36, Issue 27
In-Reply-To: <5761c2ad0906240746q7bd6a097w351415a68cddb07f@mail.gmail.com>
References: <mailman.87.1245837761.27784.linux-uvc-devel@lists.berlios.de>
	<5761c2ad0906240746q7bd6a097w351415a68cddb07f@mail.gmail.com>
Message-ID: <59cf47a80906241127g1ac0f76bv2b7161c1b2d7d919@mail.gmail.com>

Mathew,

2009/6/24 Matthew Lucas <matthew.f.lucas at gmail.com>

> I have the same issue with the Logitech QuickCam? Orbit AF.  When I
> have attempted to record with either cheese or guvcview, my recording
> always drops frames and is almost unintelligible.
>
> I will attempt the remedy described below and post my results later this
> week.
>

Recording is a different subject.
This is highly dependent on you system resources, CPU, memory, disk I/O.
If you are using a high compression codec with a high bitrate, then you need
a fast CPU or you will lose frames, if you are using low compression, then
you need fast disk I/O.
Usually, in the case of guvcview at least, a good test is to disable audio
and setting the stream format and the video codec to MJPG.
This doesn't require any software compression, so if you still experience a
high frame drop then most likely the problem is with disk I/O speed.
Any other codec lfv, wmv, mpeg, mp2, mp4, can stress the CPU quite a lot, so
try tweaking the codec options and the resolution (by lowering the bit rate
and resolution you also reduce cpu requirements on the expense of video
quality)

On a side note I also own a sphere AF and can save a mp4 video with mp2
audio on guvcview at 640x480 at 25fps with the standard codec options. ( Mobo
GA-X48-DQ6 with Q9300 oc at 2,8 Ghz  + 4Gb Ram at 900Mhz + GF8800GT)

Best regards,
Paulo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090624/82d13f92/attachment.html>

From saintger at gmail.com  Wed Jun 24 21:18:38 2009
From: saintger at gmail.com (Saint Germain)
Date: Wed, 24 Jun 2009 21:18:38 +0200
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624020712.62aad48f@debian.fr>
	<59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
Message-ID: <20090624211838.5f59c8e0@debian.fr>

Hello,

I've just returned my Quickcam Pro 9000 and took a Vision Pro (BCD 0.9)
and I got exactly the same problem (even worse it seems).

I tried your test, and I only got 23 fps with still a lot of
flickering...

Same problem with 2 (slightly) different camera and 2 linux kernel
(2.6.26 and 2.6.30) !

I really don't know what is wrong here...

Thanks anyway for your help !

On Wed, 24 Jun 2009 09:57:18 +0100, Paulo Assis <pj.assis at gmail.com>
wrote :

> Hi,
> Could you run the following test with guvcview:
> 
> make sure you disable "Exposure, Auto Priority", set exposure to
> manual. Then try setting exposure to 10000 (the lowest exposure
> possible) the image should be very dark, but the frame rate should
> reach the value you set for the camera (up to 30 fps)
> If it doesn't then there is something wrong with the camera.
> 
> Best regards,
> Paulo
> 
> 2009/6/24 Saint Germain <saintger at gmail.com>
> 
> > On Sun, 21 Jun 2009 01:00:26 +0200, Saint Germain
> > <saintger at gmail.com> wrote :
> >
> > > I've just bought a Logitech Quickcam Pro 9000 (3rd generation, BCD
> > > 0.08) for my Debian Testing (kernel 2.6.26-2-686) and have some
> > > frame dropped issues with it.
> > >
> > > [snip]
> > >
> > > Do you think that the problem is in:
> > > 1) the webcam hardware/firmware
> > > 2) the kernel/uvc version
> > > 3) mplayer/guvcview/...
> > >
> >
> > For information, I've just tried with linux kernel 2.6.30-1 and I
> > have the same problem...
> >
> > I think that I'll return the product and go for a Vision Pro which
> > should work out-of-the-box (I hope).
> >
> > Regards,
> > _______________________________________________
> > Linux-uvc-devel mailing list
> > Linux-uvc-devel at lists.berlios.de
> > https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
> >


From pj.assis at gmail.com  Wed Jun 24 22:28:09 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Wed, 24 Jun 2009 21:28:09 +0100
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <20090624211838.5f59c8e0@debian.fr>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624020712.62aad48f@debian.fr>
	<59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
	<20090624211838.5f59c8e0@debian.fr>
Message-ID: <59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>

Hi,
Were you streaming YUYV or MJPG ? Does it make any difference if you change
between the two formats ?

Could you try disabling hardware accelaration: guvcview --hwd_acel=0
and check if the flickering gets any better.

Best regards
Paulo,

2009/6/24 Saint Germain <saintger at gmail.com>

> Hello,
>
> I've just returned my Quickcam Pro 9000 and took a Vision Pro (BCD 0.9)
> and I got exactly the same problem (even worse it seems).
>
> I tried your test, and I only got 23 fps with still a lot of
> flickering...
>
> Same problem with 2 (slightly) different camera and 2 linux kernel
> (2.6.26 and 2.6.30) !
>
> I really don't know what is wrong here...
>
> Thanks anyway for your help !
>
> On Wed, 24 Jun 2009 09:57:18 +0100, Paulo Assis <pj.assis at gmail.com>
> wrote :
>
> > Hi,
> > Could you run the following test with guvcview:
> >
> > make sure you disable "Exposure, Auto Priority", set exposure to
> > manual. Then try setting exposure to 10000 (the lowest exposure
> > possible) the image should be very dark, but the frame rate should
> > reach the value you set for the camera (up to 30 fps)
> > If it doesn't then there is something wrong with the camera.
> >
> > Best regards,
> > Paulo
> >
> > 2009/6/24 Saint Germain <saintger at gmail.com>
> >
> > > On Sun, 21 Jun 2009 01:00:26 +0200, Saint Germain
> > > <saintger at gmail.com> wrote :
> > >
> > > > I've just bought a Logitech Quickcam Pro 9000 (3rd generation, BCD
> > > > 0.08) for my Debian Testing (kernel 2.6.26-2-686) and have some
> > > > frame dropped issues with it.
> > > >
> > > > [snip]
> > > >
> > > > Do you think that the problem is in:
> > > > 1) the webcam hardware/firmware
> > > > 2) the kernel/uvc version
> > > > 3) mplayer/guvcview/...
> > > >
> > >
> > > For information, I've just tried with linux kernel 2.6.30-1 and I
> > > have the same problem...
> > >
> > > I think that I'll return the product and go for a Vision Pro which
> > > should work out-of-the-box (I hope).
> > >
> > > Regards,
> > > _______________________________________________
> > > Linux-uvc-devel mailing list
> > > Linux-uvc-devel at lists.berlios.de
> > > https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
> > >
> _______________________________________________
> Linux-uvc-devel mailing list
> Linux-uvc-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090624/b39c47ae/attachment.html>

From pj.assis at gmail.com  Wed Jun 24 22:37:51 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Wed, 24 Jun 2009 21:37:51 +0100
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <20090624211838.5f59c8e0@debian.fr>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624020712.62aad48f@debian.fr>
	<59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
	<20090624211838.5f59c8e0@debian.fr>
Message-ID: <59cf47a80906241337x3761d3a3x824bbf47bfda4803@mail.gmail.com>

I almost forgot about the following:
Please make sure you have compiz disable, the last time I used it with a
radeon card I also got this weird flickering on overlay video.

Best regards,
Paulo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090624/6859ffb8/attachment.html>

From saintger at gmail.com  Wed Jun 24 22:53:07 2009
From: saintger at gmail.com (Saint Germain)
Date: Wed, 24 Jun 2009 22:53:07 +0200
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624020712.62aad48f@debian.fr>
	<59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
	<20090624211838.5f59c8e0@debian.fr>
	<59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
Message-ID: <20090624225307.64b3a9ba@debian.fr>

Hi again,

I don't have compiz installed.
Using YUYV, I only got 5 FPS (compared to 20-23 FPS with MJPG) but no
strange flickering.

I've tried disabling hardware acceleration, and I only got less FPS but
the flickering is still here for MJPG (with YUYV I only got 1-2 FPS).

Also, I've also tried with 320*240 to see if it's because of the CPU,
but the CPU load is below 50%.

Someone on Logitech side has also asked me to increase log trace while
trying to use mplayer.
The results are here:
http://forums.quickcamteam.net/showthread.php?tid=860

I hope that it may be useful for you...

Thank you, I appreciate your help !

On Wed, 24 Jun 2009 21:28:09 +0100, Paulo Assis <pj.assis at gmail.com>
wrote :

> Hi,
> Were you streaming YUYV or MJPG ? Does it make any difference if you
> change between the two formats ?
> 
> Could you try disabling hardware accelaration: guvcview --hwd_acel=0
> and check if the flickering gets any better.
> 
> Best regards
> Paulo,
> 
> 2009/6/24 Saint Germain <saintger at gmail.com>
> 
> > Hello,
> >
> > I've just returned my Quickcam Pro 9000 and took a Vision Pro (BCD
> > 0.9) and I got exactly the same problem (even worse it seems).
> >
> > I tried your test, and I only got 23 fps with still a lot of
> > flickering...
> >
> > Same problem with 2 (slightly) different camera and 2 linux kernel
> > (2.6.26 and 2.6.30) !
> >
> > I really don't know what is wrong here...
> >
> > Thanks anyway for your help !
> >
> > On Wed, 24 Jun 2009 09:57:18 +0100, Paulo Assis <pj.assis at gmail.com>
> > wrote :
> >
> > > Hi,
> > > Could you run the following test with guvcview:
> > >
> > > make sure you disable "Exposure, Auto Priority", set exposure to
> > > manual. Then try setting exposure to 10000 (the lowest exposure
> > > possible) the image should be very dark, but the frame rate should
> > > reach the value you set for the camera (up to 30 fps)
> > > If it doesn't then there is something wrong with the camera.
> > >
> > > Best regards,
> > > Paulo
> > >
> > > 2009/6/24 Saint Germain <saintger at gmail.com>
> > >
> > > > On Sun, 21 Jun 2009 01:00:26 +0200, Saint Germain
> > > > <saintger at gmail.com> wrote :
> > > >
> > > > > I've just bought a Logitech Quickcam Pro 9000 (3rd
> > > > > generation, BCD 0.08) for my Debian Testing (kernel
> > > > > 2.6.26-2-686) and have some frame dropped issues with it.
> > > > >
> > > > > [snip]
> > > > >
> > > > > Do you think that the problem is in:
> > > > > 1) the webcam hardware/firmware
> > > > > 2) the kernel/uvc version
> > > > > 3) mplayer/guvcview/...
> > > > >
> > > >
> > > > For information, I've just tried with linux kernel 2.6.30-1 and
> > > > I have the same problem...
> > > >
> > > > I think that I'll return the product and go for a Vision Pro
> > > > which should work out-of-the-box (I hope).
> > > >
> > > > Regards,



From pj.assis at gmail.com  Wed Jun 24 23:38:59 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Wed, 24 Jun 2009 22:38:59 +0100
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <20090624225307.64b3a9ba@debian.fr>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624020712.62aad48f@debian.fr>
	<59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
	<20090624211838.5f59c8e0@debian.fr>
	<59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
	<20090624225307.64b3a9ba@debian.fr>
Message-ID: <59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>

2009/6/24 Saint Germain <saintger at gmail.com>

> Hi again,
>
> I don't have compiz installed.


OK, I just ask because compiz is now set by default in some distros. I use
it myself but with the vendor driver from nvidia it never caused me any
problems.


>
> Using YUYV, I only got 5 FPS (compared to 20-23 FPS with MJPG) but no
> strange flickering.
>

This is really strange and seems to indicate usb bandwidth issues or some
similar problem, are you using any other device on the same usb controler ?
Are you using a USB1 or USB2 port and what driver for the usb controler ?
Also to what value did you set fps and what resolution are you using ?


>
> I've tried disabling hardware acceleration, and I only got less FPS but
> the flickering is still here for MJPG (with YUYV I only got 1-2 FPS).
>

A decrease in fps is normal in this case.



>
> Also, I've also tried with 320*240 to see if it's because of the CPU,
> but the CPU load is below 50%.
>

CPU shouldn't be a problem unless you are recording video.


>
> Someone on Logitech side has also asked me to increase log trace while
> trying to use mplayer.
> The results are here:
> http://forums.quickcamteam.net/showthread.php?tid=860
>

Yes, I've read the post before, but I rather answer it on this list :-)


Best regards,
Paulo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090624/f879015e/attachment.html>

From pj.assis at gmail.com  Wed Jun 24 23:43:02 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Wed, 24 Jun 2009 22:43:02 +0100
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624020712.62aad48f@debian.fr>
	<59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
	<20090624211838.5f59c8e0@debian.fr>
	<59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
	<20090624225307.64b3a9ba@debian.fr>
	<59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
Message-ID: <59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>

You should also check memory usage, make sure your system is not using swap.


2009/6/24 Paulo Assis <pj.assis at gmail.com>

>
>
> 2009/6/24 Saint Germain <saintger at gmail.com>
>
>> Hi again,
>>
>> I don't have compiz installed.
>>
>
> OK, I just ask because compiz is now set by default in some distros. I use
> it myself but with the vendor driver from nvidia it never caused me any
> problems.
>
>
>>
>> Using YUYV, I only got 5 FPS (compared to 20-23 FPS with MJPG) but no
>> strange flickering.
>>
>
> This is really strange and seems to indicate usb bandwidth issues or some
> similar problem, are you using any other device on the same usb controler ?
> Are you using a USB1 or USB2 port and what driver for the usb controler ?
> Also to what value did you set fps and what resolution are you using ?
>
>
>>
>> I've tried disabling hardware acceleration, and I only got less FPS but
>> the flickering is still here for MJPG (with YUYV I only got 1-2 FPS).
>>
>
> A decrease in fps is normal in this case.
>
>
>
>>
>> Also, I've also tried with 320*240 to see if it's because of the CPU,
>> but the CPU load is below 50%.
>>
>
> CPU shouldn't be a problem unless you are recording video.
>
>
>>
>> Someone on Logitech side has also asked me to increase log trace while
>> trying to use mplayer.
>> The results are here:
>> http://forums.quickcamteam.net/showthread.php?tid=860
>>
>
> Yes, I've read the post before, but I rather answer it on this list :-)
>
>
> Best regards,
> Paulo
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090624/13d4559f/attachment.html>

From saintger at gmail.com  Thu Jun 25 00:03:29 2009
From: saintger at gmail.com (Saint Germain)
Date: Thu, 25 Jun 2009 00:03:29 +0200
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624020712.62aad48f@debian.fr>
	<59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
	<20090624211838.5f59c8e0@debian.fr>
	<59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
	<20090624225307.64b3a9ba@debian.fr>
	<59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
Message-ID: <20090625000329.115f53da@debian.fr>

On Wed, 24 Jun 2009 22:38:59 +0100, Paulo Assis <pj.assis at gmail.com>
wrote :

> >
> > Using YUYV, I only got 5 FPS (compared to 20-23 FPS with MJPG) but
> > no strange flickering.
> >
> 
> This is really strange and seems to indicate usb bandwidth issues or
> some similar problem, are you using any other device on the same usb
> controler ? Are you using a USB1 or USB2 port and what driver for the
> usb controler ? Also to what value did you set fps and what
> resolution are you using ?
> 

No it is the only USB device on the controler.
The USB controler is a PCI card and I can see with usbview that the
webcam is connected on the EHCI controler, so it is a USB2 port.
I've tried "rmmod ehci_hcd" to be with USB1 (OHCI controler)and tried
connecting directly on the motherboard USB1 port (UHCI controler), but
I got a "uvcvideo: No valid video chain found" (it's strange, I
remembered trying with the Quickcam Pro 9000, and it managed to work in
USB 1.1, but I got slower framerate with still flickering).

I will have a brand new laptop this we, so I will try on another
computer with a direct USB2 port on the motherboard.

> >
> > Someone on Logitech side has also asked me to increase log trace
> > while trying to use mplayer.
> > The results are here:
> > http://forums.quickcamteam.net/showthread.php?tid=860
> >
> 
> Yes, I've read the post before, but I rather answer it on this
> list :-)
> 

As you wish ! ;-)

Regards,



From saintger at gmail.com  Thu Jun 25 00:08:39 2009
From: saintger at gmail.com (Saint Germain)
Date: Thu, 25 Jun 2009 00:08:39 +0200
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624020712.62aad48f@debian.fr>
	<59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
	<20090624211838.5f59c8e0@debian.fr>
	<59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
	<20090624225307.64b3a9ba@debian.fr>
	<59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
	<59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>
Message-ID: <20090625000839.1cc2161e@debian.fr>

No problem here also.
There is always a big bunch of free memory...

Keep asking ! Sooner or later, we'll find the culprit !! ;-)

Thanks

On Wed, 24 Jun 2009 22:43:02 +0100, Paulo Assis <pj.assis at gmail.com>
wrote :

> You should also check memory usage, make sure your system is not
> using swap.
> 
> 
> 2009/6/24 Paulo Assis <pj.assis at gmail.com>
> 
> >
> >
> > 2009/6/24 Saint Germain <saintger at gmail.com>
> >
> >> Hi again,
> >>
> >> I don't have compiz installed.
> >>
> >
> > OK, I just ask because compiz is now set by default in some
> > distros. I use it myself but with the vendor driver from nvidia it
> > never caused me any problems.
> >
> >
> >>
> >> Using YUYV, I only got 5 FPS (compared to 20-23 FPS with MJPG) but
> >> no strange flickering.
> >>
> >
> > This is really strange and seems to indicate usb bandwidth issues
> > or some similar problem, are you using any other device on the same
> > usb controler ? Are you using a USB1 or USB2 port and what driver
> > for the usb controler ? Also to what value did you set fps and what
> > resolution are you using ?
> >
> >
> >>
> >> I've tried disabling hardware acceleration, and I only got less
> >> FPS but the flickering is still here for MJPG (with YUYV I only
> >> got 1-2 FPS).
> >>
> >
> > A decrease in fps is normal in this case.
> >
> >
> >
> >>
> >> Also, I've also tried with 320*240 to see if it's because of the
> >> CPU, but the CPU load is below 50%.
> >>
> >
> > CPU shouldn't be a problem unless you are recording video.
> >
> >
> >>
> >> Someone on Logitech side has also asked me to increase log trace
> >> while trying to use mplayer.
> >> The results are here:
> >> http://forums.quickcamteam.net/showthread.php?tid=860
> >>
> >
> > Yes, I've read the post before, but I rather answer it on this
> > list :-)
> >
> >
> > Best regards,
> > Paulo
> >


From pj.assis at gmail.com  Thu Jun 25 00:46:11 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Wed, 24 Jun 2009 23:46:11 +0100
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <20090625000839.1cc2161e@debian.fr>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624020712.62aad48f@debian.fr>
	<59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
	<20090624211838.5f59c8e0@debian.fr>
	<59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
	<20090624225307.64b3a9ba@debian.fr>
	<59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
	<59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>
	<20090625000839.1cc2161e@debian.fr>
Message-ID: <59cf47a80906241546k51ae9bdcrca722ef3da5ba19d@mail.gmail.com>

The YUYV fps difference to MJPG, IMHO, can only be caused by the frame size.
MJPG is compressed so it can be some 10 times smaller compared to YUYV.
This also indicates that CPU is not a problem since MJPG requires a lot more
CPU (needs decompressing)
So if memory is also not a problem, the only thing left is the USB
connection.

I'm just intrigued by the flickering, even at 20 fps video should be
acceptable, I'm guessing the driver is dropping some data, in yuv case the
entire frame as incomplete frames are droped by default, in the case of MJPG
since there is no way of knowing the complete frame size (it varies due to
the compression process), you just get part of the frame and that causes the
ficker.

In any case all seems to point to the usb connection, so I would run some
tests on that.

Best regards,
Paulo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090624/a5d88cf3/attachment.html>

From saintger at gmail.com  Thu Jun 25 02:29:19 2009
From: saintger at gmail.com (Saint Germain)
Date: Thu, 25 Jun 2009 02:29:19 +0200
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <59cf47a80906241546k51ae9bdcrca722ef3da5ba19d@mail.gmail.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624020712.62aad48f@debian.fr>
	<59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
	<20090624211838.5f59c8e0@debian.fr>
	<59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
	<20090624225307.64b3a9ba@debian.fr>
	<59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
	<59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>
	<20090625000839.1cc2161e@debian.fr>
	<59cf47a80906241546k51ae9bdcrca722ef3da5ba19d@mail.gmail.com>
Message-ID: <20090625022919.792ed2e8@debian.fr>

I've tried disconnecting all PCI cards except the USB controler and
using it in different slot, but same results.
I also tried booting with acpi=off but no such luck.

I will try on another computer this week end. Really strange... I never
had any problem with this USB controler.

I also have a Philips Toucam Pro (need pwc driver) which if connected
on the same port works correctly without a single dropped frame (but
with a poor definition, something about the previous pwcx module being
reimplemented).

Maybe some freak combination of motherboard + USB controler + UVC
module ?

I'll keep you updated this WE.

Thanks for your help !

On Wed, 24 Jun 2009 23:46:11 +0100, Paulo Assis <pj.assis at gmail.com>
wrote :

> The YUYV fps difference to MJPG, IMHO, can only be caused by the
> frame size. MJPG is compressed so it can be some 10 times smaller
> compared to YUYV. This also indicates that CPU is not a problem since
> MJPG requires a lot more CPU (needs decompressing)
> So if memory is also not a problem, the only thing left is the USB
> connection.
> 
> I'm just intrigued by the flickering, even at 20 fps video should be
> acceptable, I'm guessing the driver is dropping some data, in yuv
> case the entire frame as incomplete frames are droped by default, in
> the case of MJPG since there is no way of knowing the complete frame
> size (it varies due to the compression process), you just get part of
> the frame and that causes the ficker.
> 
> In any case all seems to point to the usb connection, so I would run
> some tests on that.
> 
> Best regards,
> Paulo


From shaohuang at gmail.com  Thu Jun 25 02:57:07 2009
From: shaohuang at gmail.com (Brian Pin)
Date: Wed, 24 Jun 2009 17:57:07 -0700
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <20090625022919.792ed2e8@debian.fr>
References: <20090621010026.30d7f8ab@debian.fr>
	<59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
	<20090624211838.5f59c8e0@debian.fr>
	<59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
	<20090624225307.64b3a9ba@debian.fr>
	<59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
	<59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>
	<20090625000839.1cc2161e@debian.fr>
	<59cf47a80906241546k51ae9bdcrca722ef3da5ba19d@mail.gmail.com>
	<20090625022919.792ed2e8@debian.fr>
Message-ID: <a81f87bb0906241757o6f3bf535ue9164c026d843a58@mail.gmail.com>

Hi
Maybe there are some possible reasons..
1) dropping by the device because the host is too slow to drain the data, ->
use a different host to test
2) dropping by the host uvc driver, -> turn on the trace to maximum to check
if there is a drop
3) dropping by the application above uvc driver, -> probably be some timing
issues or synchronization issues..don't know how to test, maybe a different
application would tell the difference?

Good luck


On Wed, Jun 24, 2009 at 5:29 PM, Saint Germain <saintger at gmail.com> wrote:

> I've tried disconnecting all PCI cards except the USB controler and
> using it in different slot, but same results.
> I also tried booting with acpi=off but no such luck.
>
> I will try on another computer this week end. Really strange... I never
> had any problem with this USB controler.
>
> I also have a Philips Toucam Pro (need pwc driver) which if connected
> on the same port works correctly without a single dropped frame (but
> with a poor definition, something about the previous pwcx module being
> reimplemented).
>
> Maybe some freak combination of motherboard + USB controler + UVC
> module ?
>
> I'll keep you updated this WE.
>
> Thanks for your help !
>
> On Wed, 24 Jun 2009 23:46:11 +0100, Paulo Assis <pj.assis at gmail.com>
> wrote :
>
> > The YUYV fps difference to MJPG, IMHO, can only be caused by the
> > frame size. MJPG is compressed so it can be some 10 times smaller
> > compared to YUYV. This also indicates that CPU is not a problem since
> > MJPG requires a lot more CPU (needs decompressing)
> > So if memory is also not a problem, the only thing left is the USB
> > connection.
> >
> > I'm just intrigued by the flickering, even at 20 fps video should be
> > acceptable, I'm guessing the driver is dropping some data, in yuv
> > case the entire frame as incomplete frames are droped by default, in
> > the case of MJPG since there is no way of knowing the complete frame
> > size (it varies due to the compression process), you just get part of
> > the frame and that causes the ficker.
> >
> > In any case all seems to point to the usb connection, so I would run
> > some tests on that.
> >
> > Best regards,
> > Paulo
> _______________________________________________
> Linux-uvc-devel mailing list
> Linux-uvc-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
>



-- 
Best Regards
Brian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090624/13886450/attachment.html>

From andreynech at yahoo.com  Thu Jun 25 09:57:15 2009
From: andreynech at yahoo.com (Andrey Nechypurenko)
Date: Thu, 25 Jun 2009 00:57:15 -0700 (PDT)
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <a81f87bb0906241757o6f3bf535ue9164c026d843a58@mail.gmail.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<59cf47a80906240157r1792c60cw69b96e45d8d7d577@mail.gmail.com>
	<20090624211838.5f59c8e0@debian.fr>
	<59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
	<20090624225307.64b3a9ba@debian.fr>
	<59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
	<59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>
	<20090625000839.1cc2161e@debian.fr>
	<59cf47a80906241546k51ae9bdcrca722ef3da5ba19d@mail.gmail.com>
	<20090625022919.792ed2e8@debian.fr>
	<a81f87bb0906241757o6f3bf535ue9164c026d843a58@mail.gmail.com>
Message-ID: <432730.44890.qm@web32504.mail.mud.yahoo.com>


Hi,

> 1) dropping by the device because the host is too slow to drain the data, -> use a different host to test

I also have this camera and on my Dell Precission M6400 notebook running latest stable Debian (lenny) luvcview shows no more then 10-12 fps so far.
I did try it only in room with "normal" light conditions and auto-exposure turned on. I beleave auto-exposure was turned on because as I know it is the default setting and attempt to turn it off using luvcview does not work. I am currently on different computer and do not remember exact error message but it was just saying that attempt to turn it off failed.

Just want to mention it to exclude USB and host performance related issue.

Regards,
Andrey.


On Wed, Jun 24, 2009 at 5:29 PM, Saint Germain <saintger at gmail.com> wrote:

I've tried disconnecting all PCI cards except the USB controler and
using it in different slot, but same results.
I also tried booting with acpi=off but no such luck.

I will try on another computer this week end. Really strange... I never
had any problem with this USB controler.

I also have a Philips Toucam Pro (need pwc driver) which if connected
on the same port works correctly without a single dropped frame (but
with a poor definition, something about the previous pwcx module being
reimplemented).

Maybe some freak combination of motherboard + USB controler + UVC
module ?

I'll keep you updated this WE.

Thanks for your help !

On Wed, 24 Jun 2009 23:46:11 +0100, Paulo Assis <pj.assis at gmail.com>
wrote :


> The YUYV fps difference to MJPG, IMHO, can only be caused by the
> frame size. MJPG is compressed so it can be some 10 times smaller
> compared to YUYV. This also indicates that CPU is not a problem since
> MJPG requires a lot more CPU (needs decompressing)
> So if memory is also not a problem, the only thing left is the USB
> connection.
>
> I'm just intrigued by the flickering, even at 20 fps video should be
> acceptable, I'm guessing the driver is dropping some data, in yuv
> case the entire frame as incomplete frames are droped by default, in
> the case of MJPG since there is no way of knowing the complete frame
> size (it varies due to the compression process), you just get part of
> the frame and that causes the ficker.
>
> In any case all seems to point to the usb connection, so I would run
> some tests on that.
>
> Best regards,
> Paulo

_______________________________________________
Linux-uvc-devel mailing list
Linux-uvc-devel at lists.berlios.de
https://lists.berlios.de/mailman/listinfo/linux-uvc-devel



-- 
Best Regards
Brian



      


From pj.assis at gmail.com  Thu Jun 25 10:12:58 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Thu, 25 Jun 2009 09:12:58 +0100
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <432730.44890.qm@web32504.mail.mud.yahoo.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
	<20090624225307.64b3a9ba@debian.fr>
	<59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
	<59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>
	<20090625000839.1cc2161e@debian.fr>
	<59cf47a80906241546k51ae9bdcrca722ef3da5ba19d@mail.gmail.com>
	<20090625022919.792ed2e8@debian.fr>
	<a81f87bb0906241757o6f3bf535ue9164c026d843a58@mail.gmail.com>
	<432730.44890.qm@web32504.mail.mud.yahoo.com>
Message-ID: <59cf47a80906250112g1bb47ef4ua6b73db2580a4aa7@mail.gmail.com>

Hi,

2009/6/25 Andrey Nechypurenko <andreynech at yahoo.com>

>
> Hi,
>
> > 1) dropping by the device because the host is too slow to drain the data,
> -> use a different host to test
>
> I also have this camera and on my Dell Precission M6400 notebook running
> latest stable Debian (lenny) luvcview shows no more then 10-12 fps so far.
> I did try it only in room with "normal" light conditions and auto-exposure
> turned on. I beleave auto-exposure was turned on because as I know it is the
> default setting and attempt to turn it off using luvcview does not work. I
> am currently on different computer and do not remember exact error message
> but it was just saying that attempt to turn it off failed.
>
> Just want to mention it to exclude USB and host performance related issue.
>
> Regards,
> Andrey.
>
>
> In this case it's most likely related to auto-exposure.
Use guvcview to turn it off ("Exposure, Auto Priority") it should make a big
difference in fps.

Best regards,
Paulo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090625/ebcbd60f/attachment.html>

From saintger at gmail.com  Thu Jun 25 13:41:40 2009
From: saintger at gmail.com (Saint Germain)
Date: Thu, 25 Jun 2009 13:41:40 +0200
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <432730.44890.qm@web32504.mail.mud.yahoo.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
	<20090624225307.64b3a9ba@debian.fr>
	<59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
	<59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>
	<20090625000839.1cc2161e@debian.fr>
	<59cf47a80906241546k51ae9bdcrca722ef3da5ba19d@mail.gmail.com>
	<20090625022919.792ed2e8@debian.fr>
	<a81f87bb0906241757o6f3bf535ue9164c026d843a58@mail.gmail.com>
	<432730.44890.qm@web32504.mail.mud.yahoo.com>
Message-ID: <5e5cdb040906250441g5f830906h26a0056f7f4b8744@mail.gmail.com>

Hello,

Do you have the Quickcam Pro 9000 or the Vision Pro ?
I didn't have any difficulty turning off the auto-exposure with both of them.
Have you tried with normal user and root ?
Anyway my problem was not so with the framerate (which may be
dependant of the exposure) but on dropped frames (which has an effect
on framerate)

Regards,

2009/6/25 Andrey Nechypurenko <andreynech at yahoo.com>:
>
> Hi,
>
>> 1) dropping by the device because the host is too slow to drain the data, -> use a different host to test
>
> I also have this camera and on my Dell Precission M6400 notebook running latest stable Debian (lenny) luvcview shows no more then 10-12 fps so far.
> I did try it only in room with "normal" light conditions and auto-exposure turned on. I beleave auto-exposure was turned on because as I know it is the default setting and attempt to turn it off using luvcview does not work. I am currently on different computer and do not remember exact error message but it was just saying that attempt to turn it off failed.
>
> Just want to mention it to exclude USB and host performance related issue.
>
> Regards,
> Andrey.
>
>
> On Wed, Jun 24, 2009 at 5:29 PM, Saint Germain <saintger at gmail.com> wrote:
>
> I've tried disconnecting all PCI cards except the USB controler and
> using it in different slot, but same results.
> I also tried booting with acpi=off but no such luck.
>
> I will try on another computer this week end. Really strange... I never
> had any problem with this USB controler.
>
> I also have a Philips Toucam Pro (need pwc driver) which if connected
> on the same port works correctly without a single dropped frame (but
> with a poor definition, something about the previous pwcx module being
> reimplemented).
>
> Maybe some freak combination of motherboard + USB controler + UVC
> module ?
>
> I'll keep you updated this WE.
>
> Thanks for your help !
>
> On Wed, 24 Jun 2009 23:46:11 +0100, Paulo Assis <pj.assis at gmail.com>
> wrote :
>
>
>> The YUYV fps difference to MJPG, IMHO, can only be caused by the
>> frame size. MJPG is compressed so it can be some 10 times smaller
>> compared to YUYV. This also indicates that CPU is not a problem since
>> MJPG requires a lot more CPU (needs decompressing)
>> So if memory is also not a problem, the only thing left is the USB
>> connection.
>>
>> I'm just intrigued by the flickering, even at 20 fps video should be
>> acceptable, I'm guessing the driver is dropping some data, in yuv
>> case the entire frame as incomplete frames are droped by default, in
>> the case of MJPG since there is no way of knowing the complete frame
>> size (it varies due to the compression process), you just get part of
>> the frame and that causes the ficker.
>>
>> In any case all seems to point to the usb connection, so I would run
>> some tests on that.
>>
>> Best regards,
>> Paulo
>
> _______________________________________________
> Linux-uvc-devel mailing list
> Linux-uvc-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
>
>
>
> --
> Best Regards
> Brian
>
>
>
>
> _______________________________________________
> Linux-uvc-devel mailing list
> Linux-uvc-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
>


From saintger at gmail.com  Thu Jun 25 13:44:13 2009
From: saintger at gmail.com (Saint Germain)
Date: Thu, 25 Jun 2009 13:44:13 +0200
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <a81f87bb0906241757o6f3bf535ue9164c026d843a58@mail.gmail.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624211838.5f59c8e0@debian.fr>
	<59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
	<20090624225307.64b3a9ba@debian.fr>
	<59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
	<59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>
	<20090625000839.1cc2161e@debian.fr>
	<59cf47a80906241546k51ae9bdcrca722ef3da5ba19d@mail.gmail.com>
	<20090625022919.792ed2e8@debian.fr>
	<a81f87bb0906241757o6f3bf535ue9164c026d843a58@mail.gmail.com>
Message-ID: <5e5cdb040906250444t79c21c97id6a81e36be0df7bc@mail.gmail.com>

Hello,

1) I will try this WE on a different computer which has USB 2.0 port
directly on motherboard and keep you update
2) I've included all trace here :
http://forums.quickcamteam.net/showthread.php?tid=860
3) I have the problem with guvcview, luvcview, mplayer, kopete,
skype... So I don't think that is an application issue

Thank you for your help !

2009/6/25 Brian Pin <shaohuang at gmail.com>:
> Hi
> Maybe there are some possible reasons..
> 1) dropping by the device because the host is too slow to drain the data, ->
> use a different host to test
> 2) dropping by the host uvc driver, -> turn on the trace to maximum to check
> if there is a drop
> 3) dropping by the application above uvc driver, -> probably be some timing
> issues or synchronization issues..don't know how to test, maybe a different
> application would tell the difference?
>
> Good luck
>
>
> On Wed, Jun 24, 2009 at 5:29 PM, Saint Germain <saintger at gmail.com> wrote:
>>
>> I've tried disconnecting all PCI cards except the USB controler and
>> using it in different slot, but same results.
>> I also tried booting with acpi=off but no such luck.
>>
>> I will try on another computer this week end. Really strange... I never
>> had any problem with this USB controler.
>>
>> I also have a Philips Toucam Pro (need pwc driver) which if connected
>> on the same port works correctly without a single dropped frame (but
>> with a poor definition, something about the previous pwcx module being
>> reimplemented).
>>
>> Maybe some freak combination of motherboard + USB controler + UVC
>> module ?
>>
>> I'll keep you updated this WE.
>>
>> Thanks for your help !
>>
>> On Wed, 24 Jun 2009 23:46:11 +0100, Paulo Assis <pj.assis at gmail.com>
>> wrote :
>>
>> > The YUYV fps difference to MJPG, IMHO, can only be caused by the
>> > frame size. MJPG is compressed so it can be some 10 times smaller
>> > compared to YUYV. This also indicates that CPU is not a problem since
>> > MJPG requires a lot more CPU (needs decompressing)
>> > So if memory is also not a problem, the only thing left is the USB
>> > connection.
>> >
>> > I'm just intrigued by the flickering, even at 20 fps video should be
>> > acceptable, I'm guessing the driver is dropping some data, in yuv
>> > case the entire frame as incomplete frames are droped by default, in
>> > the case of MJPG since there is no way of knowing the complete frame
>> > size (it varies due to the compression process), you just get part of
>> > the frame and that causes the ficker.
>> >
>> > In any case all seems to point to the usb connection, so I would run
>> > some tests on that.
>> >
>> > Best regards,
>> > Paulo
>> _______________________________________________
>> Linux-uvc-devel mailing list
>> Linux-uvc-devel at lists.berlios.de
>> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
>
>
>
> --
> Best Regards
> Brian
>


From valent.turkovic at gmail.com  Thu Jun 25 20:18:45 2009
From: valent.turkovic at gmail.com (Valent Turkovic)
Date: Thu, 25 Jun 2009 20:18:45 +0200
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
In-Reply-To: <200906201948.50314.laurent.pinchart@skynet.be>
References: <4fdcce020906192221o72a73fa3h281cf41ec0d7076a@mail.gmail.com>
	<200906201948.50314.laurent.pinchart@skynet.be>
Message-ID: <64b14b300906251118y5302c029wbfe3387f07e0b0d7@mail.gmail.com>

$ patch -p1 < webcam.patch
patching file linux/drivers/media/video/uvc/uvc_driver.c
Hunk #1 FAILED at 289.
Hunk #2 FAILED at 411.
Hunk #3 FAILED at 429.
patch unexpectedly ends in middle of line
Hunk #4 FAILED at 486.
4 out of 4 hunks FAILED -- saving rejects to file
linux/drivers/media/video/uvc/uvc_driver.c.rej


this patch fails for me ;(

Here is lsusb output from lsusb 0.73:
http://fpaste.org/paste/16494

and I had some problems conversting your patch because it is in html
to pure txt file, and this is the patch I tried to apply:
http://fpaste.org/paste/16495

Please check it out, maybe the problems is in my conversion from html
to txt and send me via email pure txt patch, thank you.

Valent.

On 6/20/09, Laurent Pinchart <laurent.pinchart at skynet.be> wrote:
> Hi Borislav,
>
> On Saturday 20 June 2009 07:21:01 Borislav Gerassimov wrote:
>> Hi,
>>
>> I would like to join your conversation... Few months ago (when kernel
>> 2.6.29 was released) this problem showed up for me too. I've searched
>> and found out this:
>>
>> http://developer.berlios.de/support/?func=detailsupport&support_id=102913&g
>>roup_id=5681
>>
>> Then in the forums of my distribution of choice I've found this:
>>
>> http://bbs.archlinux.org/viewtopic.php?id=70685
>>
>> In short: I've tested with vanilla kernel, it didn't work. I've
>> tweaked the patch, suggested by Pavel Pisa, applied it to 2.6.29 and
>> it worked. After that tweaked it for 2.6.30 and it worked too.
>> I don't know how exactly it helps, but it does its job. Please include
>> if possible.
>
> Thanks for the report, and thanks for pointing me to the discussions and
> patch.
>
> 2.6.31 will include a patch that might fix your issue. Could you please try
> it
> ? It applies on top of 2.6.30 and can be found at
> http://linuxtv.org/hg/~pinchartl/uvcvideo/diff/f873b121590f/linux/drivers/media/video/uvc/uvc_driver.c
>
> Could you please also send me the output of
>
> lsusb -v -d 0c45:62c0
>
> with usbutils 0.72 or newer (0.73+ preferred) ? Thanks.
>
> Best regards,
>
> Laurent Pinchart
>
> _______________________________________________
> Linux-uvc-devel mailing list
> Linux-uvc-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
>


-- 
http://kernelreloaded.blog385.com/
linux, blog, anime, spirituality, windsurf, wireless
registered as user #367004 with the Linux Counter, http://counter.li.org.
ICQ: 2125241, Skype: valent.turkovic


From laurent.pinchart at skynet.be  Thu Jun 25 21:56:30 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Thu, 25 Jun 2009 21:56:30 +0200
Subject: [Linux-uvc-devel] Multiple streaming interface and MPEG2-TS
	support?
In-Reply-To: <E54E921FAAA9494485999DFF27C90C95@vivek>
References: <E54E921FAAA9494485999DFF27C90C95@vivek>
Message-ID: <200906252156.31126.laurent.pinchart@skynet.be>

Hi Vivek,

On Monday 22 June 2009 14:23:21 Vivek Bardia wrote:
> Hello Laurent,
>
> With respect to the mail chain below,
> Would you be able to help me with regards to Multiple streaming interfaces.
>
> Firstly how much effort could be required to bring up the UVC driver to
> support multiple streaming interfaces and MPEG2-TS support ? In case it is
> simple and already available, will you be able to provide that patch so
> that I am able to test it with the hardware and get back about the same ?

Multiple streaming interfaces and MPEG2-TS are different requirements. 
Supporting multiple interfaces will require restructuring a good deal of the 
driver. I started working on that a week or two ago but had to stop for a 
moment (if you can send me a few hours of free time by e-mail I'll appreciate 
that). I should have some time this weekend or early next week to prepare a 
patch.

I haven't really looked into what needs to be changed for MPEG2-TS support. I 
don't expect it to be very difficult. I'll probably work on that over the 
weekend.

> Since I have just joined this mailing list, I do now have any patches in
> case you have already sent one.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Thu Jun 25 21:58:44 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Thu, 25 Jun 2009 21:58:44 +0200
Subject: [Linux-uvc-devel] purple tinted images on quickcam pro 5000
In-Reply-To: <1245676355.24333.12.camel@pc.interlinx.bc.ca>
References: <1245676355.24333.12.camel@pc.interlinx.bc.ca>
Message-ID: <200906252158.44481.laurent.pinchart@skynet.be>

Hi Brian,

On Monday 22 June 2009 15:12:36 Brian J. Murrell wrote:
> I have a Logitech Quickcam Pro 5000 which I am using with "motion".  The
> images it's getting though have a purple tint in the brightest spots
> (i.e. white t-shirt is purple).
>
> I have seen this before but I have also not seen it before.  Perhaps
> it's different pieces of software driving the cam in different ways.

Have you checked the quickcamteam.net forums for information ? They are pretty 
helpful for Logitech-specific issues.

> For background, dmesg reports:
>
> [ 1043.988176] usb 1-1: new full speed USB device using uhci_hcd and
> address 2 [ 1044.288031] usb 1-1: configuration #1 chosen from 1 choice
> [ 1044.544029] Linux video capture interface: v2.00
> [ 1045.326055] usbcore: registered new interface driver snd-usb-audio
> [ 1045.357304] uvcvideo: Found UVC 1.00 device <unnamed> (046d:08c5)
> [ 1045.367888] input: UVC Camera (046d:08c5) as
> /devices/pci0000:00/0000:00:1d.0/usb1/1-1/1-1:1.0/input/input9 [
> 1045.381663] usbcore: registered new interface driver uvcvideo
> [ 1045.381663] USB Video Class driver (v0.1.0)
>
> Also, perhaps related, perhaps not, motion complains:
>
> [1] VIDIOC_G_JPEGCOMP not supported but it should be (does your webcam
> driver support this ioctl?)

I got a patch for that but it was rejected. After some discussions V4L2 
developers reached the consensus that VIDIOC_[GS]_JPEGCOMP should be 
deprecated in favor of new JPEG controls. I haven't had time to work on a 
proposal for those.

Best regards,

Laurent Pinchart



From laurent.pinchart at skynet.be  Thu Jun 25 22:02:12 2009
From: laurent.pinchart at skynet.be (Laurent Pinchart)
Date: Thu, 25 Jun 2009 22:02:12 +0200
Subject: [Linux-uvc-devel] Webcam "No valid video chain found." issue
	(0c45:62c0 Microdia Sonix)
In-Reply-To: <64b14b300906251118y5302c029wbfe3387f07e0b0d7@mail.gmail.com>
References: <4fdcce020906192221o72a73fa3h281cf41ec0d7076a@mail.gmail.com>
	<200906201948.50314.laurent.pinchart@skynet.be>
	<64b14b300906251118y5302c029wbfe3387f07e0b0d7@mail.gmail.com>
Message-ID: <200906252202.12571.laurent.pinchart@skynet.be>

Hi Valent,

On Thursday 25 June 2009 20:18:45 Valent Turkovic wrote:
> $ patch -p1 < webcam.patch
> patching file linux/drivers/media/video/uvc/uvc_driver.c
> Hunk #1 FAILED at 289.
> Hunk #2 FAILED at 411.
> Hunk #3 FAILED at 429.
> patch unexpectedly ends in middle of line
> Hunk #4 FAILED at 486.
> 4 out of 4 hunks FAILED -- saving rejects to file
> linux/drivers/media/video/uvc/uvc_driver.c.rej
>
> this patch fails for me ;(
>
> Here is lsusb output from lsusb 0.73:
> http://fpaste.org/paste/16494
>
> and I had some problems conversting your patch because it is in html
> to pure txt file, and this is the patch I tried to apply:
> http://fpaste.org/paste/16495
>
> Please check it out, maybe the problems is in my conversion from html
> to txt and send me via email pure txt patch, thank you.

All you have to do is to click on the 'Raw' link. You'll get to

http://linuxtv.org/hg/~pinchartl/uvcvideo/raw-
diff/f873b121590f/linux/drivers/media/video/uvc/uvc_driver.c

which is a pure text version.

Best regards,

Laurent Pinchart



From bardia.vivek at gmail.com  Fri Jun 26 10:26:07 2009
From: bardia.vivek at gmail.com (Vivek Bardia)
Date: Fri, 26 Jun 2009 13:56:07 +0530
Subject: [Linux-uvc-devel] Multiple streaming interface and MPEG2-TS
	support?
In-Reply-To: <200906252156.31126.laurent.pinchart@skynet.be>
References: <E54E921FAAA9494485999DFF27C90C95@vivek>
	<200906252156.31126.laurent.pinchart@skynet.be>
Message-ID: <779226550906260126x644f6e28lb222e5e1fc169196@mail.gmail.com>

On Fri, Jun 26, 2009 at 1:26 AM, Laurent Pinchart
<laurent.pinchart at skynet.be> wrote:
>
> Hi Vivek,
>
> On Monday 22 June 2009 14:23:21 Vivek Bardia wrote:
> > Hello Laurent,
> >
> > With respect to the mail chain below,
> > Would you be able to help me with regards to Multiple streaming interfaces.
> >
> > Firstly how much effort could be required to bring up the UVC driver to
> > support multiple streaming interfaces and MPEG2-TS support ? In case it is
> > simple and already available, will you be able to provide that patch so
> > that I am able to test it with the hardware and get back about the same ?
>
> Multiple streaming interfaces and MPEG2-TS are different requirements.
> Supporting multiple interfaces will require restructuring a good deal of the
> driver. I started working on that a week or two ago but had to stop for a
> moment (if you can send me a few hours of free time by e-mail I'll appreciate
> that). I should have some time this weekend or early next week to prepare a
> patch.
>

Although I cannot send you free time by email, but can help you in
this regard in case you need help. I do not want to add more overhead
and confusion in case you are already working on it.

> I haven't really looked into what needs to be changed for MPEG2-TS support. I
> don't expect it to be very difficult. I'll probably work on that over the
> weekend.
>

Just one more thing, With regards to MPEG2-TS its just adding the
parsing support, if I am not wrong?

> > Since I have just joined this mailing list, I do now have any patches in
> > case you have already sent one.
>
> Best regards,
>
> Laurent Pinchart
>

Best Regards,
Vivek


From enr.dilello at gmail.com  Sun Jun 28 13:18:18 2009
From: enr.dilello at gmail.com (Enrico Di Lello)
Date: Sun, 28 Jun 2009 13:18:18 +0200
Subject: [Linux-uvc-devel] Setting camera priority
Message-ID: <9ad1ec5d0906280418o23f46f27ubf1c28d597ed89b3@mail.gmail.com>

Hello everibody,

I am currently working on integrating a camera on small robotic
platform. The robot mounts a FoxBoard running an embedded 2.6.25 linux
kernel. The camera I am using is a Logitech E3500, which works pretty
much ok.  The camera is connected via a USB 1.1 port, so it looks like
that, even setting a very low frame rate, 176x144 is the maximum
resolution allowed for YUYV format.

Anyway, even thought my issue is not directly related to the uvcvideo
driver, I hope that some of the people reading this newsletter could
help.

When grabbing frames, everything goes fine.
The problem arises when trying to acquire frames and reading from a
serial port (not necessarily at the same time). If one application is
reading data from a serial port, it gets interrupted (pretty much
randomly) after that another application does the VIDIOC_STREAMON
ioctl call, even if it is not grabbing frames yet.

Probably the issue is related with the USB DMA configuration of the
FoxBoard, but I would like to ask if it is possible to lower the
priority that the linux scheduler assigns to the uvcdriver somehow, or
have a little more detail about how the driver behaves in this
context.

Thanks,

Enrico


From saintger at gmail.com  Sun Jun 28 23:33:03 2009
From: saintger at gmail.com (Saint Germain)
Date: Sun, 28 Jun 2009 23:33:03 +0200
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <5e5cdb040906250444t79c21c97id6a81e36be0df7bc@mail.gmail.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624211838.5f59c8e0@debian.fr>
	<59cf47a80906241328y576a6468n3dcad2c48421ae67@mail.gmail.com>
	<20090624225307.64b3a9ba@debian.fr>
	<59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
	<59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>
	<20090625000839.1cc2161e@debian.fr>
	<59cf47a80906241546k51ae9bdcrca722ef3da5ba19d@mail.gmail.com>
	<20090625022919.792ed2e8@debian.fr>
	<a81f87bb0906241757o6f3bf535ue9164c026d843a58@mail.gmail.com>
	<5e5cdb040906250444t79c21c97id6a81e36be0df7bc@mail.gmail.com>
Message-ID: <20090628233303.0a963ae2@debian.fr>

Hello,

I've tried on a completely different computer  (mine is an old Dell
GX150 workstation with a PCI USB 2.0 controller, the other is a new Acer
laptop) and I have exactly the same problem (with kernel 2.6.26).

However this time I could try on Windows Vista (which was on the laptop)
and the webcam is working perfectly !

So now I really don't know where the problem is ?

If both computers never have any problem with the USB controller and
that the webcam is working on Vista and that I have other webcams using
pwc driver which worked, it seems that the problem is in the uvcvideo
module ?
But some people on this mailing-list have reported that this webcam is
working perfectly on linux ?!?

I really don't know how to investigate further...
I only have 3 days left for returning my webcam, so do you think that
it's worth keeping the webcam and help debugging or should I return the
webcam ?

Thanks a lot anyway for the people who have tried to help !
It's very refreshing to have some kind of support...

Regards,

On Thu, 25 Jun 2009 13:44:13 +0200, Saint Germain <saintger at gmail.com>
wrote :

> Hello,
> 
> 1) I will try this WE on a different computer which has USB 2.0 port
> directly on motherboard and keep you update
> 2) I've included all trace here :
> http://forums.quickcamteam.net/showthread.php?tid=860
> 3) I have the problem with guvcview, luvcview, mplayer, kopete,
> skype... So I don't think that is an application issue
> 
> Thank you for your help !
> 
> 2009/6/25 Brian Pin <shaohuang at gmail.com>:
> > Hi
> > Maybe there are some possible reasons..
> > 1) dropping by the device because the host is too slow to drain the
> > data, -> use a different host to test
> > 2) dropping by the host uvc driver, -> turn on the trace to maximum
> > to check if there is a drop
> > 3) dropping by the application above uvc driver, -> probably be
> > some timing issues or synchronization issues..don't know how to
> > test, maybe a different application would tell the difference?
> >
> > Good luck
> >
> >
> > On Wed, Jun 24, 2009 at 5:29 PM, Saint Germain <saintger at gmail.com>
> > wrote:
> >>
> >> I've tried disconnecting all PCI cards except the USB controler and
> >> using it in different slot, but same results.
> >> I also tried booting with acpi=off but no such luck.
> >>
> >> I will try on another computer this week end. Really strange... I
> >> never had any problem with this USB controler.
> >>
> >> I also have a Philips Toucam Pro (need pwc driver) which if
> >> connected on the same port works correctly without a single
> >> dropped frame (but with a poor definition, something about the
> >> previous pwcx module being reimplemented).
> >>
> >> Maybe some freak combination of motherboard + USB controler + UVC
> >> module ?
> >>
> >> I'll keep you updated this WE.
> >>
> >> Thanks for your help !
> >>
> >> On Wed, 24 Jun 2009 23:46:11 +0100, Paulo Assis
> >> <pj.assis at gmail.com> wrote :
> >>
> >> > The YUYV fps difference to MJPG, IMHO, can only be caused by the
> >> > frame size. MJPG is compressed so it can be some 10 times smaller
> >> > compared to YUYV. This also indicates that CPU is not a problem
> >> > since MJPG requires a lot more CPU (needs decompressing)
> >> > So if memory is also not a problem, the only thing left is the
> >> > USB connection.
> >> >
> >> > I'm just intrigued by the flickering, even at 20 fps video
> >> > should be acceptable, I'm guessing the driver is dropping some
> >> > data, in yuv case the entire frame as incomplete frames are
> >> > droped by default, in the case of MJPG since there is no way of
> >> > knowing the complete frame size (it varies due to the
> >> > compression process), you just get part of the frame and that
> >> > causes the ficker.
> >> >
> >> > In any case all seems to point to the usb connection, so I would
> >> > run some tests on that.
> >> >
> >> > Best regards,
> >> > Paulo
> >> _______________________________________________
> >> Linux-uvc-devel mailing list
> >> Linux-uvc-devel at lists.berlios.de
> >> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
> >
> >
> >
> > --
> > Best Regards
> > Brian
> >


From shaohuang at gmail.com  Mon Jun 29 03:19:04 2009
From: shaohuang at gmail.com (Brian Pin)
Date: Sun, 28 Jun 2009 18:19:04 -0700
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <20090628233303.0a963ae2@debian.fr>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090624225307.64b3a9ba@debian.fr>
	<59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
	<59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>
	<20090625000839.1cc2161e@debian.fr>
	<59cf47a80906241546k51ae9bdcrca722ef3da5ba19d@mail.gmail.com>
	<20090625022919.792ed2e8@debian.fr>
	<a81f87bb0906241757o6f3bf535ue9164c026d843a58@mail.gmail.com>
	<5e5cdb040906250444t79c21c97id6a81e36be0df7bc@mail.gmail.com>
	<20090628233303.0a963ae2@debian.fr>
Message-ID: <a81f87bb0906281819o3e9c757cl4baf3f1e2c840a8@mail.gmail.com>

Hi,
Based on the link you provided (
http://forums.quickcamteam.net/showthread.php?tid=860), There are obviously
a lot of frame drops (USB isochronous frame lost (-71).)  "-71" means
-EPROTO,  which will be dropped by the driver:
    :
    for (i = 0; i < urb->number_of_packets; ++i) {
        if (urb->iso_frame_desc[i].status < 0) {
            uvc_trace(UVC_TRACE_FRAME, "USB isochronous frame lost (%d).\n",
urb->iso_frame_desc[i].status);
            continue;
        }
   :
The "-EPROTO" status of each isoc packet is set by the host controller
driver when there are some error happens and halts the controller. You also
verified on the other machines the situation is not happening, so maybe you
can try some different port of your Linux machine, or find a different Linux
machine to test it. All in all the reason probabbly is not related to the
device or the application. It is just the host controller you use. Maybe try
to post some questions on Linux-USB mailing list helps.
-- 
Best Regards
Brian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090628/fa81d58f/attachment.html>

From saintger at gmail.com  Mon Jun 29 13:48:17 2009
From: saintger at gmail.com (Saint Germain)
Date: Mon, 29 Jun 2009 13:48:17 +0200
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <a81f87bb0906281819o3e9c757cl4baf3f1e2c840a8@mail.gmail.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<59cf47a80906241438n1de5ad87h75a6b45dcab0843e@mail.gmail.com>
	<59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>
	<20090625000839.1cc2161e@debian.fr>
	<59cf47a80906241546k51ae9bdcrca722ef3da5ba19d@mail.gmail.com>
	<20090625022919.792ed2e8@debian.fr>
	<a81f87bb0906241757o6f3bf535ue9164c026d843a58@mail.gmail.com>
	<5e5cdb040906250444t79c21c97id6a81e36be0df7bc@mail.gmail.com>
	<20090628233303.0a963ae2@debian.fr>
	<a81f87bb0906281819o3e9c757cl4baf3f1e2c840a8@mail.gmail.com>
Message-ID: <5e5cdb040906290448t6c6bdd6dvba5e04f988431dc7@mail.gmail.com>

Hello,

Sorry for the misunderstanding (maybe my english could be better):
I've tried on another port and another computer and I had exactly the
same problem.
I will try on a third computer this evening, but if the problem is
still the same, surely the problem couldn't be on the USB controller
(otherwise it would be really surprising that I would be the first to
note this kind of problem which occur on every kind of USB
controller).

Something that I haven't tried is another linux distro: I've always
tried on Debian. Maybe I should give a shot to Suse or RedHat.

Thanks anyway !

2009/6/29 Brian Pin <shaohuang at gmail.com>:
> Hi,
> Based on the link you provided
> (http://forums.quickcamteam.net/showthread.php?tid=860), There are obviously
> a lot of frame drops (USB isochronous frame lost (-71).)  "-71" means
> -EPROTO,  which will be dropped by the driver:
>     :
>     for (i = 0; i < urb->number_of_packets; ++i) {
>         if (urb->iso_frame_desc[i].status < 0) {
>             uvc_trace(UVC_TRACE_FRAME, "USB isochronous frame lost (%d).\n",
> urb->iso_frame_desc[i].status);
>             continue;
>         }
>    :
> The "-EPROTO" status of each isoc packet is set by the host controller
> driver when there are some error happens and halts the controller. You also
> verified on the other machines the situation is not happening, so maybe you
> can try some different port of your Linux machine, or find a different Linux
> machine to test it. All in all the reason probabbly is not related to the
> device or the application. It is just the host controller you use. Maybe try
> to post some questions on Linux-USB mailing list helps.
> --
> Best Regards
> Brian
>


From pj.assis at gmail.com  Mon Jun 29 20:14:01 2009
From: pj.assis at gmail.com (Paulo Assis)
Date: Mon, 29 Jun 2009 19:14:01 +0100
Subject: [Linux-uvc-devel] Fwd: Dropped frames with Logitech Quickcam Pro
	9000
In-Reply-To: <59cf47a80906291113h1ac7cc38u85c36ae9c5a3e6e3@mail.gmail.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<20090625000839.1cc2161e@debian.fr>
	<59cf47a80906241546k51ae9bdcrca722ef3da5ba19d@mail.gmail.com>
	<20090625022919.792ed2e8@debian.fr>
	<a81f87bb0906241757o6f3bf535ue9164c026d843a58@mail.gmail.com>
	<5e5cdb040906250444t79c21c97id6a81e36be0df7bc@mail.gmail.com>
	<20090628233303.0a963ae2@debian.fr>
	<a81f87bb0906281819o3e9c757cl4baf3f1e2c840a8@mail.gmail.com>
	<5e5cdb040906290448t6c6bdd6dvba5e04f988431dc7@mail.gmail.com>
	<59cf47a80906291113h1ac7cc38u85c36ae9c5a3e6e3@mail.gmail.com>
Message-ID: <59cf47a80906291114s643ddab8y3e2227c22e5a0a63@mail.gmail.com>

Hi,
 2.6.26 is quite old, please at least try with a newer kernel (> 2.6.28),
This camera is working very well on Ubuntu Jaunty (2.6.28). 2.6.26 doesn't
even have uvc builtin (it's only available  since 2.6.27).

Also, regarding the Philips cameras (pwc) although most of them advertise
usb2 compatibility they are in truth usb1 cameras.

Best regards,
Paulo

2009/6/29 Saint Germain <saintger at gmail.com>

Hello,
>
> Sorry for the misunderstanding (maybe my english could be better):
> I've tried on another port and another computer and I had exactly the
> same problem.
> I will try on a third computer this evening, but if the problem is
> still the same, surely the problem couldn't be on the USB controller
> (otherwise it would be really surprising that I would be the first to
> note this kind of problem which occur on every kind of USB
> controller).
>
> Something that I haven't tried is another linux distro: I've always
> tried on Debian. Maybe I should give a shot to Suse or RedHat.
>
> Thanks anyway !
>
> 2009/6/29 Brian Pin <shaohuang at gmail.com>:
> > Hi,
> > Based on the link you provided
> > (http://forums.quickcamteam.net/showthread.php?tid=860), There are
> obviously
> > a lot of frame drops (USB isochronous frame lost (-71).)  "-71" means
> > -EPROTO,  which will be dropped by the driver:
> >     :
> >     for (i = 0; i < urb->number_of_packets; ++i) {
> >         if (urb->iso_frame_desc[i].status < 0) {
> >             uvc_trace(UVC_TRACE_FRAME, "USB isochronous frame lost
> (%d).\n",
> > urb->iso_frame_desc[i].status);
> >             continue;
> >         }
> >    :
> > The "-EPROTO" status of each isoc packet is set by the host controller
> > driver when there are some error happens and halts the controller. You
> also
> > verified on the other machines the situation is not happening, so maybe
> you
> > can try some different port of your Linux machine, or find a different
> Linux
> > machine to test it. All in all the reason probabbly is not related to the
> > device or the application. It is just the host controller you use. Maybe
> try
> > to post some questions on Linux-USB mailing list helps.
> > --
> > Best Regards
> > Brian
> >
> _______________________________________________
> Linux-uvc-devel mailing list
> Linux-uvc-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/linux-uvc-devel/attachments/20090629/c61c12ee/attachment.html>

From luca at luckyluke.org  Mon Jun 29 23:18:05 2009
From: luca at luckyluke.org (Luca Lesinigo)
Date: Mon, 29 Jun 2009 23:18:05 +0200
Subject: [Linux-uvc-devel] CLI software to record video
Message-ID: <FE9E9F08-F22F-472E-A553-52359DF157E3@luckyluke.org>

Hello there.

I spent some time googling around and looking at the list archives,  
but I cannot find a (non-X11) software that would let me do a 'simple'  
video recording without any fancy stuff or reencoding.

I'm using a logitech S7500 for my tests, it's an UVC cam with support  
for MJPEG. I could use mencoder to record the 'raw' mjpeg stream  
without any re-encoding but that also means without audio: it  
segfaults if I try to record audio too (either from the cam usb audio  
source or from the alsa soundcard in the pc).

I can still record audio in another process and mix everything  
afterwards, no big problem. The _real_ problem is that video is never  
recorded at constant speed. It probably depends on the camera varying  
the framerate (autoexposure or stuff like that, probably) and/or usb  
or the hci loosing some data here and there. But this is also not a  
problem (loosing frames) as long as I get a playable video. Too bad  
this is not the case: the actual speed will vary and some parts will  
be faster than others.

I'm not an expert but I suspect this is due to the "timestamps not  
implemented" that I read on UVC homepage.

I'm working on a more-or-less embedded platform (the prototype  
actually is a notebook without any human operator and also without  
X11) and I'm looking for a software (or a combination of) that would  
let me:
- set the cam to turn off fancy stuff and run as constant fps as it  
can - don't need ultrafast, 640x480 at 25fps would be enough
- record the video with the lowest possible cpu usage - I think a  
direct MJPEG recording from the cam to file should be the best option
- playback / reencode the video afterwards and get a 'constant wall  
clock speed' video (no problems if it looses frames as long as this is  
accounted for)
- audio recording in the same file would be a bonus but not needed,  
alsarec is already doing its job

I don't really need anything else, the system will start recording  
right after boot and keep on until power off. Right now I'm using the  
latest stable kernels from kernel.org, but applying any patch and  
recompiling is not a problem. If possible, I plan to stick to UVC  
cameras with MJPEG support, probably logitech ones.
Any help would be really appreciated, thanks.

--
Luca Lesinigo


From saintger at gmail.com  Tue Jun 30 01:27:32 2009
From: saintger at gmail.com (Saint Germain)
Date: Tue, 30 Jun 2009 01:27:32 +0200
Subject: [Linux-uvc-devel] Dropped frames with Logitech Quickcam Pro 9000
In-Reply-To: <59cf47a80906291113h1ac7cc38u85c36ae9c5a3e6e3@mail.gmail.com>
References: <20090621010026.30d7f8ab@debian.fr>
	<59cf47a80906241443j7ed07903me1a56218cb1ba944@mail.gmail.com>
	<20090625000839.1cc2161e@debian.fr>
	<59cf47a80906241546k51ae9bdcrca722ef3da5ba19d@mail.gmail.com>
	<20090625022919.792ed2e8@debian.fr>
	<a81f87bb0906241757o6f3bf535ue9164c026d843a58@mail.gmail.com>
	<5e5cdb040906250444t79c21c97id6a81e36be0df7bc@mail.gmail.com>
	<20090628233303.0a963ae2@debian.fr>
	<a81f87bb0906281819o3e9c757cl4baf3f1e2c840a8@mail.gmail.com>
	<5e5cdb040906290448t6c6bdd6dvba5e04f988431dc7@mail.gmail.com>
	<59cf47a80906291113h1ac7cc38u85c36ae9c5a3e6e3@mail.gmail.com>
Message-ID: <20090630012732.4c06eb36@debian.fr>

Hello,

I'm currently on 2.6.30 and the problem is still here.
However I've tried on a brand new (Sony Vaio) laptop and the webcam is
working fine (kernel 2.6.26 with the Debian live Lenny).
So it seems that you were right and that it has something to do with my
computer... :-(

Strangely I was expecting the have much less dropped frames when
lowering the resolution (160*120) but it has almost no effect (I
thought that the frames would be smaller...).

Well I think that I'll keep the camera but now I have to debug the USB
controller... Maybe not as easy as debugging uvcvideo ! ;-)

If you have any idea to debug this kind of problem, don't hesitate !
For instance how to simulate a webcam input/load. Otherwise everybody
will say that the problem lie in the webcam !
I will try to debug the USB controller from now on...

Thanks anyway for all those who have helped me. And sorry for this
"false" problem with uvcvideo.

Regards,

On Mon, 29 Jun 2009 19:13:36 +0100, Paulo Assis <pj.assis at gmail.com>
wrote :

> Hi,
>  2.6.26 is quite old, please at least try with a newer kernel (>
> 2.6.28), This camera is working very well on Ubuntu Jaunty (2.6.28).
> 2.6.26 doesn't even have uvc builtin (it's only available  since
> 2.6.27).
> 
> Also, regarding the Philips cameras (pwc) although most of them
> advertise usb2 compatibility they are in truth usb1 cameras.
> 
> Best regards,
> Paulo
> 
> 2009/6/29 Saint Germain <saintger at gmail.com>
> 
> > Hello,
> >
> > Sorry for the misunderstanding (maybe my english could be better):
> > I've tried on another port and another computer and I had exactly
> > the same problem.
> > I will try on a third computer this evening, but if the problem is
> > still the same, surely the problem couldn't be on the USB controller
> > (otherwise it would be really surprising that I would be the first
> > to note this kind of problem which occur on every kind of USB
> > controller).
> >
> > Something that I haven't tried is another linux distro: I've always
> > tried on Debian. Maybe I should give a shot to Suse or RedHat.
> >
> > Thanks anyway !
> >
> > 2009/6/29 Brian Pin <shaohuang at gmail.com>:
> > > Hi,
> > > Based on the link you provided
> > > (http://forums.quickcamteam.net/showthread.php?tid=860), There are
> > obviously
> > > a lot of frame drops (USB isochronous frame lost (-71).)  "-71"
> > > means -EPROTO,  which will be dropped by the driver:
> > >     :
> > >     for (i = 0; i < urb->number_of_packets; ++i) {
> > >         if (urb->iso_frame_desc[i].status < 0) {
> > >             uvc_trace(UVC_TRACE_FRAME, "USB isochronous frame lost
> > (%d).\n",
> > > urb->iso_frame_desc[i].status);
> > >             continue;
> > >         }
> > >    :
> > > The "-EPROTO" status of each isoc packet is set by the host
> > > controller driver when there are some error happens and halts the
> > > controller. You
> > also
> > > verified on the other machines the situation is not happening, so
> > > maybe
> > you
> > > can try some different port of your Linux machine, or find a
> > > different
> > Linux
> > > machine to test it. All in all the reason probabbly is not
> > > related to the device or the application. It is just the host
> > > controller you use. Maybe
> > try
> > > to post some questions on Linux-USB mailing list helps.
> > > --
> > > Best Regards
> > > Brian
> > >
> > _______________________________________________
> > Linux-uvc-devel mailing list
> > Linux-uvc-devel at lists.berlios.de
> > https://lists.berlios.de/mailman/listinfo/linux-uvc-devel
> >


From valent.turkovic at gmail.com  Tue Jun 30 19:44:37 2009
From: valent.turkovic at gmail.com (Valent Turkovic)
Date: Tue, 30 Jun 2009 19:44:37 +0200
Subject: [Linux-uvc-devel] CLI software to record video
In-Reply-To: <FE9E9F08-F22F-472E-A553-52359DF157E3@luckyluke.org>
References: <FE9E9F08-F22F-472E-A553-52359DF157E3@luckyluke.org>
Message-ID: <64b14b300906301044v11d8cac9q1d186a1b7cd8c56e@mail.gmail.com>

On Mon, Jun 29, 2009 at 11:18 PM, Luca Lesinigo<luca at luckyluke.org> wrote:
> Hello there.
>
> I spent some time googling around and looking at the list archives,
> but I cannot find a (non-X11) software that would let me do a 'simple'
> video recording without any fancy stuff or reencoding.

I'm not 100% sure but you can try using /dev/video0 device directly
and write from it to file, or using mplayer tv:// and using it to
write to file, or vlc...

all this can be used from cli with no graphical innterface, don't ask
me for details but google for it and then share your info with others
here ;)

-- 
http://kernelreloaded.blog385.com/
linux, blog, anime, spirituality, windsurf, wireless
registered as user #367004 with the Linux Counter, http://counter.li.org.
ICQ: 2125241, Skype: valent.turkovic


